{"version":3,"sources":["ng-tree-dnd.js"],"names":["isUndefinedOrNull","val","angular","isUndefined","isDefined","fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","fnController","$scope","$element","$attrs","check_exist_attr","attrs","existAttr","isAnd","isArray","for_each_attrs","exist","i","len","length","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","isFunction","$watch","indexOf","$safeApply","fn","phase","this","$root","$$phase","$apply","getExpandOn","treeData","_len","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","push","field","colDefinitions","do_f","root","node","parent","parent_real","level","visible","index","_i","_icon","_index_real","_dept","_hashKey","__children__","__parent_real__","__parent__","__expanded__","expandLevel","__index__","__index_real__","__level__","__icon__","__icon_class__","$class","icon","__visible__","__uid__","Math","random","primary_key","getHash","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","expandOn","columnDefs","orderBy","_fnInitOrderBy","filter","_fnInitFilter","filterOptions","_offset","_max","_min","_deptTotal","$globals","abs","tree_nodes","indent","indent_plus","indent_unit","$tree_class","$type","copy","extend","1","iconExpand","0","iconCollapse","-1","iconLeaf","for_all_descendants","_nodes","getLastDescendant","last_child","n","tree","selected_node","getElementChilds","element","querySelector","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","accept","dragInfo","moveTo","isChanged","dropEnabled","calsIndent","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","event","changeKey","_key","__selected__","replace","clone","_this","remove","splice","add","pos","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","changed","_node","_nodeAdd","_move","move","_parent","_parentRemove","drag","_parentAdd","target","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","getNode","setScope","scope","_hash","getScope","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","_fnGetControl","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","trim","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","fnCompile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","prop","treeInclude","cache","success","data","templateNode","templateUrl","getPath","restrict","controller","compile","fnInitTreeDnDViewport","$q","update","viewportRect","width","eWindow","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","isUpdating","isRender","updateAgain","recursivePromise","item","elementRect","inViewport","number","items","getBoundingClientRect","pointIsInsideBounds","console","log","x","y","bounds","setViewport","viewport","getViewport","updateDelayed","window","clearTimeout","updateTimeout","callback","getItems","$initViewport","on","module","constant","nodes","handle","directive","link","new_val","compileReplace","replaceWith","$TreeDnDViewport","$node_class","_enabledDragDrop","keyNode","treeDndNode","getData","getScopeNode","__inited__","elem","contents","$nodes_class","$inject","factory","_$initConvert","line2tree","parentKey","parentId","rootIds","_primary","treeObjs","tree2tree","access_child","containKey","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","offset","boundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","moving","replaceIndent","children","$injector","_fnget","name","has","temp","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","check","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","isObject","_filter","_state","_fnMain","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","toLowerCase","_$scope","preventDefault","tagName","dragIno","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","document_width","scrollWidth","offsetWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","_height","_prev","dragBorder","prepend","_fnDragEnd","_isTable","_status","$$apply","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","shiftKey","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put","join"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n * @preserve\n */\n\n/**\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\n * Github: https://github.com/thienhung1989/angular-tree-dnd\n * @version 3.0.4\n * @preserve\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\n */\n(function () {\n    'use strict';\n    angular.isUndefinedOrNull = isUndefinedOrNull;\n    angular.isDefined = isDefined;\n\n    function isUndefinedOrNull(val) {\n        return angular.isUndefined(val) || val === null;\n    }\n\n    function isDefined(val) {\n        return !(angular.isUndefined(val) || val === null);\n    }\n\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\n        .constant(\n        '$TreeDnDClass', {\n            tree:   'tree-dnd',\n            empty:  'tree-dnd-empty',\n            hidden: 'tree-dnd-hidden',\n            node:   'tree-dnd-node',\n            nodes:  'tree-dnd-nodes',\n            handle: 'tree-dnd-handle',\n            place:  'tree-dnd-placeholder',\n            drag:   'tree-dnd-drag',\n            status: 'tree-dnd-status',\n            icon:   {\n                '1':  'glyphicon glyphicon-minus',\n                '0':  'glyphicon glyphicon-plus',\n                '-1': 'glyphicon glyphicon-file'\n            }\n        }\n    );angular.module('ntt.TreeDnD')\n    .directive(\n    'compile', [\n        '$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compile, function (new_val) {\n                            if (new_val) {\n                                if (angular.isFunction(element.empty)) {\n                                    element.empty();\n                                } else {\n                                    element.html('');\n                                }\n\n                                element.append($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n)\n    .directive(\n    'compileReplace', [\n        '$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                link:     function (scope, element, attrs) {\n                    scope.$watch(\n                        attrs.compileReplace, function (new_val) {\n                            if (new_val) {\n                                element.replaceWith($compile(new_val)(scope));\n                            }\n                        }\n                    );\n                }\n            };\n        }]\n);\n\nangular.module('ntt.TreeDnD')\r    .directive(\r    'treeDndNodeHandle', function () {\r        return {\r            restrict: 'A',\r            scope:    true,\r            link:     function (scope, element, attrs) {\r                scope.$type = 'TreeDnDNodeHandle';\r                if (scope.$class.handle) {\r                    element.addClass(scope.$class.handle);\r                }\r            }\r        };\r    }\r);\n\nangular.module('ntt.TreeDnD')\n    .directive(\n    'treeDndNode', ['$TreeDnDViewport', '$timeout', function ($TreeDnDViewport, $timeout) {\n        return {\n            restrict:   'A',\n            controller: function ($scope, $element, $attrs) {\n                $scope.$node_class = '';\n\n                if ($scope.$class.node) {\n                    $element.addClass($scope.$class.node);\n                    $scope.$node_class = $scope.$class.node;\n                }\n\n                var _enabledDragDrop = typeof $scope.dragEnabled === 'boolean' || typeof $scope.dropEnabled === 'boolean',\n                    keyNode          = $attrs.treeDndNode;\n\n                if (_enabledDragDrop) {\n                    $scope.setScope($scope, $scope[keyNode]);\n                }\n\n                $scope.getElementChilds = function () {\n                    return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n                };\n\n                if (_enabledDragDrop) {\n\n                    $scope.$element = $element;\n                    $scope.$type    = 'TreeDnDNode';\n\n                    $scope.getData = function () {\n                        return $scope[keyNode];\n                    };\n                }\n\n                $scope.getScopeNode = function () {\n                    return $scope;\n                };\n            },\n            link:       function (scope, element/*, attrs*/) {\n                scope.node.__inited__ = true;\n                $timeout(function(){\n                    $TreeDnDViewport.add(element, fnCallback);\n\n                    function fnCallback(compile, elem) {\n                        elem.html(scope.templateNode);\n                        compile(elem.contents())(scope);\n                        //scope.$digest();\n                    }\n                }, 0);\n            }\n        };\n    }]\n);\n\nangular.module('ntt.TreeDnD')\n    .directive(\n    'treeDndNodes', ['$parse',function ($parse) {\n        return {\n            restrict: 'A',\n            replace:  true,\n            link:     function (scope, element, attrs) {\n                scope.$nodes_class = '';\n                scope.$type = 'TreeDnDNodes';\n\n                if (scope.$class.nodes) {\n                    element.addClass(scope.$class.nodes);\n                    scope.$nodes_class = scope.$class.nodes;\n                }\n            }\n        };\n    }]\n);\n\nangular.module('ntt.TreeDnD')\n    .directive(\n    'treeDnd', fnInitTreeDnD);\n\nfnInitTreeDnD.$inject = [\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin'\n];\n\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin\n) {\n    return {\n        restrict:   'E',\n        scope:      true,\n        replace:    true,\n        controller: ['$scope', '$element', '$attrs', fnController],\n        compile:    fnCompile\n    };\n\n    function fnController($scope, $element, $attrs) {\n        $scope.indent      = 20;\n        $scope.indent_plus = 15;\n        $scope.indent_unit = 'px';\n        $scope.$tree_class = 'table';\n        $scope.primary_key = '__uid__';\n\n        $scope.$type = 'TreeDnD';\n        // $scope.enabledFilter = null;\n        $scope.colDefinitions = [];\n        $scope.$globals       = {};\n        $scope.$class         = {};\n\n        $scope.treeData   = [];\n        $scope.tree_nodes = [];\n\n        $scope.$class = angular.copy($TreeDnDClass);\n        angular.extend(\n            $scope.$class.icon, {\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\n            }\n        );\n\n        $scope.for_all_descendants = function (node, fn) {\n            if (angular.isFunction(fn)) {\n                var _i, _len, _nodes;\n\n                if (fn(node)) {\n                    return false;\n                }\n                _nodes = node.__children__;\n                _len   = _nodes.length;\n                for (_i = 0; _i < _len; _i++) {\n                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n\n        $scope.getLastDescendant = function (node) {\n            var last_child, n;\n            if (!node) {\n                node = $scope.tree ? $scope.tree.selected_node : false;\n            }\n            if (node === false) {\n                return false;\n            }\n            n = node.__children__.length;\n            if (n === 0) {\n                return node;\n            } else {\n                last_child = node.__children__[n - 1];\n                return $scope.getLastDescendant(last_child);\n            }\n        };\n\n        $scope.getElementChilds = function () {\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\n        };\n\n        $scope.onClick = function (node) {\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\n                // We want to detach from Angular's digest cycle so we can\n                // independently measure the time for one cycle.\n                setTimeout(\n                    function () {\n                        $scope.tree.on_click(node);\n                    }, 0\n                );\n            }\n        };\n\n        $scope.onSelect = function (node) {\n            if (angular.isDefined($scope.tree)) {\n                if (node !== $scope.tree.selected_node) {\n                    $scope.tree.select_node(node);\n                }\n\n                if (angular.isFunction($scope.tree.on_select)) {\n                    setTimeout(\n                        function () {\n                            $scope.tree.on_select(node);\n                        }, 0\n                    );\n                }\n            }\n        };\n\n        var passedExpand, _clone;\n        $scope.toggleExpand = function (node, fnCallback) {\n            passedExpand = true;\n            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\n                passedExpand = false;\n            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\n                passedExpand = false;\n            }\n\n            if (passedExpand) {\n                if (node.__children__.length > 0) {\n                    node.__expanded__ = !node.__expanded__;\n                }\n            }\n        };\n\n        $scope.getHash = function (node) {\n            if ($scope.primary_key === '__uid__') {\n                return '#' + node.__parent__ + '#' + node.__uid__;\n            } else {\n                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\n            }\n        };\n\n        $scope.$callbacks = {\n            for_all_descendants: $scope.for_all_descendants,\n            expand:              function (node) {\n                return true;\n            },\n            accept:              function (dragInfo, moveTo, isChanged) {\n                return $scope.dropEnabled === true;\n            },\n            calsIndent:          function (level, skipUnit, skipEdge) {\n                var unit = 0,\n                    edge = skipEdge ? 0 : $scope.indent_plus;\n                if (!skipUnit) {\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\n                }\n\n                if (level - 1 < 1) {\n                    return edge + unit;\n                } else {\n                    return $scope.indent * (level - 1) + edge + unit;\n                }\n            },\n            droppable:           function () {\n                return $scope.dropEnabled === true;\n            },\n            draggable:           function () {\n                return $scope.dragEnabled === true;\n            },\n            beforeDrop:          function (event) {\n                return true;\n            },\n            changeKey:           function (node) {\n                var _key     = node.__uid__;\n                node.__uid__ = Math.random();\n                if (node.__selected__) {\n                    delete node.__selected__;\n                }\n\n                if ($scope.primary_key !== '__uid__') {\n                    _key = '' + node[$scope.primary_key];\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\n\n                    node[$scope.primary_key] = _key;\n                }\n                // delete(node.__hashKey__);\n            },\n            clone:               function (node, _this) {\n                _clone = angular.copy(node);\n                this.for_all_descendants(_clone, this.changeKey);\n                return _clone;\n            },\n            remove:              function (node, parent, _this) {\n                return parent.splice(node.__index__, 1)[0];\n            },\n            add:                 function (node, pos, parent, _this) {\n                if (parent) {\n                    if (parent.length > -1) {\n                        if (pos > -1) {\n                            parent.splice(pos, 0, node);\n                        } else {\n                            // todo If children need load crazy\n                            parent.push(node);\n                        }\n                    } else {\n                        parent.push(node);\n                    }\n                }\n            }\n        };\n\n        if ($attrs.enableDrag || $attrs.enableDrop) {\n            $scope.placeElm = null;\n            //                            $scope.dragBorder = 30;\n            $scope.dragEnabled = null;\n            $scope.dropEnabled = null;\n            $scope.horizontal  = null;\n\n            if ($attrs.enableDrag) {\n\n                $scope.dragDelay       = 0;\n                $scope.enabledMove     = true;\n                $scope.statusMove      = true;\n                $scope.enabledHotkey   = false;\n                $scope.enabledCollapse = null;\n                $scope.statusElm       = null;\n                $scope.dragging        = null;\n\n                angular.extend(\n                    $scope.$callbacks, {\n                        beforeDrag: function (scopeDrag) {\n                            return true;\n                        },\n                        dragStop:   function (event, skiped) {\n                        },\n                        dropped:    function (info, pass, isMove) {\n                            if (!info) {\n                                return null;\n                            }\n\n                            if (!info.changed && isMove) {\n                                return false;\n                            }\n                            var _node         = info.node,\n                                _nodeAdd      = null,\n                                _move         = info.move,\n                                _parent       = null,\n                                _parentRemove = info.parent || info.drag.treeData,\n                                _parentAdd    = _move.parent || info.target.treeData;\n\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\n                                if (isMove) {\n                                    _parent = _parentRemove;\n                                    if (angular.isDefined(_parent.__children__)) {\n                                        _parent = _parent.__children__;\n                                    }\n\n                                    _nodeAdd = info.drag.$callbacks.remove(\n                                        _node,\n                                        _parent,\n                                        info.drag.$callbacks\n                                    );\n                                } else {\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\n                                }\n\n                                // if node dragging change index in sample node parent\n                                // and index node decrement\n                                if (isMove &&\n                                    info.drag === info.target &&\n                                    _parentRemove === _parentAdd &&\n                                    _move.pos >= info.node.__index__) {\n                                    _move.pos--;\n                                }\n\n                                _parent = _parentAdd;\n                                if (_parent.__children__) {\n                                    _parent = _parent.__children__;\n                                }\n\n                                info.target.$callbacks.add(\n                                    _nodeAdd,\n                                    _move.pos,\n                                    _parent,\n                                    info.drag.$callbacks\n                                );\n\n                                return true;\n                            }\n\n                            return false;\n                        },\n                        dragStart:  function (event) {\n                        },\n                        dragMove:   function (event) {\n                        }\n                    }\n                );\n\n                $scope.setDragging = function (dragInfo) {\n                    $scope.dragging = dragInfo;\n                };\n\n                $scope.enableMove = function (val) {\n                    if (typeof val === 'boolean') {\n                        $scope.enabledMove = val;\n                    } else {\n                        $scope.enabledMove = true;\n                    }\n                };\n\n                if ($attrs.enableStatus) {\n                    $scope.enabledStatus = false;\n\n                    $scope.hideStatus = function () {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.addClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.refreshStatus = function () {\n                        if (!$scope.dragging) {\n                            return;\n                        }\n\n                        if ($scope.enabledStatus) {\n                            var statusElmOld = $scope.statusElm;\n                            if ($scope.enabledMove) {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\n                            } else {\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\n                            }\n\n                            if (statusElmOld !== $scope.statusElm) {\n                                if (statusElmOld) {\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\n                                    statusElmOld.remove();\n                                }\n                                $document.find('body').append($scope.statusElm);\n\n                            }\n\n                            $scope.statusElm.removeClass($scope.$class.hidden);\n                        }\n                    };\n\n                    $scope.setPositionStatus = function (e) {\n                        if ($scope.statusElm) {\n                            $scope.statusElm.css(\n                                {\n                                    'left':    e.pageX + 10 + 'px',\n                                    'top':     e.pageY + 15 + 'px',\n                                    'z-index': 9999\n                                }\n                            );\n                            $scope.statusElm.addClass($scope.$class.status);\n                        }\n                    };\n                }\n            }\n\n            $scope.targeting = false;\n\n            $scope.getPrevSibling = function (node) {\n                if (node && node.__index__ > 0) {\n                    var _parent, _index = node.__index__ - 1;\n\n                    if (angular.isDefined(node.__parent_real__)) {\n                        _parent = $scope.tree_nodes[node.__parent_real__];\n                        return _parent.__children__[_index];\n                    }\n                    return $scope.treeData[_index];\n\n                }\n                return null;\n            };\n\n            $scope.getNode = function (index) {\n                if (angular.isUndefinedOrNull(index)) {\n                    return null;\n                }\n                return $scope.tree_nodes[index];\n            };\n\n            $scope.setScope = function (scope, node) {\n                var _hash = $scope.getHash(node);\n                if ($scope.$globals[_hash] !== scope) {\n                    $scope.$globals[_hash] = scope;\n                }\n            };\n\n            $scope.getScope = function (node) {\n                if (node) {\n                    return $scope.$globals[$scope.getHash(node)];\n                }\n                return $scope;\n\n            };\n\n            $scope.initPlace = function (element, dragElm) {\n\n                if (!$scope.placeElm) {\n\n                    if ($scope.isTable === true) {\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\n                        var _len_down   = $scope.colDefinitions.length;\n                        $scope.placeElm.append(\n                            angular.element($window.document.createElement('td'))\n                                .addClass($scope.$class.empty)\n                                .addClass('indented')\n                                .addClass($scope.$class.place)\n                        );\n                        while (_len_down-- > 0) {\n                            $scope.placeElm.append(\n                                angular.element($window.document.createElement('td'))\n                                    .addClass($scope.$class.empty)\n                                    .addClass($scope.$class.place)\n                            );\n                        }\n                    } else {\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\n                            .addClass($scope.$class.empty)\n                            .addClass($scope.$class.place);\n                    }\n\n                }\n\n                if (dragElm) {\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\n                }\n\n                if (element) {\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\n                } else {\n                    $scope.getElementChilds().append($scope.placeElm);\n                }\n\n                return $scope.placeElm;\n            };\n\n            $scope.hidePlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.addClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.showPlace = function () {\n                if ($scope.placeElm) {\n                    $scope.placeElm.removeClass($scope.$class.hidden);\n                }\n            };\n\n            $scope.getScopeTree = function () {\n                return $scope;\n            };\n\n        }\n\n        $scope.$safeApply = $safeApply;\n\n        var _fnInitFilter,\n            _fnInitOrderBy,\n            _fnGetControl,\n            _defaultFilterOption = {\n                showParent: true,\n                showChild:  false,\n                beginAnd:   true\n            },\n            tree,\n            _watches             = [\n                [\n                    'enableDrag', [\n                    ['boolean', 'enableStatus', null, 'enabledStatus'],\n                    ['boolean', 'enableMove', null, 'enabledMove'],\n                    ['number', 'dragDelay', 0, null, 0],\n                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\n                    [\n                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\n                        if (isHotkey) {\n                            $scope.enabledMove = false;\n                        } else {\n                            $scope.enabledMove = $scope.statusMove;\n                        }\n                    }]\n                ]],\n                [\n                    ['enableDrag', 'enableStatus'], [\n                    [\n                        'string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null,\n                        function (_url) {\n                            if (_url && $templateCache.get(_url)) {\n                                $TreeDnDTemplate.setCopy(_url, $scope);\n                            }\n                        }],\n                    [\n                        'string', 'templateMove', $attrs.templateMove, 'templateMove', null,\n                        function (_url) {\n                            if (_url && $templateCache.get(_url)) {\n                                $TreeDnDTemplate.setMove(_url, $scope);\n                            }\n                        }]\n                ]],\n                [\n                    [['enableDrag', 'enableDrop']], [\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\n                ],\n                [\n                    '*', [\n                    ['boolean', 'treeTable', true, 'treeTable', null],\n                    ['boolean', 'horizontal'],\n                    [\n                        'callback', 'treeClass', function (val) {\n                        switch (typeof val) {\n                            case 'string':\n                                $scope.$tree_class = val;\n                                break;\n                            case 'object':\n                                angular.extend($scope.$class, val);\n                                $scope.$tree_class = $scope.$class.tree;\n                                break;\n                            default:\n                                $scope.$tree_class = $attrs.treeClass;\n                                break;\n                        }\n                    }, 'treeClass', function () {\n                        $scope.$tree_class = $scope.$class.tree + ' table';\n                    }, null, function () {\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\n                            $scope.$tree_class = $attrs.treeClass.trim();\n                            return true;\n                        }\n                    }],\n                    [\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\n                        function (expandOn) {\n                            if (angular.isUndefinedOrNull(expandOn)) {\n                                $scope.expandingProperty = $attrs.expandOn;\n                            }\n                        }],\n                    [\n                        'object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\n                        'tree', null, function ($tree) {\n\n                        $scope.reload_data = reload_data;\n\n                        if (!angular.isFunction(_fnGetControl)) {\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\n                        }\n\n                        if (angular.isFunction(_fnGetControl)) {\n                            tree = angular.extend(\n                                $tree,\n                                _fnGetControl($scope)\n                            );\n                        }\n                    }],\n                    [\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\n                        function (colDefs) {\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\n                                $scope.colDefinitions = getColDefs();\n                            }\n                        }],\n                    [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\n                    [\n                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\n                        var _passed = false;\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\n                            var _keysF = Object.keys(filters),\n                                _lenF  = _keysF.length, _iF;\n\n                            if (_lenF > 0) {\n                                for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\n                                        filters[_keysF[_iF]].length === 0) {\n                                        continue;\n                                    }\n                                    _passed = true;\n                                    break;\n                                }\n                            }\n                        }\n\n                        $scope.enabledFilter = _passed;\n                        reload_data();\n                    }],\n                    [\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\n                        _defaultFilterOption, function (option) {\n                        if (typeof option === 'object') {\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\n                        }\n                    }],\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\n                    ['number', 'indent', 30, null, 30],\n                    ['number', 'indentPlus', 20, null, 20],\n                    [\n                        'null', 'callbacks',\n                        function (optCallbacks) {\n                            angular.forEach(\n                                optCallbacks, function (value, key) {\n                                    if (typeof value === 'function') {\n                                        if ($scope.$callbacks[key]) {\n                                            $scope.$callbacks[key] = value;\n                                        }\n                                    }\n                                }\n                            );\n                            return $scope.$callbacks;\n                        },\n                        '$callbacks'\n                    ],\n                    [\n                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\n                        reload_data();\n                    }],\n                    ['boolean', 'enableDrag', null, 'dragEnabled'],\n                    ['boolean', 'enableDrop', null, 'dropEnabled']\n                ]]\n            ],\n            w, lenW              = _watches.length,\n            i, len,\n            _curW,\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\n\n        for (w = 0; w < lenW; w++) {\n            // skip if not exist\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\n                continue;\n            }\n            _curW = _watches[w][1];\n            for (i = 0, len = _curW.length; i < len; i++) {\n                _typeW    = _curW[i][0];\n                _nameW    = _curW[i][1];\n                _defaultW = _curW[i][2];\n                _scopeW   = _curW[i][3];\n                _NotW     = _curW[i][4];\n                _AfterW   = _curW[i][5];\n                _BeforeW  = _curW[i][6];\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\n            }\n        }\n\n        if ($attrs.treeData) {\n            $scope.$watch(\n                $attrs.treeData, function (val) {\n                    $scope.treeData = val;\n                    reload_data();\n                }, true\n            );\n        }\n\n        function check_exist_attr(attrs, existAttr, isAnd) {\n            if (angular.isUndefinedOrNull(existAttr)) {\n                return false;\n            }\n\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\n                return true;\n            }\n\n            if (angular.isArray(existAttr)) {\n                return for_each_attrs(attrs, existAttr, isAnd);\n            }\n        }\n\n        function for_each_attrs(attrs, exist, isAnd) {\n            var i, len = exist.length, passed = false;\n\n            if (len === 0) {\n                return null;\n            }\n            for (i = 0; i < len; i++) {\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\n                    passed = true;\n                    if (!isAnd) {\n                        return true;\n                    }\n                } else {\n                    if (isAnd) {\n                        return false;\n                    }\n                }\n            }\n\n            return passed;\n        }\n\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\n                               fnBefore\n        ) {\n            nameScope = nameScope || nameAttr;\n            if (typeof type === 'string' || angular.isArray(type)) {\n                if (angular.isFunction(fnBefore) && fnBefore()) {\n                    return;//jmp\n                }\n                if (typeof $attrs[nameAttr] === 'string') {\n                    $scope.$watch(\n                        $attrs[nameAttr], function (val) {\n                            if (typeof type === 'string' && typeof val === type ||\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\n                            ) {\n                                $scope[nameScope] = val;\n                            } else {\n                                if (angular.isFunction(valDefault)) {\n                                    $scope[nameScope] = valDefault(val);\n                                } else {\n                                    $scope[nameScope] = valDefault;\n                                }\n                            }\n\n                            if (angular.isFunction(fnAfter)) {\n                                fnAfter($scope[nameScope], $scope);\n                            }\n                        }, true\n                    );\n                } else {\n\n                    if (angular.isFunction(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist();\n                    } else if (!angular.isUndefined(fnNotExist)) {\n                        $scope[nameScope] = fnNotExist;\n                    }\n                }\n            }\n        }\n\n        function $safeApply(fn) {\n            var phase = this.$root.$$phase;\n            if (phase === '$apply' || phase === '$digest') {\n                if (fn && typeof fn === 'function') {\n                    fn();\n                }\n            } else {\n                this.$apply(fn);\n            }\n        }\n\n        function getExpandOn() {\n            if ($scope.treeData && $scope.treeData.length) {\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\n                    _regex     = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\n                    _len,\n                    i;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        $scope.expandingProperty = _keys[i];\n                        return;\n                    }\n                }\n\n                // Auto get first\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\n                    $scope.expandingProperty = _keys[0];\n                }\n\n            }\n        }\n\n        function getColDefs() {\n            // Auto get Defs except attribute __level__ ....\n            if ($scope.treeData.length) {\n                var _col_defs = [], _firstNode = $scope.treeData[0],\n                    _regex    = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\n                    _keys     = Object.keys(_firstNode),\n                    i, _len;\n                // Auto get first field with type is string;\n                for (i = 0, _len = _keys.length; i < _len; i++) {\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\n                        _col_defs.push(\n                            {\n                                field: _keys[i]\n                            }\n                        );\n                    }\n                }\n                $scope.colDefinitions = _col_defs;\n            }\n        }\n\n        function do_f(root, node, parent, parent_real, level, visible, index) {\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\n            if (!angular.isArray(node.__children__)) {\n                node.__children__ = [];\n            }\n\n            node.__parent_real__ = parent_real;\n            node.__parent__      = parent;\n            _len                 = node.__children__.length;\n\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\n                node.__expanded__ = level < $scope.expandLevel;\n            }\n\n            if (_len === 0) {\n                _icon = -1;\n            } else {\n                if (node.__expanded__) {\n                    _icon = 1;\n                } else {\n                    _icon = 0;\n                }\n            }\n            // Insert item vertically\n            _index_real         = root.length;\n            node.__index__      = index;\n            node.__index_real__ = _index_real;\n            node.__level__      = level;\n            node.__icon__       = _icon;\n            node.__icon_class__ = $scope.$class.icon[_icon];\n            node.__visible__    = !!visible;\n\n            if (angular.isUndefinedOrNull(node.__uid__)) {\n                node.__uid__ = '' + Math.random();\n            }\n\n            root.push(node);\n\n            // Check node children\n            _dept = 1;\n            if (_len > 0) {\n                for (_i = 0; _i < _len; _i++) {\n                    _dept += do_f(\n                        root,\n                        node.__children__[_i],\n                        $scope.primary_key === '__uid__' ? node.__uid__ : node[$scope.primary_key],\n                        _index_real,\n                        level + 1,\n                        visible && node.__expanded__,\n                        _i\n                    );\n                }\n            }\n\n            _hashKey = $scope.getHash(node);\n\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\n                node.__hashKey__ = _hashKey;\n                // delete($scope.$globals[_hashKey]);\n            }\n\n            node.__dept__ = _dept;\n\n            return _dept;\n        }\n\n        function reload_data(oData) {\n\n            var _data,\n                _len,\n                _tree_nodes = [];\n            if (angular.isDefined(oData)) {\n                if (!angular.isArray(oData) || oData.length === 0) {\n                    return [];\n                } else {\n                    _data = oData;\n                }\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\n                return [];\n            } else {\n                _data = $scope.treeData;\n            }\n\n            if (!$attrs.expandOn) {\n                getExpandOn();\n            }\n\n            if (!$attrs.columnDefs) {\n                getColDefs();\n            }\n\n            if (angular.isDefined($scope.orderBy)) {\n                if (!angular.isFunction(_fnInitOrderBy)) {\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\n                }\n\n                if (angular.isFunction(_fnInitOrderBy)) {\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\n                }\n            }\n\n            if (angular.isDefined($scope.filter)) {\n                if (!angular.isFunction(_fnInitFilter)) {\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\n                }\n\n                if (angular.isFunction(_fnInitFilter)) {\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\n                }\n            }\n\n            _len = _data.length;\n            if (_len > 0) {\n                var _i,\n                    _offset, _max, _min, _keys,\n                    _deptTotal = 0;\n\n                for (_i = 0; _i < _len; _i++) {\n                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\n                }\n\n                // clear Element Empty\n                _keys   = Object.keys($scope.$globals);\n                _len    = $scope.$globals.length;\n                _offset = _len - _deptTotal;\n\n                if (_offset !== 0) {\n                    _max = _len - _offset;\n                    _min = _max - Math.abs(_offset);\n                    for (_i = _min; _i < _max; _i++) {\n                        delete $scope.$globals[_keys[_i]];\n                    }\n                }\n            }\n\n            // clear memory\n            if (angular.isDefined($scope.tree_nodes)) {\n                delete $scope.tree_nodes;\n            }\n\n            $scope.tree_nodes = _tree_nodes;\n\n            return _tree_nodes;\n        }\n    }\n\n    function fnCompile(tElement) {\n\n        var $_Template = '',\n            _element   = tElement.html().trim();\n\n        if (_element.length > 0) {\n            $_Template = _element;\n            tElement.html('');\n        }\n\n        return function fnPost(scope, element, attrs) {\n\n            if (attrs.enableDrag) {\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\n                if (angular.isFunction(_fnInitDrag)) {\n                    _fnInitDrag(scope, element, $window, $document);\n                }\n            }\n\n            // kick out $digest\n            element.ready(function () {\n                // apply Template\n                function checkTreeTable(template, scope) {\n                    var elemNode  = template[0].querySelector('[tree-dnd-node]'),\n                        attrInclude;\n                    scope.isTable = null;\n                    if (elemNode) {\n                        elemNode    = angular.element(elemNode);\n                        attrInclude = elemNode && elemNode.prop('tree-include');\n                    } else {\n                        return;\n                    }\n\n                    if (attrInclude) {\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\n                        if (typeof treeInclude === 'string') {\n                            $http.get(\n                                treeInclude,\n                                {cache: $templateCache}\n                            ).success(\n                                function (data) {\n                                    data               = data.trim();\n                                    scope.templateNode = data;\n                                    data               = angular.element(data);\n                                    scope.isTable      = !data[0].querySelector('[tree-dnd-nodes]');\n                                }\n                            );\n                        }\n                    } else {\n                        scope.isTable      = !elemNode[0].querySelector('[tree-dnd-nodes]');\n                        scope.templateNode = elemNode.html().trim();\n                    }\n                    elemNode.html('');\n                }\n\n                //scope.$watch(tableDataLoaded, transformTable);\n\n                function tableDataLoaded(elem) {\n                    // first cell in the tbody exists when data is loaded but doesn't have a width\n                    // until after the table is transformed\n                    var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\n                    return firstCell && !firstCell.style.width;\n                }\n\n                function transformTable(elem, attrs) {\n                    // reset display styles so column widths are correct when measured below\n                    angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\n\n                    // wrap in $timeout to give table a chance to finish rendering\n                    $timeout(function () {\n                        // set widths of columns\n                        angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\n\n                            var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\n                            var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\n\n                            var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\n                            if (tdElems) {\n                                tdElems.style.width = columnWidth + 'px';\n                            }\n                            if (thElem) {\n                                thElem.style.width = columnWidth + 'px';\n                            }\n                            if (tfElems) {\n                                tfElems.style.width = columnWidth + 'px';\n                            }\n                        });\n\n                        // set css styles on thead and tbody\n                        angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\n\n                        angular.element(elem.querySelectorAll('tbody')).css({\n                            'display':  'block',\n                            'height':   attrs.tableHeight || 'inherit',\n                            'overflow': 'auto'\n                        });\n\n                        // reduce width of last column by width of scrollbar\n                        var tbody          = elem.querySelector('tbody');\n                        var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\n                        if (scrollBarWidth > 0) {\n                            // for some reason trimming the width by 2px lines everything up better\n                            scrollBarWidth -= 2;\n                            var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\n                            lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\n                        }\n                    });\n                }\n\n                if ($_Template.length > 0) {\n                    checkTreeTable($_Template, scope, true);\n                    element.append($compile($_Template)(scope));\n                } else {\n                    $http.get(\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\n                        {cache: $templateCache}\n                    ).success(\n                        function (data) {\n                            data = angular.element(data.trim());\n                            checkTreeTable(data, scope);\n                            element.append($compile(data)(scope));\n                        }\n                    );\n                }\n            })\n        };\n    }\n}\n\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDConvert', function () {\n        var _$initConvert = {\n            line2tree: function (data, primaryKey, parentKey) {\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\n                    return [];\n                }\n                var tree = [],\n                    rootIds = [],\n                    item = data[0],\n                    _primary = item[primaryKey],\n                    treeObjs = {},\n                    parentId, parent,\n                    len = data.length,\n                    i = 0;\n                while (i < len) {\n                    item = data[i++];\n                    _primary = item[primaryKey];\n                    treeObjs[_primary] = item;\n                    parentId = item[parentKey];\n                    if (parentId) {\n                        parent = treeObjs[parentId];\n                        if (parent.__children__) {\n                            parent.__children__.push(item);\n                        } else {\n                            parent.__children__ = [item];\n                        }\n                    } else {\n                        rootIds.push(_primary);\n                    }\n                }\n                len = rootIds.length;\n                for (i = 0; i < len; i++) {\n                    tree.push(treeObjs[rootIds[i]]);\n                }\n                return tree;\n            },\n            tree2tree: function access_child(data, containKey) {\n                var _tree = [],\n                    _i,\n                    _len = data ? data.length : 0,\n                    _copy, _child;\n                for (_i = 0; _i < _len; _i++) {\n                    _copy = angular.copy(data[_i]);\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\n                        _child = access_child(_copy[containKey], containKey);\n                            delete _copy[containKey];\n                        _copy.__children__ = _child;\n                    }\n                    _tree.push(_copy);\n                }\n                return _tree;\n            }\n        };\n\n        return _$initConvert;\n    }\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDHelper', [\n        '$document', '$window', function ($document, $window) {\n            var _$helper = {\n                nodrag:          function (targetElm) {\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\n                },\n                eventObj:        function (e) {\n                    var obj = e;\n                    if (e.targetTouches !== undefined) {\n                        obj = e.targetTouches.item(0);\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n                        obj = e.originalEvent.targetTouches.item(0);\n                    }\n                    return obj;\n                },\n                dragInfo:        function (scope) {\n                    var _node = scope.getData(),\n                        _tree = scope.getScopeTree(),\n                        _parent = scope.getNode(_node.__parent_real__);\n                    return {\n                        node:    _node,\n                        parent:  _parent,\n                        move:    {\n                            parent: _parent,\n                            pos:    _node.__index__\n                        },\n                        scope:   scope,\n                        target:  _tree,\n                        drag:    _tree,\n                        drop:    scope.getPrevSibling(_node),\n                        changed: false\n                    };\n                },\n                height:          function (element) {\n                    return element.prop('scrollHeight');\n                },\n                width:           function (element) {\n                    return element.prop('scrollWidth');\n                },\n                offset:          function (element) {\n                    var boundingClientRect = element[0].getBoundingClientRect();\n                    return {\n                        width:  element.prop('offsetWidth'),\n                        height: element.prop('offsetHeight'),\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n                    };\n                },\n                positionStarted: function (e, target) {\n                    var pos = {};\n                    pos.offsetX = e.pageX - this.offset(target).left;\n                    pos.offsetY = e.pageY - this.offset(target).top;\n                    pos.startX = pos.lastX = e.pageX;\n                    pos.startY = pos.lastY = e.pageY;\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\n                    return pos;\n                },\n                positionMoved:   function (e, pos, firstMoving) {\n                    // mouse position last events\n                    pos.lastX = pos.nowX;\n                    pos.lastY = pos.nowY;\n                    // mouse position this events\n                    pos.nowX = e.pageX;\n                    pos.nowY = e.pageY;\n                    // distance mouse moved between events\n                    pos.distX = pos.nowX - pos.lastX;\n                    pos.distY = pos.nowY - pos.lastY;\n                    // direction mouse was moving\n                    pos.lastDirX = pos.dirX;\n                    pos.lastDirY = pos.dirY;\n                    // direction mouse is now moving (on both axis)\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n                    // axis mouse is now moving on\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n                    // do nothing on first move\n                    if (firstMoving) {\n                        pos.dirAx = newAx;\n                        pos.moving = true;\n                        return;\n                    }\n                    // calc distance moved on this axis (and direction)\n                    if (pos.dirAx !== newAx) {\n                        pos.distAxX = 0;\n                        pos.distAxY = 0;\n                    } else {\n                        pos.distAxX += Math.abs(pos.distX);\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                            pos.distAxX = 0;\n                        }\n                        pos.distAxY += Math.abs(pos.distY);\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                            pos.distAxY = 0;\n                        }\n                    }\n                    pos.dirAx = newAx;\n                },\n                replaceIndent:   function (scope, element, indent, attr) {\n                    attr =  attr || 'left';\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\n                }\n            };\n            return _$helper;\n        }]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDPlugin',['$injector', function ($injector) {\n        var _fnget = function (name) {\n                if (angular.isDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n                return null;\n            };\n        return _fnget;\n    }]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDTemplate', [\n        '$templateCache', function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\n                scopes = {},\n                temp,\n                _$init = {\n                    setMove: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].movePath = path;\n                    },\n                    setCopy: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].copyPath = path;\n                    },\n                    getPath: function () {\n                        return templatePath;\n                    },\n                    getCopy: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(copyPath);\n                    },\n                    getMove: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(movePath);\n                    }\n                };\n\n            return _$init;\n        }]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\n\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\n\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\n\n    var viewport      = null,\n        isUpdating    = false,\n        isRender      = false,\n        updateAgain   = false,\n        viewportRect,\n        items         = [],\n        index = 0,\n        updateTimeout,\n        $initViewport = {\n            setViewport:   setViewport,\n            getViewport:   getViewport,\n            add:           add,\n            getItems:      getItems,\n            updateDelayed: updateDelayed\n        },\n        eWindow       = angular.element($window);\n\n    eWindow.on('load resize scroll', updateDelayed);\n\n    return $initViewport;\n\n    function update() {\n\n        viewportRect = {\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\n        };\n\n        index = 0;\n\n        if (isUpdating || isRender) {\n            updateAgain = true;\n            return;\n        }\n        isUpdating = true;\n\n        recursivePromise();\n    }\n\n    function recursivePromise() {\n        if (isRender) {\n            return;\n        }\n        var number = items.length, item,\n            elementRect,\n            inViewport;\n\n        if (number > 0 && index < number) {\n            item = items[0];\n\n            elementRect = item.element[0].getBoundingClientRect();\n\n            inViewport = pointIsInsideBounds(elementRect.left, elementRect.top, viewportRect) ||\n                         pointIsInsideBounds(elementRect.left + elementRect.width, elementRect.top, viewportRect) ||\n                         pointIsInsideBounds(elementRect.left, elementRect.top + elementRect.height, viewportRect) ||\n                         pointIsInsideBounds(elementRect.left + elementRect.width, elementRect.top + elementRect.height,\n                                             viewportRect);\n            isRender   = true;\n            $timeout(function () {\n                if (inViewport && typeof item.fnCallback === 'function') {\n                    item.fnCallback($compile, item.element);\n                    items.splice(index, 1);\n                }else{\n                    index++;\n                }\n\n                isRender = false;\n                recursivePromise(index);\n            }, 100);\n\n        } else {\n            isUpdating = false;\n            isRender   = false;\n            console.log('End Update');\n            index = 0;\n            if (updateAgain) {\n                updateAgain = false;\n                //update();\n            }\n        }\n\n    }\n\n    /**\n     * Check if a point is inside specified bounds\n     * @param x\n     * @param y\n     * @param bounds\n     * @returns {boolean}\n     */\n    function pointIsInsideBounds(x, y, bounds) {\n        return x >= bounds.left &&\n               y >= bounds.top &&\n               x <= bounds.left + bounds.width &&\n               y <= bounds.top + bounds.height;\n    }\n\n    /**\n     * @name setViewport\n     * @desciption Set the viewport element\n     * @param element\n     */\n    function setViewport(element) {\n        viewport = element;\n    }\n\n    /**\n     * Return the current viewport\n     * @returns {*}\n     */\n    function getViewport() {\n        return viewport;\n    }\n\n    /**\n     * trigger an update\n     */\n    function updateDelayed() {\n        console.log('here updateDelayed');\n        window.clearTimeout(updateTimeout);\n        updateTimeout = $timeout(function () {\n            update();\n        }, 100);\n    }\n\n    /**\n     * Add listener for event\n     * @param element\n     * @param callback\n     */\n    function add(element, callback) {\n        console.log('call add');\n        items.push({\n            element:    element,\n            fnCallback: callback\n        });\n    }\n\n    /**\n     * Get list of items\n     * @returns {Array}\n     */\n    function getItems() {\n        return items;\n    }\n}\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDFilter', [\n        '$filter', function ($filter) {\n            var _iF, _lenF, _keysF,\n                _filter,\n                _state;\n\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\n                    if (!angular.isFunction(fnBefore)) {\n                        return null;\n                    }\n\n                    var _i, _len, _nodes,\n                        _nodePassed = fnBefore(options, node),\n                        _childPassed = false;\n\n                    if (angular.isDefined(node[fieldChild])) {\n                        _nodes = node[fieldChild];\n                        _len = _nodes.length;\n                        for (_i = 0; _i < _len; _i++) {\n                            _childPassed = for_all_descendants(\n                                options,\n                                _nodes[_i],\n                                fieldChild,\n                                fnBefore,\n                                fnAfter,\n                                _nodePassed || parentPassed\n                            ) || _childPassed;\n                        }\n                    }\n\n                    if (angular.isFunction(fnAfter)) {\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\n                    }\n\n                    return _nodePassed || _childPassed;\n            }\n                // Check data by filter\n            function _fnCheck(callback, check) {\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\n                        return null;\n                    }\n\n                    if (angular.isFunction(callback)) {\n                        return callback(check, $filter);\n                    } else {\n                        if (typeof callback === 'boolean') {\n                            check = !!check;\n                            return check === callback;\n                        } else if (angular.isDefined(callback)) {\n                            try {\n                                var _regex = new RegExp(callback);\n                                return _regex.test(check);\n                            }\n                            catch (err) {\n                                if (typeof check === 'string') {\n                                    return check.indexOf(callback) > -1;\n                                } else {\n                                    return null;\n                                }\n                            }\n                        } else {\n                            return null;\n                        }\n                    }\n            }\n                /**\n                 * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\n                 * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\n                 *\n                 * @param node\n                 * @param condition\n                 * @param isAnd\n                 * @returns {null|boolean}\n                 * @private\n                 */\n                function _fnProccess(node, condition, isAnd) {\n                    if (angular.isArray(condition)) {\n                        return for_each_filter(node, condition, isAnd);\n                    } else {\n                        var _key = condition.field,\n                            _callback = condition.callback,\n                            _iO, _keysO, _lenO;\n\n                        if (_key === '_$') {\n                            _keysO = Object.keys(node);\n                            _lenO = _keysO.length;\n                            for (_iO = 0; _iO < _lenO; _iO++) {\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\n                                    return true;\n                                }\n                            }\n                        } else if (angular.isDefined(node[_key])) {\n                            return _fnCheck(_callback, node[_key]);\n                        }\n                    }\n                    return null;\n                }\n                /**\n                 *\n                 * @param {object} node\n                 * @param {array} conditions Array `conditions`\n                 * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\n                 * @returns {null|boolean}\n                 */\n                function for_each_filter(node, conditions, isAnd) {\n                    var i, len = conditions.length || 0, passed = false;\n                    if (len === 0) {\n                        return null;\n                    }\n\n                    for (i = 0; i < len; i++) {\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\n                            passed = true;\n                            // if condition `or` then return;\n                            if (!isAnd) {\n                                return true;\n                            }\n                        } else {\n\n                            // if condition `and` and result in fnProccess = false then return;\n                            if (isAnd) {\n                                return false;\n                            }\n                        }\n                    }\n\n                    return passed;\n                }\n\n                // Will call _fnAfter to clear data no need\n                /**\n                 *\n                 * @param {object} options\n                 * @param {object} node\n                 * @param {boolean} isNodePassed\n                 * @param {boolean} isChildPassed\n                 * @param {boolean} isParentPassed\n                 * @private\n                 */\n                function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\n                    if (isNodePassed === true) {\n                        node.__filtered__ = true;\n                        node.__filtered_visible__ = true;\n                        return; //jmp\n                    } else if (isChildPassed === true && options.showParent === true\n                               || isParentPassed === true && options.showChild === true) {\n                        node.__filtered__ = false;\n                        node.__filtered_visible__ = true;\n                        return; //jmp\n                    }\n\n                    // remove attr __filtered__\n                    delete node.__filtered__;\n                    delete node.__filtered_visible__;\n                }\n\n                /**\n                 * `fnBefore` will called when `for_all_descendants` of `node` checking.\n                 * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\n                 *\n                 * @param {object} options\n                 * @param {object} node\n                 * @returns {null|boolean}\n                 * @private\n                 */\n                function _fnBefore(options, node) {\n                    if (options.filter.length === 0) {\n                        return true;\n                    } else {\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\n                    }\n                }\n\n                /**\n                 * `_fnConvert` to convert `filter` `object` to `array` invaild.\n                 *\n                 * @param {object|array} filters\n                 * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\n                 * @private\n                 */\n                function _fnConvert(filters) {\n                    // convert filter object to array filter\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\n                        _keysF = Object.keys(filters);\n                        _lenF = _keysF.length;\n                        _filter = [];\n\n                        if (_lenF > 0) {\n                            for (_iF = 0; _iF < _lenF; _iF++) {\n\n                                if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\n                                    continue;\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\n                                    _state = filters[_keysF[_iF]];\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\n                                } else {\n                                    _state = {\n                                        field:    _keysF[_iF],\n                                        callback: filters[_keysF[_iF]]\n                                    };\n                                }\n                                _filter.push(_state);\n                            }\n                        }\n                        _state = null;\n                        return _filter;\n                    }\n                    else {\n                        return filters;\n                    }\n                }\n\n                /**\n                 * `_fnMain` function is constructor of service `$TreeDnDFilter`.\n                 * @constructor\n                 * @param {object|array} treeData\n                 * @param {object|array} filters\n                 * @param {object} options\n                 * @returns {array} Return `treeData` or `treeData` with `filter`\n                 * @private\n                 */\n                function _fnMain(treeData, filters, options) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(filters) || angular.isObject(filters))\n                        || filters.length === 0) {\n                        return treeData;\n                    }\n\n                    var _i, _len,\n                        _filter;\n\n                    _filter = _fnConvert(filters);\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\n                        || _filter.length === 0) {\n                        return treeData;\n                    }\n                    options.filter = _filter;\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        for_all_descendants(\n                            options,\n                            treeData[_i],\n                            '__children__',\n                            _fnBefore, _fnAfter\n                        );\n                    }\n\n                    return treeData;\n                }\n\n            return _fnMain;\n        }]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDOrderBy', [\n        '$filter', function ($filter) {\n            var _fnOrderBy = $filter('orderBy'),\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\n                    var _i, _len, _nodes;\n\n                    if (angular.isDefined(node[name])) {\n                        _nodes = node[name];\n                        _len = _nodes.length;\n                        // OrderBy children\n                        for (_i = 0; _i < _len; _i++) {\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\n                        }\n\n                        node[name] = fnOrderBy(node[name], options);\n                    }\n                    return node;\n                },\n                _fnOrder = function _fnOrder(list, orderBy) {\n                    return _fnOrderBy(list, orderBy);\n                },\n                _fnMain = function _fnMain(treeData, orderBy) {\n                    if (!angular.isArray(treeData)\n                        || treeData.length === 0\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)) {\n                        return treeData;\n                    }\n\n                    var _i, _len;\n\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\n                        treeData[_i] = for_all_descendants(\n                            orderBy,\n                            treeData[_i],\n                            '__children__',\n                            _fnOrder\n                        );\n                    }\n\n                    return _fnOrder(treeData, orderBy);\n                };\n\n            return _fnMain;\n        }]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDDrag', [\n        '$timeout', '$TreeDnDHelper',\n        function ($timeout, $TreeDnDHelper) {\n            function _fnPlaceHolder(e, $params) {\n                    if ($params.placeElm) {\n                        var _offset = $TreeDnDHelper.offset($params.placeElm);\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\n                        ) {\n                            return true;\n                        }\n                    }\n                    return false;\n            }\n\n            function _fnDragStart(e, $params) {\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\n                        // disable right click\n                        return;\n                    }\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\n                        return;\n                    }\n                    // the element which is clicked.\n                    var eventElm = angular.element(e.target),\n                        eventScope = eventElm.scope();\n                    if (!eventScope || !eventScope.$type) {\n                        return;\n                    }\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\n                    //     return;\n                    // }\n\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\n                        return;\n                    }\n\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\n                        dragScope,\n                        _$scope = $params.$scope;\n                    if (eventElmTagName === 'input'\n                        || eventElmTagName === 'textarea'\n                        || eventElmTagName === 'button'\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\n                        return;\n                    }\n                    // check if it or it's parents has a 'data-nodrag' attribute\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\n                            return;\n                        }\n                        eventElm = eventElm.parent();\n                    }\n\n                    e.uiTreeDragging = true; // stop event bubbling\n                    if (e.originalEvent) {\n                        e.originalEvent.uiTreeDragging = true;\n                    }\n                    e.preventDefault();\n\n                    dragScope = eventScope.getScopeNode();\n\n                    $params.firstMoving = true;\n\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\n                        return;\n                    }\n\n                    var eventObj = $TreeDnDHelper.eventObj(e),\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\n                        isTable = tagName === 'tr';\n                $params.dragIno = $TreeDnDHelper.dragInfo(dragScope);\n\n                    _$scope.setDragging($params.dragInfo);\n\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\n\n                    if (isTable) {\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\n                            .addClass(_$scope.$class.tree)\n                            .addClass(_$scope.$class.drag)\n                            .addClass(_$scope.$tree_class);\n                    } else {\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\n                            .addClass(_$scope.$class.drag)\n                            .addClass('tree-dnd-nodes')\n                            .addClass(_$scope.$tree_class);\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\n                            'z-index': 9995\n                        }\n                    );\n\n                    $params.offsetEdge = 0;\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\n                        _scope = dragScope,\n                        _element = _scope.$element,\n                        _clone = null,\n                        _needCollapse = !!_$scope.enabledCollapse,\n                        _copied = false,\n                        _tbody = null;\n\n                    if (isTable) {\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\n\n                        _$scope.for_all_descendants(\n                            $params.dragInfo.node, function (_node) {\n                                _scope = _$scope.getScope(_node);\n                                _element = _scope.$element;\n\n                                if (!_copied) {\n                                    _clone = _element.clone();\n\n                                    $TreeDnDHelper.replaceIndent(\n                                        _$scope,\n                                        _clone,\n                                        _node.__level__ - $params.offsetEdge,\n                                        'padding-left'\n                                    );\n\n                                    _tbody.append(_clone);\n\n                                    // skip all, just clone parent\n                                    if (_needCollapse) {\n                                        _copied = true;\n                                    }\n                                }\n\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\n                                    _element.addClass(_$scope.$class.hidden);\n                                }\n                            }\n                        );\n\n                        $params.dragElm.append(_tbody);\n                    } else {\n\n                        if (!_needCollapse) {\n                            _clone = _element.clone();\n                        } else {\n                            var _holder = _scope.getElementChilds(),\n                                _swaper = angular.element('<swaped />');\n\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\n                            _holder.after(angular.element('<holder />'));\n                            _swaper.append(_holder);\n\n                            // Clone without Children & remove tag `<holder>`\n                            _clone = _element.clone();\n                            _clone.find('holder').remove();\n\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\n                            _element.find('holder').replaceWith(_holder);\n\n                            // Reset & clear all;\n                            _swaper.remove();\n                            _holder = null;\n                        }\n\n                        $params.dragElm.append(_clone);\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\n                            _element.addClass(_$scope.$class.hidden);\n                        }\n                    }\n\n                    $params.dragElm.css(\n                        {\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\n                                $params.offsetEdge + 1,\n                                true,\n                                true\n                            )       + 'px',\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\n                        }\n                    );\n                    // moving item with descendant\n                    $params.$document.find('body').append($params.dragElm);\n                    if (_$scope.$callbacks.droppable()) {\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\n\n                        if (isTable) {\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\n                        }\n\n                        $params.placeElm.css('width', _width);\n                    }\n\n                    _$scope.showPlace();\n                    _$scope.targeting = true;\n\n                    if (_$scope.enabledStatus) {\n                        _$scope.refreshStatus();\n                        _$scope.setPositionStatus(e);\n                    }\n\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\n\n                    $params.document_height = Math.max(\n                        $params.body.scrollHeight,\n                        $params.body.offsetHeight,\n                        $params.html.clientHeight,\n                        $params.html.scrollHeight,\n                        $params.html.offsetHeight\n                    );\n\n                    $params.document_width = Math.max(\n                        $params.body.scrollWidth,\n                        $params.body.offsetWidth,\n                        $params.html.clientWidth,\n                        $params.html.scrollWidth,\n                        $params.html.offsetWidth\n                    );\n            }\n\n            function _fnDragMove(e, $params) {\n                    var _$scope = $params.$scope;\n                    if (!$params.dragStarted) {\n                        if (!$params.dragDelaying) {\n                            $params.dragStarted = true;\n                            _$scope.$safeApply(\n                                function () {\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\n                                }\n                            );\n                        }\n                        return;\n                    }\n\n                    if ($params.dragElm) {\n                        e.preventDefault();\n                        if ($params.$window.getSelection) {\n                            $params.$window.getSelection().removeAllRanges();\n                        } else if ($params.$window.document.selection) {\n                            $params.$window.document.selection.empty();\n                        }\n\n                        var eventObj = $TreeDnDHelper.eventObj(e),\n                            leftElmPos = eventObj.pageX - $params.pos.offsetX,\n                            topElmPos = eventObj.pageY - $params.pos.offsetY;\n\n                        //dragElm can't leave the screen on the left\n                        if (leftElmPos < 0) {\n                            leftElmPos = 0;\n                        }\n\n                        //dragElm can't leave the screen on the top\n                        if (topElmPos < 0) {\n                            topElmPos = 0;\n                        }\n\n                        //dragElm can't leave the screen on the bottom\n                        if (topElmPos + 10 > $params.document_height) {\n                            topElmPos = $params.document_height - 10;\n                        }\n\n                        //dragElm can't leave the screen on the right\n                        if (leftElmPos + 10 > $params.document_width) {\n                            leftElmPos = $params.document_width - 10;\n                        }\n\n                        $params.dragElm.css(\n                            {\n                                'left': leftElmPos + _$scope.$callbacks.calsIndent(\n                                    $params.offsetEdge + 1,\n                                    true,\n                                    true\n                                )       + 'px',\n                                'top':  topElmPos + 'px'\n                            }\n                        );\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.setPositionStatus(e);\n                        }\n\n                        var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\n                            bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\n                        // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\n                        if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\n                            window.scrollBy(0, 10);\n                        }\n                        // to scroll top if cursor y-position is less than the top position the vertical scroll\n                        if (top_scroll > eventObj.pageY) {\n                            window.scrollBy(0, -10);\n                        }\n\n                        $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\n\n                        if ($params.firstMoving) {\n                            $params.firstMoving = false;\n                            return;\n                        }\n                        // check if add it as a child node first\n\n                        var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\n                            targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\n\n                            targetElm,\n                            targetScope,\n                            targetBefore,\n                            targetOffset,\n                            tagName,\n                            isTable,\n                            isChanged = true,\n                            isVeritcal = true,\n                            isEmpty,\n                            isSwapped,\n                            _scope,\n                            _target,\n                            _parent,\n                            _info = $params.dragInfo,\n                            _move = _info.move,\n                            _drag = _info.node,\n                            _drop = _info.drop,\n                            treeScope = _info.target,\n                            fnSwapTree,\n                            isHolder = _fnPlaceHolder(e, $params);\n\n                        if (!isHolder) {\n                            /* when using elementFromPoint() inside an iframe, you have to call\n                             elementFromPoint() twice to make sure IE8 returns the correct value\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\n\n                            targetElm = angular.element(\n                                $params.$window.document.elementFromPoint(\n                                    targetX,\n                                    targetY\n                                )\n                            );\n\n                            targetScope = targetElm.scope();\n                            if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\n                                // Not allowed Drop Item\n                                return;\n                            }\n\n                            fnSwapTree = function () {\n                                treeScope = targetScope.getScopeTree();\n                                _target = _info.target;\n\n                                if (_info.target !== treeScope) {\n                                    // Replace by place-holder new\n                                    _target.hidePlace();\n                                    _target.targeting = false;\n                                    treeScope.targeting = true;\n\n                                    _info.target = treeScope;\n                                    $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\n\n                                    _target = null;\n                                    isSwapped = true;\n                                }\n                                return true;\n                            };\n\n                            if (angular.isFunction(targetScope.getScopeNode)) {\n                                targetScope = targetScope.getScopeNode();\n                                if (!fnSwapTree()) {\n                                    return;\n                                }\n                            } else {\n                                if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\n                                    if (targetScope.tree_nodes) {\n                                        if (targetScope.tree_nodes.length === 0) {\n                                            if (!fnSwapTree()) {\n                                                return;\n                                            }\n                                            // Empty\n                                            isEmpty = true;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                } else {\n                                    return;\n                                }\n                            }\n                        }\n\n                        if ($params.pos.dirAx && !isSwapped || isHolder) {\n                            isVeritcal = false;\n                            targetScope = _info.scope;\n                        }\n\n                        if (!targetScope.$element && !targetScope) {\n                            return;\n                        }\n\n                        tagName = targetScope.$element.prop('tagName').toLowerCase();\n                        isTable = tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td';\n                        if (isEmpty) {\n                            _move.parent = null;\n                            _move.pos = 0;\n\n                            _drop = null;\n                        } else {\n                            // move vertical\n                            if (isVeritcal) {\n                                targetElm = targetScope.$element; // Get the element of tree-dnd-node\n\n                                targetOffset = $TreeDnDHelper.offset(targetElm);\n\n                                if (targetScope.horizontal && !isTable) {\n                                    targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\n                                } else {\n                                    if (isTable) {\n                                        targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\n                                    } else {\n                                        var _height = $TreeDnDHelper.height(targetElm);\n\n                                        if (targetScope.getElementChilds()) {\n                                            _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\n                                        }\n\n                                        if (eventObj.pageY > targetOffset.top + _height) {\n                                            return;\n                                        }\n\n                                        targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\n                                    }\n                                }\n\n                                if (!angular.isFunction(targetScope.getData)) {\n                                    return;\n                                }\n\n                                _target = targetScope.getData();\n                                _parent = targetScope.getNode(_target.__parent_real__);\n\n                                if (targetBefore) {\n                                    var _prev = targetScope.getPrevSibling(_target);\n\n                                    _move.parent = _parent;\n                                    _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\n\n                                    _drop = _prev;\n                                } else {\n                                    if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\n                                        _move.parent = _target;\n                                        _move.pos = 0;\n\n                                        _drop = null;\n                                    } else {\n                                        _move.parent = _parent;\n                                        _move.pos = _target.__index__ + 1;\n\n                                        _drop = _target;\n                                    }\n                                }\n                            } else {\n                                // move horizontal\n                                if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\n                                    $params.pos.distAxX = 0;\n                                    // increase horizontal level if previous sibling exists and is not collapsed\n                                    if ($params.pos.distX > 0) {\n                                        _parent = _drop;\n                                        if (!_parent) {\n                                            if (_move.pos - 1 >= 0) {\n                                                _parent = _move.parent.__children__[_move.pos - 1];\n                                            } else {\n                                                return;\n                                            }\n                                        }\n\n                                        if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\n                                            _parent = treeScope.getPrevSibling(_parent);\n                                        }\n\n                                        if (_parent && _parent.__visible__) {\n                                            var _len = _parent.__children__.length;\n\n                                            _move.parent = _parent;\n                                            _move.pos = _len;\n\n                                            if (_len > 0) {\n                                                _drop = _parent.__children__[_len - 1];\n                                            } else {\n                                                _drop = null;\n                                            }\n                                        } else {\n                                            // Not changed\n                                            return;\n                                        }\n                                    } else if ($params.pos.distX < 0) {\n                                        _target = _move.parent;\n                                        if (_target &&\n                                            (_target.__children__.length === 0 ||\n                                             _target.__children__.length - 1 < _move.pos ||\n                                             _info.drag === _info.target &&\n                                             _target.__index_real__ === _drag.__parent_real__ &&\n                                             _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\n                                        ) {\n                                            _parent = treeScope.getNode(_target.__parent_real__);\n\n                                            _move.parent = _parent;\n                                            _move.pos = _target.__index__ + 1;\n\n                                            _drop = _target;\n                                        } else {\n                                            // Not changed\n                                            return;\n                                        }\n                                    } else {\n                                        return;\n                                    }\n                                } else {\n                                    // limited\n                                    return;\n                                }\n                            }\n                        }\n\n                        if (_info.drag === _info.target &&\n                            _move.parent &&\n                            _drag.__parent_real__ === _move.parent.__index_real__ &&\n                            _drag.__index__ === _move.pos\n                        ) {\n                            isChanged = false;\n                        }\n\n                        if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\n                            _info.move = _move;\n                            _info.drop = _drop;\n                            _info.changed = isChanged;\n                            _info.scope = targetScope;\n\n                            if (isTable) {\n                                $TreeDnDHelper.replaceIndent(\n                                    treeScope,\n                                    $params.placeElm,\n                                    angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\n                                );\n\n                                if (_drop) {\n                                    _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\n\n                                    if (_drop.__index__ < _parent.length - 1) {\n                                        // Find fast\n                                        _drop = _parent[_drop.__index__ + 1];\n                                        _scope = _info.target.getScope(_drop);\n                                        _scope.$element[0].parentNode.insertBefore(\n                                            $params.placeElm[0],\n                                            _scope.$element[0]\n                                        );\n                                    } else {\n                                        _target = _info.target.getLastDescendant(_drop);\n                                        _scope = _info.target.getScope(_target);\n                                        _scope.$element.after($params.placeElm);\n                                    }\n                                } else {\n                                    _scope = _info.target.getScope(_move.parent);\n                                    if (_scope) {\n                                        if (_move.parent) {\n                                            _scope.$element.after($params.placeElm);\n\n                                        } else {\n                                            _scope.getElementChilds().prepend($params.placeElm);\n                                        }\n                                    }\n                                }\n                            } else {\n                                _scope = _info.target.getScope(_drop || _move.parent);\n\n                                if (_drop) {\n                                    _scope.$element.after($params.placeElm);\n                                } else {\n                                    _scope.getElementChilds().prepend($params.placeElm);\n                                }\n                            }\n\n                            treeScope.showPlace();\n\n                            _$scope.$safeApply(\n                                function () {\n                                    _$scope.$callbacks.dragMove(_info);\n                                }\n                            );\n                        }\n\n                    }\n            }\n\n            function _fnDragEnd(e, $params) {\n                    e.preventDefault();\n                    if ($params.dragElm) {\n                        var _passed = false,\n                            _$scope = $params.$scope,\n                            _scope = _$scope.getScope($params.dragInfo.node),\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\n                            _isTable = tagName === 'tr',\n                            _element = _scope.$element;\n\n                        _$scope.$safeApply(\n                            function () {\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\n                            }\n                        );\n\n                        // rollback all\n                        if (_isTable) {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node) {\n                                    _scope = _$scope.getScope(_node);\n                                    _element = _scope.$element;\n\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.removeClass(_$scope.$class.hidden);\n                            }\n                        }\n\n                        $params.dragElm.remove();\n                        $params.dragElm = null;\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.hideStatus();\n                        }\n\n                        var _status = false;\n                        if (_$scope.$$apply) {\n                            _$scope.$safeApply(\n                                function () {\n                                    _status = _$scope.$callbacks.dropped(\n                                        $params.dragInfo,\n                                        _passed,\n                                        _$scope.enabledMove\n                                    );\n                                }\n                            );\n                        } else {\n                            _fnBindDrag($params);\n                        }\n\n                        _$scope.$safeApply(\n                            function () {\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\n                            }\n                        );\n\n                        $params.dragInfo.target.hidePlace();\n                        $params.dragInfo.target.targeting = false;\n\n                        $params.dragInfo = null;\n                        _$scope.$$apply = false;\n                        _$scope.setDragging(null);\n                    }\n\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\n            }\n\n            function _fnDragStartEvent(e, $params) {\n                    if ($params.$scope.$callbacks.draggable()) {\n                        _fnDragStart(e, $params);\n                    }\n            }\n\n            function _fnBindDrag($params) {\n                    $params.element.bind(\n                        'touchstart mousedown', function (e) {\n                            $params.dragDelaying = true;\n                            $params.dragStarted = false;\n                            _fnDragStartEvent(e, $params);\n                            $params.dragTimer = $timeout(\n                                function () {\n                                    $params.dragDelaying = false;\n                                }, $params.$scope.dragDelay\n                            );\n                        }\n                    );\n                    $params.element.bind(\n                        'touchend touchcancel mouseup', function () {\n                            $timeout.cancel($params.dragTimer);\n                        }\n                    );\n            }\n\n            function _fnKeydownHandler(e, $params) {\n                    var _$scope = $params.$scope;\n                    if (e.keyCode === 27) {\n                        if (_$scope.enabledStatus) {\n                            _$scope.hideStatus();\n                        }\n\n                        _$scope.$$apply = false;\n                        _fnDragEnd(e, $params);\n                    } else {\n                        if (_$scope.enabledHotkey && e.shiftKey) {\n                            _$scope.enableMove(true);\n                            if (_$scope.enabledStatus) {\n                                _$scope.refreshStatus();\n                            }\n\n                            if (!$params.dragInfo) {\n                                return;\n                            }\n\n                            var _scope = _$scope.getScope($params.dragInfo.node),\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\n                                _element = _scope.$element;\n\n                            if (tagName === 'tr') {\n                                _$scope.for_all_descendants(\n                                    $params.dragInfo.node, function (_node) {\n                                        _scope = _$scope.getScope(_node);\n                                        _element = _scope.$element;\n\n                                        if (_$scope.$class.hidden) {\n                                            _element.addClass(_$scope.$class.hidden);\n                                        }\n                                    }\n                                );\n                            } else {\n                                if (_$scope.$class.hidden) {\n                                    _element.addClass(_$scope.$class.hidden);\n                                }\n                            }\n                        }\n                    }\n            }\n\n            function _fnKeyupHandler(e, $params) {\n                    var _$scope = $params.$scope;\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\n                        _$scope.enableMove(false);\n\n                        if (_$scope.enabledStatus) {\n                            _$scope.refreshStatus();\n                        }\n\n                        if (!$params.dragInfo) {\n                            return;\n                        }\n\n                        var _scope = _$scope.getScope($params.dragInfo.node),\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\n                            _element = _scope.$element;\n\n                        if (tagName === 'tr') {\n                            _$scope.for_all_descendants(\n                                $params.dragInfo.node, function (_node) {\n\n                                    _scope = _$scope.getScope(_node);\n                                    _element = _scope.$element;\n\n                                    if (_$scope.$class.hidden) {\n                                        _element.removeClass(_$scope.$class.hidden);\n                                    }\n                                }\n                            );\n                        } else {\n                            if (_$scope.$class.hidden) {\n                                _element.removeClass(_$scope.$class.hidden);\n                            }\n                        }\n                    }\n            }\n\n            function _$init(scope, element, $window, $document) {\n                    var $params = {\n                            hasTouch:        'ontouchstart' in window,\n                            firstMoving:     null,\n                            dragInfo:        null,\n                            pos:             null,\n                            placeElm:        null,\n                            dragElm:         null,\n                            dragDelaying:    true,\n                            dragStarted:     false,\n                            dragTimer:       null,\n                            body:            document.body,\n                            html:            document.documentElement,\n                            document_height: null,\n                            document_width:  null,\n                            offsetEdge:      null,\n                            $scope:          scope,\n                            $window:         $window,\n                            $document:       $document,\n                            element:         element,\n                            bindDrag:        function () {\n                                _fnBindDrag($params);\n                            },\n                            dragEnd:         function (e) {\n                                _fnDragEnd(e, $params);\n                            },\n                            dragMoveEvent:   function (e) {\n                                _fnDragMove(e, $params);\n                            },\n                            dragEndEvent:    function (e) {\n                                scope.$$apply = true;\n                                _fnDragEnd(e, $params);\n                            },\n                            dragCancelEvent: function (e) {\n                                _fnDragEnd(e, $params);\n                            }\n                        },\n                        keydownHandler = function (e) {\n                            return _fnKeydownHandler(e, $params);\n                        },\n                        keyupHandler = function (e) {\n                            return _fnKeyupHandler(e, $params);\n                        };\n\n                    scope.dragEnd = function (e) {\n                        $params.dragEnd(e);\n                    };\n\n                    $params.bindDrag();\n\n                angular.element($window.document.body).bind('keydown', keydownHandler);\n                angular.element($window.document.body).bind('keyup', keyupHandler);\n                    //unbind handler that retains scope\n                    scope.$on(\n                        '$destroy', function () {\n                            angular.element($window.document.body).unbind('keydown', keydownHandler);\n                            angular.element($window.document.body).unbind('keyup', keyupHandler);\n                            if (scope.statusElm) {\n                                scope.statusElm.remove();\n                            }\n\n                            if (scope.placeElm) {\n                                scope.placeElm.remove();\n                            }\n                        }\n                    );\n            }\n\n            return _$init;\n        }\n    ]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDControl', function () {\n        var _target, _parent,\n            i, len;\n\n        function fnSetCollapse(node) {\n            node.__expanded__ = false;\n        }\n\n        function fnSetExpand(node) {\n            node.__expanded__ = true;\n        }\n\n        function _$init(scope) {\n            var n, tree = {\n                selected_node:                     null,\n                for_all_descendants:               scope.for_all_descendants,\n                select_node:                       function (node) {\n                    if (!node) {\n                        if (tree.selected_node) {\n                            delete tree.selected_node.__selected__;\n                        }\n                        tree.selected_node = null;\n                        return null;\n                    }\n\n                    if (node !== tree.selected_node) {\n                        if (tree.selected_node) {\n                            delete tree.selected_node.__selected__;\n                        }\n                        node.__selected__  = true;\n                        tree.selected_node = node;\n                        tree.expand_all_parents(node);\n                        if (angular.isFunction(tree.on_select)) {\n                            tree.on_select(node);\n                        }\n                    }\n                    return node;\n                },\n                deselect_node:                     function () {\n                    _target = null;\n                    if (tree.selected_node) {\n                        delete tree.selected_node.__selected__;\n                        _target            = tree.selected_node;\n                        tree.selected_node = null;\n                    }\n                    return _target;\n                },\n                get_parent:                        function (node) {\n                    if (node && node.__parent_real__ !== null) {\n                        return scope.tree_nodes[node.__parent_real__];\n                    }\n                    return null;\n                },\n                for_all_ancestors:                 function (child, fn) {\n                    _parent = tree.get_parent(child);\n                    if (_parent) {\n                        if (fn(_parent)) {\n                            return false;\n                        }\n\n                        return tree.for_all_ancestors(_parent, fn);\n                    }\n                    return true;\n                },\n                expand_all_parents:                function (child) {\n                    return tree.for_all_ancestors(\n                        child, fnSetExpand\n                    );\n                },\n                reload_data:                       function () {\n                    return scope.reload_data();\n                },\n                add_node:                          function (parent, new_node, index) {\n                    if (typeof index !== 'number') {\n                        if (parent) {\n                            parent.__children__.push(new_node);\n                            parent.__expanded__ = true;\n                        } else {\n                            scope.treeData.push(new_node);\n                        }\n                    } else {\n                        if (parent) {\n                            parent.__children__.splice(index, 0, new_node);\n                            parent.__expanded__ = true;\n                        } else {\n                            scope.treeData.splice(index, 0, new_node);\n                        }\n                    }\n                    return new_node;\n                },\n                add_node_root:                     function (new_node) {\n                    tree.add_node(null, new_node);\n                    return new_node;\n                },\n                expand_all:                        function () {\n                    len = scope.treeData.length;\n                    for (i = 0; i < len; i++) {\n                        tree.for_all_descendants(\n                            scope.treeData[i], fnSetExpand\n                        );\n                    }\n                },\n                collapse_all:                      function () {\n                    len = scope.treeData.length;\n                    for (i = 0; i < len; i++) {\n                        tree.for_all_descendants(\n                            scope.treeData[i], fnSetCollapse\n                        );\n                    }\n                },\n                remove_node:                       function (node) {\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        if (node.__parent_real__) {\n                            _parent = tree.get_parent(node).__children__;\n                        } else {\n                            _parent = scope.treeData;\n                        }\n\n                        _parent.splice(node.__index__, 1);\n\n                        if (tree.selected_node === node) {\n                            tree.selected_node = null;\n                        }\n                    }\n                },\n                expand_node:                       function (node) {\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        node.__expanded__ = true;\n                        return node;\n                    }\n                },\n                collapse_node:                     function (node) {\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        node.__expanded__ = false;\n                        return node;\n                    }\n                },\n                get_selected_node:                 function () {\n                    return tree.selected_node;\n                },\n                get_first_node:                    function () {\n                    len = scope.treeData.length;\n                    if (len > 0) {\n                        return scope.treeData[0];\n                    }\n                    return null;\n                },\n                get_children:                      function (node) {\n                    return node.__children__;\n                },\n                get_siblings:                      function (node) {\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        _parent = tree.get_parent(node);\n                        if (_parent) {\n                            _target = _parent.__children__;\n                        } else {\n                            _target = scope.treeData;\n                        }\n                        return _target;\n                    }\n                },\n                get_next_sibling:                  function (node) {\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        _target = tree.get_siblings(node);\n                        n       = _target.length;\n                        if (node.__index__ < n) {\n                            return _target[node.__index__ + 1];\n                        }\n                    }\n                },\n                get_prev_sibling:                  function (node) {\n                    node    = node || tree.selected_node;\n                    _target = tree.get_siblings(node);\n                    if (node.__index__ > 0) {\n                        return _target[node.__index__ - 1];\n                    }\n                },\n                get_first_child:                   function (node) {\n                    node = node || tree.selected_node;\n                    if (typeof node === 'object') {\n                        _target = node.__children__;\n                        if (_target && _target.length > 0) {\n                            return node.__children__[0];\n                        }\n                    }\n                    return null;\n                },\n                get_closest_ancestor_next_sibling: function (node) {\n                    node    = node || tree.selected_node;\n                    _target = tree.get_next_sibling(node);\n                    if (_target) {\n                        return _target;\n                    }\n\n                    _parent = tree.get_parent(node);\n                    return tree.get_closest_ancestor_next_sibling(_parent);\n                },\n                get_next_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        _target = tree.get_first_child(node);\n                        if (_target) {\n                            return _target;\n                        } else {\n                            return tree.get_closest_ancestor_next_sibling(node);\n                        }\n                    }\n                },\n                get_prev_node:                     function (node) {\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        _target = tree.get_prev_sibling(node);\n                        if (_target) {\n                            return tree.get_last_descendant(_target);\n                        }\n\n                        _parent = tree.get_parent(node);\n                        return _parent;\n                    }\n                },\n                get_last_descendant:               scope.getLastDescendant,\n                select_parent_node:                function (node) {\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        _parent = tree.get_parent(node);\n                        if (_parent) {\n                            return tree.select_node(_parent);\n                        }\n                    }\n                },\n                select_first_node:                 function () {\n                    return tree.select_node(tree.get_first_node());\n                },\n                select_next_sibling:               function (node) {\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        _target = tree.get_next_sibling(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_prev_sibling:               function (node) {\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        _target = tree.get_prev_sibling(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_next_node:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        _target = tree.get_next_node(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                },\n                select_prev_node:                  function (node) {\n                    node = node || tree.selected_node;\n\n                    if (typeof node === 'object') {\n                        _target = tree.get_prev_node(node);\n                        if (_target) {\n                            return tree.select_node(_target);\n                        }\n                    }\n                }\n            };\n            angular.extend(scope.tree, tree);\n            return scope.tree;\n        }\n\n        return _$init;\n    }\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\n    [\n        '$templateCache', function ($templateCache) {\n        $templateCache.put(\n            'template/TreeDnD/TreeDnD.html',\n            ['<table ng-class=\"$tree_class\">',\n             '    <thead>',\n             '  <tr>',\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\n             '        <\\/th>',\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\n             '         {{col.displayName || col.field}}',\n             '     </th>',\n             '    </tr>',\n             '    </thead>',\n             ' <tbody tree-dnd-nodes>',\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\n             '       ng-if=\"node.__inited__ || node.__visible__\" ng-show=\"node.__visible__\"',\n             '       ng-click=\"onSelect(node)\" ',\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\n             '        <td tree-dnd-node-handle',\n             '         ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\n             '          ng-class=\"expandingProperty.cellClass\"',\n             '            compile=\"expandingProperty.cellTemplate\">',\n             '              <a data-nodrag>',\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\n             '                     class=\"tree-icon\"></i>',\n             '              </a>',\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\n             '       </td>',\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\n             '            compile=\"col.cellTemplate\">',\n             '            {{node[col.field]}}',\n             '       </td>',\n             '    </tr>',\n             '    </tbody>',\n             '</table>'].join('')\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusCopy.html',\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\n        );\n\n        $templateCache.put(\n            'template/TreeDnD/TreeDnDStatusMove.html',\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\n        );\n    }]\n);\n\n})();"],"sourceRoot":"/source/"}