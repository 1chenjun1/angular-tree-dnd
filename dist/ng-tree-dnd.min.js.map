{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","factory","line2tree","data","primaryKey","parentKey","length","parentId","parent","rootIds","item","_primary","treeObjs","len","i","__children__","push","tree2tree","access_child","_i","_copy","_child","_tree","_len","copy","isArray","$document","$window","calsIndent","nodrag","targetElm","attr","eventObj","e","obj","undefined","targetTouches","originalEvent","dragInfo","scope","_node","getData","getScopeTree","_parent","getNode","__parent_real__","move","pos","__index__","target","drop","getPrevSibling","changed","height","element","prop","width","offset","boundingClientRect","getBoundingClientRect","top","pageYOffset","body","scrollTop","documentElement","left","pageXOffset","scrollLeft","positionStarted","offsetX","pageX","this","offsetY","pageY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","Math","abs","moving","replaceIndent","indent","children","css","$callbacks","$templateCache","templatePath","copyPath","movePath","scopes","setMove","path","$id","setCopy","getPath","getCopy","temp","get","getMove","$filter","_iF","_lenF","_keysF","_state","_filter","_condition","for_all_descendants","options","name","fnBefore","fnAfter","isPassed","isFunction","_nodes","_parentPassed","_childPassed","for_all_descendants_condition","condition","nameChild","_childs","_passed","_fnProccess","_iO","_keysO","_lenO","_key","field","_callback","callback","_switch","_fnCheck","_check","_regex","RegExp","test","Object","keys","_fnAfter","isNodePassed","isChildPassed","__filtered__","__filtered_visible__","showParent","_fnConvert","filters","isObject","_first","conditions","_fnMain","treeData","_options","_fnBefore","_fnAfterDept","opts","_fnOrderBy","fnOrderBy","_fnOrder","list","orderBy","isString","directive","$compile","restrict","link","attrs","$watch","compile","new_val","new_elem","html","append","$element","$type","$class","addClass","replace","$modelValue","$icon_class","$node_class","getScopeNode","getElementChilds","querySelector","treeDndNode","newValue","oldValue","setScope","__icon__","$nodes_class","treeDndNodes","$timeout","$http","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDOrderBy","$TreeDnDFilter","controller","$scope","$attrs","dragEnabled","dropEnabled","dragDelay","indent_plus","indent_unit","$tree_class","primary_key","enabledMove","statusMove","enabledHotkey","enabledCollapse","enabledFilter","dragBorder","horizontal","colDefinitions","$globals","tree_nodes","statusElm","placeElm","dragging","targeting","fn","_clone","accept","moveTo","isChanged","beforeDrag","scopeDrag","dragStart","event","dragMove","dragStop","skiped","beforeDrop","level","skipUnit","skipEdge","unit","edge","droppable","draggable","changeKey","__uid__","random","__selected__","clone","_this","remove","splice","add","dropped","info","pass","isMove","_nodeAdd","_move","_parentRemove","_parentAdd","setDragging","toggleExpand","__expanded__","_index","index","getHash","__parent__","_hash","getScope","enableMove","visible","__visible__","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","find","removeClass","setPositionStatus","_scope","z-index","initPlace","dragElm","tagName","isTable","toLowerCase","document","createElement","_len_down","parentNode","insertBefore","hidePlace","showPlace","$safeApply","phase","$root","$$phase","$apply","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","indexOf","tElement","tAttrs","transclude","$_Template","_element","trim","w","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","getExpandOn","_firstNode","_keys","expandingProperty","getColDefs","_col_defs","do_f","root","parent_real","_icon","_index_real","_dept","_hashKey","expandLevel","__index_real__","__level__","__hashKey__","__dept__","reload_data","_data","_tree_nodes","expandOn","columnDefs","filter","filterOptions","_offset","_max","_min","_deptTotal","_defaultFilterOption","showChild","_watches","indentUnit","enableCollapse","enableDrag","enableDrop","indentPlus","optCallbacks","forEach","value","key","isHotkey","templateCopy","_url","templateMove","option","extend","lenW","fnWatchTreeData","unWatchTreeData","equals","treeClass","n","iconExpand","iconCollapse","iconLeaf","onClick","on_click","onSelect","selected_node","select_node","expand_all_parents","on_select","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","fnCallback","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","p","siblings","get_next_sibling","get_prev_sibling","get_first_child","_ref","get_closest_ancestor_next_sibling","next","get_next_node","get_prev_node","prev_sibling","get_last_descendant","last_child","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","prev","select_next_node","select_prev_node","document_height","document_width","offsetEdge","hasTouch","window","dragDelaying","dragStarted","dragTimer","button","which","uiTreeDragging","eventElm","eventScope","eventElmTagName","dragScope","preventDefault","_width","_needCollapse","_copied","_tbody","_holder","_swaper","after","replaceWith","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","max","scrollHeight","offsetHeight","clientHeight","scrollWidth","offsetWidth","clientWidth","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","bottom_scroll","innerHeight","scrollBy","targetX","targetY","targetScope","targetBefore","targetOffset","isVeritcal","isEmpty","isSwapped","_target","_level","_drag","_drop","treeScope","fnSwapTree","isHolder","fnPlaceHolder","elementFromPoint","_height","_prev","__index__real__","prepend","dragEnd","_isTable","_status","$$apply","bindDrag","unbind","dragStartEvent","cancel","keydownHandler","keyCode","shiftKey","keyupHandler","$on","templateUrl","cache","success","run","put","call"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.3\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    angular.isUndefinedOrNull = function(val) {\r\n        return angular.isUndefined(val) || val === null\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:        'tree-dnd',\r\n            empty:       'tree-dnd-empty',\r\n            hidden:      'tree-dnd-hidden',\r\n            node:        'tree-dnd-node',\r\n            nodes:       'tree-dnd-nodes',\r\n            handle:      'tree-dnd-handle',\r\n            place:       'tree-dnd-placeholder',\r\n            drag:        'tree-dnd-drag',\r\n            status:      'tree-dnd-status',\r\n            icon: {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).factory(\r\n    '$TreeDnDConvert', function () {\r\n        return {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function (data, parentKey) {\r\n                var access_child = function (data) {\r\n                    var _tree = [];\r\n                    var _i, _len = data.length, _copy, _child;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _copy = angular.copy(data[_i]);\r\n                        if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                            _child = access_child(_copy[parentKey]);\r\n                            delete(_copy[parentKey]);\r\n                            _copy.__children__ = _child;\r\n                        }\r\n                        _tree.push(_copy);\r\n                    }\r\n                    return _tree;\r\n                };\r\n\r\n                return access_child(data);\r\n            }\r\n        };\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            return {\r\n                calsIndent:      null,\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html';\r\n            var copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html';\r\n            var movePath = 'template/TreeDnD/TreeDnDStatusMove.html';\r\n            var scopes = {};\r\n            return {\r\n                setMove: function (path, scope) {\r\n                    if (!scopes[scope.$id]) {\r\n                        scopes[scope.$id] = {};\r\n                    }\r\n                    scopes[scope.$id].movePath = path;\r\n                },\r\n                setCopy: function (path, scope) {\r\n                    if (!scopes[scope.$id]) {\r\n                        scopes[scope.$id] = {};\r\n                    }\r\n                    scopes[scope.$id].copyPath = path;\r\n                },\r\n                getPath: function () {\r\n                    return templatePath;\r\n                },\r\n                getCopy: function (scope) {\r\n                    var temp;\r\n                    if (scopes[scope.$id] && scopes[scope.$id].copyPath &&\r\n                        (temp = $templateCache.get(scopes[scope.$id].copyPath))) {\r\n                        return temp;\r\n                    }\r\n                    return $templateCache.get(copyPath);\r\n                },\r\n                getMove: function (scope) {\r\n                    var temp;\r\n                    if (scopes[scope.$id] && scopes[scope.$id].movePath &&\r\n                        (temp = $templateCache.get(scopes[scope.$id].movePath))) {\r\n                        return temp;\r\n                    }\r\n                    return $templateCache.get(movePath);\r\n                }\r\n            };\r\n\r\n        }]\r\n).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _callback, _key,\r\n                _iF, _lenF, _keysF,\r\n                _state, _passed,\r\n                _filter, _condition,\r\n                for_all_descendants = function (options, node, name, fnBefore, fnAfter, isPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes, _state, _parentPassed = false, _childPassed = false;\r\n\r\n                    _state = fnBefore(options, node, isPassed);\r\n                    _parentPassed = _state;\r\n\r\n                    if (!angular.isUndefinedOrNull(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _state = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                name,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _parentPassed\r\n                            );\r\n\r\n                            _childPassed = _childPassed || _state;\r\n                        }\r\n                    }\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _parentPassed, _childPassed);\r\n                    }\r\n\r\n                    return _parentPassed || _childPassed;\r\n                },\r\n                for_all_descendants_condition = function (options, node, condition, nameChild, fnBefore, fnAfter) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _childs, _passed = false;\r\n\r\n                    _passed = fnBefore(options, node, condition);\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        if(fnAfter(options, node, condition, _passed) === true){\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (!angular.isUndefinedOrNull(condition[nameChild])) {\r\n                        _childs = condition[nameChild];\r\n                        _len = _childs.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            if(for_all_descendants_condition(\r\n                                    options,\r\n                                    node,\r\n                                    _childs[_i],\r\n                                    nameChild,\r\n                                    fnBefore,\r\n                                    fnAfter\r\n                                ) === false){\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                },\r\n                _fnProccess = function (options, node, condition) {\r\n\r\n                    var _key = condition.field,\r\n                        _callback = condition.callback,\r\n                        _state = null,\r\n                        _switch = null,\r\n                        _iO, _keysO, _lenO,\r\n                        _fnCheck = function (_check){\r\n                            if(angular.isUndefinedOrNull(_check) || angular.isArray(_check)) {\r\n                                return null;\r\n                            }\r\n\r\n                            if (angular.isFunction(_callback)) {\r\n                                return _callback(_check, $filter);\r\n                            } else {\r\n                                if (typeof _callback === 'boolean') {\r\n                                    _check = !!_check;\r\n                                    return _check === _callback;\r\n                                } else if (!angular.isUndefinedOrNull(_callback)) {\r\n                                    var _regex = new RegExp(_callback, 'g');\r\n                                    return _regex.test(_check);\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        };\r\n                    if(_key === '_$'){\r\n                        _keysO = Object.keys(node);\r\n                        _lenO = _keysO.length;\r\n                        for( _iO = 0; _iO < _lenO; _iO++){\r\n                            _switch = _fnCheck(node[_keysO[_iO]]);\r\n                            if(_switch === true){\r\n                                return true;\r\n                            }\r\n                            _state = _switch;\r\n                        }\r\n                    } else if (!angular.isUndefinedOrNull(node[_key])) {\r\n                        _state = _fnCheck(node[_key]);\r\n                    }\r\n\r\n                    return _state;\r\n                },\r\n                _fnAfter = function (options, node, isNodePassed, isChildPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if (isChildPassed === true && options.showParent === true) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n                _fnConvert = function (filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n                        var _first = true;\r\n                        if (_lenF > 0) {\r\n                            for (_iF = 0; _iF < _lenF; _iF++){\r\n\r\n                                if((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0){\r\n                                    continue;\r\n                                }\r\n\r\n                                _state = {\r\n                                    field:    _keysF[_iF],\r\n                                    callback: filters[_keysF[_iF]]\r\n                                };\r\n\r\n                                if(_first){\r\n                                    _filter.push(_state);\r\n                                    _first = false;\r\n                                    _condition = _state;\r\n                                }else{\r\n                                    _condition.conditions = [];\r\n                                    _condition.conditions.push(_state);\r\n                                    _condition = _state;\r\n                                }\r\n                            }\r\n                        }\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                },\r\n                _fnMain = function (treeData, filters, _options) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(filters) || angular.isObject(filters))\r\n                        || filters.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _iF, _lenF, _keysF,\r\n                        _state, _passed,\r\n                        _filter, _condition;\r\n\r\n                    _filter = _fnConvert(filters);\r\n                    if(!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                       || _filter.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    _lenF = _filter.length;\r\n                    var _fnBefore = function (options, node, isPassed) {\r\n                        var _passed = false,\r\n                            _fnAfterDept = function (opts, node, condition, isPassed) {\r\n                                if (isPassed === false) {\r\n                                    _passed = false;\r\n                                    // break-all;\r\n                                    return true;\r\n                                }\r\n\r\n                                _passed = _passed || isPassed;\r\n                            };\r\n\r\n                        if (_lenF === 0) {\r\n                            node.__filtered__ = true;\r\n                            return true;\r\n                        } else {\r\n                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n                                for_all_descendants_condition(\r\n                                    options,\r\n                                    node,\r\n                                    _filter[_iF], 'conditions',\r\n                                    _fnProccess, _fnAfterDept\r\n                                );\r\n\r\n                                if (_passed) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    };\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            _options,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnBefore, _fnAfter\r\n                        );\r\n                    }\r\n\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function (options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (!angular.isUndefinedOrNull(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n\r\n                _fnOrder = function (list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                };\r\n\r\n            return function (treeData, orderBy) {\r\n                if (!angular.isArray(treeData)\r\n                    || treeData.length === 0\r\n                    || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy))\r\n                    || orderBy.length === 0) {\r\n                    return treeData;\r\n                }\r\n\r\n                var _i, _len,\r\n                    _iF, _lenF, _keysF;\r\n\r\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                    treeData[_i] = for_all_descendants(\r\n                        orderBy,\r\n                        treeData[_i],\r\n                        '__children__',\r\n                        _fnOrder\r\n                    );\r\n                }\r\n\r\n                treeData = _fnOrder(treeData, orderBy);\r\n                return treeData;\r\n            };\r\n        }]\r\n).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n                                // Which we can then append to our DOM element.\r\n                                if(angular.isFunction(element.empty)){\r\n                                    element.empty()\r\n                                }else{\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:       function (scope, element, attrs) {\r\n                scope.$modelValue = null;\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNode';\r\n                scope.$icon_class = '';\r\n                scope.$node_class = '';\r\n                scope.getScopeNode = function () {\r\n                    return scope;\r\n                };\r\n\r\n                scope.getData = function () {\r\n                    return scope.$modelValue;\r\n                };\r\n\r\n                scope.getElementChilds = function () {\r\n                    return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                };\r\n\r\n                if (scope.$class.node) {\r\n                    element.addClass(scope.$class.node);\r\n                    scope.$node_class = scope.$class.node;\r\n                }\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNode, function (newValue, oldValue, scope) {\r\n                        scope.setScope(scope, newValue);\r\n                        scope.$modelValue = newValue;\r\n                        scope.$icon_class = scope.$class.icon[newValue.__icon__];\r\n                    }, true\r\n                );\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.nodes = [];\r\n                scope.$nodes_class = '';\r\n                scope.$type = 'TreeDnDNodes';\r\n                scope.$element = element;\r\n                scope.getScopeNode = null;\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNodes, function (newValue, oldValue, scope) {\r\n                        scope.nodes = newValue;\r\n                    }, true\r\n                );\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDnd', [\r\n        '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDOrderBy', '$TreeDnDFilter',\r\n        function ($timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDOrderBy, $TreeDnDFilter) {\r\n\r\n            return {\r\n                restrict:   'E',\r\n                scope:      true,\r\n                replace:    true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.dragEnabled = true;\r\n                        $scope.dropEnabled = true;\r\n                        $scope.dragDelay = 0;\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.$tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n                        $scope.enabledMove = true;\r\n                        $scope.statusMove = true;\r\n                        $scope.enabledHotkey = false;\r\n                        $scope.enabledCollapse = null;\r\n                        $scope.enabledFilter = null;\r\n                        $scope.dragBorder = 30;\r\n\r\n                        $scope.horizontal = null;\r\n                        $scope.$type = 'TreeDnD';\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.$class = {};\r\n                        $scope.tree_nodes = [];\r\n\r\n                        $scope.statusElm = null;\r\n                        $scope.placeElm = null;\r\n                        $scope.dragging = null;\r\n\r\n                        $scope.targeting = false;\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n                        var _clone;\r\n                        $scope.$callbacks = {\r\n                            for_all_descendants: $scope.for_all_descendants,\r\n                            accept:              function (dragInfo, moveTo, isChanged) {\r\n                                return true;\r\n                            },\r\n                            beforeDrag:          function (scopeDrag) {\r\n                                return true;\r\n                            },\r\n                            dragStart:           function (event) {},\r\n                            dragMove:            function (event) {},\r\n                            dragStop:            function (event, skiped) {},\r\n                            beforeDrop:          function (event) {\r\n                                return true;\r\n                            },\r\n                            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = (skipEdge) ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:           function () {\r\n                                return $scope.dropEnabled;\r\n                            },\r\n                            draggable:           function () {\r\n                                return $scope.dragEnabled;\r\n                            },\r\n                            changeKey:           function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:               function (node, _this) {\r\n                                _clone = angular.copy(node);\r\n                                this.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:              function (node, parent, _this) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:                 function (node, pos, parent, _this) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            },\r\n\r\n                            dropped: function (info, pass, isMove) {\r\n                                if (!info) {\r\n                                    return null;\r\n                                }\r\n\r\n                                if (!info.changed && isMove) {\r\n                                    return false;\r\n                                }\r\n                                var _node = info.node,\r\n                                    _nodeAdd = null,\r\n                                    _move = info.move,\r\n                                    _parent = null,\r\n                                    _parentRemove = (info.parent || info.drag.treeData),\r\n                                    _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                    if (isMove) {\r\n                                        _parent = _parentRemove;\r\n                                        if (!angular.isUndefinedOrNull(_parent.__children__)) {\r\n                                            _parent = _parent.__children__;\r\n                                        }\r\n                                        _nodeAdd = info.drag.$callbacks.remove(_node, _parent, info.drag.$callbacks);\r\n                                    } else {\r\n                                        _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                    }\r\n\r\n                                    // if node dragging change index in sample node parent\r\n                                    // and index node decrement\r\n                                    if (isMove &&\r\n                                        info.drag === info.target &&\r\n                                        _parentRemove === _parentAdd &&\r\n                                        _move.pos >= info.node.__index__) {\r\n                                        _move.pos--;\r\n                                    }\r\n\r\n                                    _parent = _parentAdd;\r\n                                    if (_parent.__children__) {\r\n                                        _parent = _parent.__children__;\r\n                                    }\r\n\r\n                                    info.target.$callbacks.add(_nodeAdd, _move.pos, _parent, info.drag.$callbacks);\r\n\r\n                                    return true;\r\n                                }\r\n\r\n                                return false;\r\n                            }\r\n                        };\r\n\r\n                        $scope.setDragging = function (dragInfo) {\r\n                            $scope.dragging = dragInfo;\r\n                        };\r\n\r\n                        $scope.toggleExpand = function (node) {\r\n                            if (node.__children__.length > 0) {\r\n                                node.__expanded__ = !node.__expanded__;\r\n                            }\r\n                        };\r\n\r\n                        $scope.getScopeTree = function () {\r\n                            return $scope;\r\n                        };\r\n\r\n                        $scope.getPrevSibling = function (node) {\r\n                            if (node && node.__index__ > 0) {\r\n                                var _parent, _index = node.__index__ - 1;\r\n\r\n                                if (!angular.isUndefinedOrNull(node.__parent_real__)) {\r\n                                    _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                    return _parent.__children__[_index];\r\n                                } else {\r\n                                    return $scope.treeData[_index];\r\n                                }\r\n                            }\r\n                            return null;\r\n                        };\r\n\r\n                        $scope.getNode = function (index) {\r\n                            if (angular.isUndefinedOrNull(index)) {\r\n                                return null;\r\n                            }\r\n                            return $scope.tree_nodes[index];\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.setScope = function (scope, node) {\r\n                            var _hash = $scope.getHash(node);\r\n                            if ($scope.$globals[_hash] !== scope) {\r\n                                $scope.$globals[_hash] = scope;\r\n                            }\r\n                        };\r\n\r\n                        $scope.getScope = function (node) {\r\n                            if (node) {\r\n                                return $scope.$globals[$scope.getHash(node)];\r\n                            } else {\r\n                                return $scope;\r\n                            }\r\n                        };\r\n\r\n                        $scope.enableMove = function (val) {\r\n                            if ((typeof val) === \"boolean\") {\r\n                                $scope.enabledMove = val;\r\n                            } else {\r\n                                $scope.enabledMove = true;\r\n                            }\r\n                        };\r\n\r\n                        $scope.visible = function (node) {\r\n                            if (node) {\r\n                                return node.__visible__ ? node : $scope.visible($scope.tree_nodes[node.__parent_real__]);\r\n                            }\r\n                            return null;\r\n                        };\r\n\r\n                        if ($attrs.enableStatus) {\r\n                            $scope.enabledStatus = false;\r\n\r\n                            $scope.hideStatus = function () {\r\n                                if ($scope.statusElm) {\r\n                                    $scope.statusElm.addClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.refreshStatus = function () {\r\n                                if (!$scope.dragging) {\r\n                                    return;\r\n                                }\r\n\r\n                                if ($scope.enabledStatus) {\r\n                                    var statusElmOld = $scope.statusElm;\r\n                                    if ($scope.enabledMove) {\r\n                                        $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                    } else {\r\n                                        $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                    }\r\n\r\n                                    if (statusElmOld !== $scope.statusElm) {\r\n                                        if (statusElmOld) {\r\n                                            $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                            $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                            statusElmOld.remove();\r\n                                        }\r\n                                        $document.find('body').append($scope.statusElm);\r\n\r\n                                    }\r\n\r\n                                    $scope.statusElm.removeClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.setPositionStatus = function (e, _scope) {\r\n                                if ($scope.statusElm) {\r\n                                    $scope.statusElm.css(\r\n                                        {\r\n                                            'left':    e.pageX + 10 + 'px',\r\n                                            'top':     e.pageY + 15 + 'px',\r\n                                            'z-index': 9999\r\n                                        }\r\n                                    );\r\n                                    $scope.statusElm.addClass($scope.$class.status);\r\n                                }\r\n                            };\r\n\r\n                        } else {\r\n                            $scope.enabledStatus = null;\r\n                        }\r\n\r\n                        $scope.initPlace = function (element, dragElm) {\r\n\r\n                            var tagName = null,\r\n                                isTable = false;\r\n\r\n                            if (element) {\r\n                                tagName = element.prop('tagName').toLowerCase();\r\n                                isTable = (tagName === 'tr' || tagName === 'td');\r\n                            } else {\r\n                                tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\r\n                                isTable = (tagName === 'tbody' || tagName === 'table');\r\n                            }\r\n\r\n                            if (!$scope.placeElm) {\r\n\r\n                                if (isTable) {\r\n                                    $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                    var _len_down = $scope.colDefinitions.length;\r\n                                    $scope.placeElm.append(\r\n                                        angular.element($window.document.createElement('td'))\r\n                                            .addClass($scope.$class.empty)\r\n                                            .addClass('indented')\r\n                                            .addClass($scope.$class.place)\r\n                                    );\r\n                                    while (_len_down-- > 0) {\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.$class.empty)\r\n                                                .addClass($scope.$class.place)\r\n                                        );\r\n                                    }\r\n                                } else {\r\n                                    $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                        .addClass($scope.$class.empty)\r\n                                        .addClass($scope.$class.place);\r\n                                }\r\n\r\n                            }\r\n\r\n                            if (dragElm) {\r\n                                $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                            }\r\n\r\n                            if (element) {\r\n                                element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                            } else {\r\n                                $scope.getElementChilds().append($scope.placeElm);\r\n                            }\r\n\r\n                            return $scope.placeElm;\r\n                        };\r\n\r\n                        $scope.hidePlace = function () {\r\n                            if ($scope.placeElm) {\r\n                                $scope.placeElm.addClass($scope.$class.hidden);\r\n                            }\r\n                        };\r\n\r\n                        $scope.showPlace = function () {\r\n                            if ($scope.placeElm) {\r\n                                $scope.placeElm.removeClass($scope.$class.hidden);\r\n                            }\r\n                        };\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                        $scope.generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter) {\r\n                            nameScope = nameScope || nameAttr;\r\n                            if (typeof type === 'string' || typeof type === 'array' || typeof type === 'object') {\r\n                                if ($attrs[nameAttr]) {\r\n                                    $scope.$watch(\r\n                                        $attrs[nameAttr], function (val) {\r\n                                            if ((typeof type === 'string' && typeof val === type) ||\r\n                                                ((typeof type === 'array' || typeof type === 'object') && type.indexOf(typeof val) > -1)\r\n                                            ) {\r\n                                                $scope[nameScope] = val;\r\n                                            } else {\r\n                                                if (angular.isFunction(valDefault)) {\r\n                                                    $scope[nameScope] = valDefault(val);\r\n                                                } else {\r\n                                                    $scope[nameScope] = valDefault;\r\n                                                }\r\n                                            }\r\n                                            if (angular.isFunction(fnAfter)) {\r\n                                                fnAfter($scope[nameScope]);\r\n                                            }\r\n                                        }, true\r\n                                    );\r\n                                } else {\r\n\r\n                                    if (angular.isFunction(fnNotExist)) {\r\n                                        $scope[nameScope] = fnNotExist();\r\n                                    } else if (!angular.isUndefined(fnNotExist)) {\r\n                                        $scope[nameScope] = fnNotExist;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }],\r\n                compile:    function compile(tElement, tAttrs, transclude) {\r\n                    var $_Template = '',\r\n                        _element = tElement.html().trim();\r\n                    if (_element.length > 0) {\r\n                        $_Template = _element;\r\n                        tElement.html('');\r\n                    }\r\n\r\n                    return function fnPost(scope, element, attrs) {\r\n                        var getExpandOn = function () {\r\n                                if (scope.treeData.length) {\r\n                                    var _firstNode = scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                        _len,\r\n                                        i;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            scope.expandingProperty = _keys[i];\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Auto get first\r\n                                    if (angular.isUndefinedOrNull(scope.expandingProperty)) {\r\n                                        scope.expandingProperty = _keys[0];\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            getColDefs = function () {\r\n                                // Auto get Defs except attribute __level__ ....\r\n                                if (scope.treeData.length) {\r\n                                    var _col_defs = [], _firstNode = scope.treeData[0],\r\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + scope.expandingProperty + \"$)\"),\r\n                                        _keys = Object.keys(_firstNode),\r\n                                        i, _len;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            _col_defs.push(\r\n                                                {\r\n                                                    field: _keys[i]\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    scope.colDefinitions = _col_defs;\r\n                                }\r\n                            },\r\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                                if (!angular.isArray(node.__children__)) {\r\n                                    node.__children__ = [];\r\n                                }\r\n\r\n                                node.__parent_real__ = parent_real;\r\n                                node.__parent__ = parent;\r\n                                _len = node.__children__.length;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                    node.__expanded__ = level < scope.expandLevel;\r\n                                }\r\n\r\n                                if (_len === 0) {\r\n                                    _icon = -1;\r\n                                } else {\r\n                                    if (node.__expanded__) {\r\n                                        _icon = 1;\r\n                                    } else {\r\n                                        _icon = 0;\r\n                                    }\r\n                                }\r\n                                // Insert item vertically\r\n                                _index_real = root.length;\r\n                                node.__index__ = index;\r\n                                node.__index_real__ = _index_real;\r\n                                node.__level__ = level;\r\n                                node.__icon__ = _icon;\r\n                                node.__visible__ = visible;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                    node.__uid__ = \"\" + Math.random();\r\n                                }\r\n\r\n                                root.push(node);\r\n\r\n                                // Check node children\r\n                                _dept = 1;\r\n                                if (_len > 0) {\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _dept += do_f(\r\n                                            root,\r\n                                            node.__children__[_i],\r\n                                            (scope.primary_key === '__uid__') ? node.__uid__ : node[scope.primary_key],\r\n                                            _index_real,\r\n                                            level + 1,\r\n                                            visible && node.__expanded__,\r\n                                            _i\r\n                                        );\r\n                                    }\r\n                                }\r\n\r\n                                _hashKey = scope.getHash(node);\r\n\r\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                    node.__hashKey__ = _hashKey;\r\n                                    // delete(scope.$globals[_hashKey]);\r\n                                }\r\n\r\n                                node.__dept__ = _dept;\r\n\r\n                                return _dept;\r\n                            },\r\n                            reload_data = function () {\r\n                                var _data = scope.treeData,\r\n                                    _len = _data.length,\r\n                                    _tree_nodes = [];\r\n\r\n                                if (!attrs.expandOn) {\r\n                                    getExpandOn();\r\n                                }\r\n\r\n                                if (!attrs.columnDefs) {\r\n                                    getColDefs();\r\n                                }\r\n\r\n                                if (!angular.isUndefinedOrNull(scope.orderBy)) {\r\n                                    _data = $TreeDnDOrderBy(_data, scope.orderBy);\r\n                                }\r\n\r\n                                if (!angular.isUndefinedOrNull(scope.filter)) {\r\n                                    _data = $TreeDnDFilter(_data, scope.filter, scope.filterOptions);\r\n                                }\r\n\r\n                                if (_len > 0) {\r\n                                    var _i,\r\n                                        _offset, _max, _min, _keys,\r\n                                        _deptTotal = 0;\r\n\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                    }\r\n\r\n                                    // clear Element Empty\r\n                                    _keys = Object.keys(scope.$globals);\r\n                                    _len = scope.$globals.length;\r\n                                    _offset = _len - _deptTotal;\r\n\r\n                                    if (_offset !== 0) {\r\n                                        _max = _len - _offset;\r\n                                        _min = _max - Math.abs(_offset);\r\n                                        for (_i = _min; _i < _max; _i++) {\r\n                                            delete(scope.$globals[_keys[_i]]);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                scope.tree_nodes = _tree_nodes;\r\n\r\n                                return scope.tree_nodes;\r\n                            },\r\n                            _defaultFilterOption = {\r\n                                showParent: true,\r\n                                showChild:  false\r\n                            },\r\n                            _watches = [\r\n                                ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                                ['boolean', 'enableMove', null, 'enabledMove'],\r\n                                ['boolean', 'horizontal', null],\r\n                                [['object', 'string', 'array', 'function'], 'orderBy', attrs.orderBy],\r\n                                ['string', 'primaryKey', attrs.primaryKey, 'primary_key', '__uid__'],\r\n                                ['string', 'indentUnit', attrs.indentUnit, 'indent_unit'],\r\n                                [\r\n                                    'boolean', 'enableCollapse',\r\n                                    (typeof attrs.enableCollapse) === \"boolean\" ? attrs.enableCollapse : null,\r\n                                    'enabledCollapse'\r\n                                ],\r\n                                [\r\n                                    'boolean', 'enableDrag',\r\n                                    (typeof attrs.enableDrag) === \"boolean\" ? attrs.enableDrag : null\r\n                                    , 'dragEnabled'\r\n                                ],\r\n                                [\r\n                                    'boolean', 'enableDrop',\r\n                                    (typeof attrs.enableDrop) === \"boolean\" ? attrs.enableDrop : null,\r\n                                    'dropEnabled'\r\n                                ],\r\n\r\n                                [\r\n                                    'number', 'dragBorder',\r\n                                    (typeof attrs.dragBorder) === \"number\" ? attrs.dragBorder : null\r\n                                ],\r\n\r\n                                ['number', 'indent', (typeof attrs.indent) === \"number\" ? attrs.indent : 0],\r\n                                [\r\n                                    'number', 'indentPlus',\r\n                                    (typeof attrs.indentPlus) === \"number\" ? attrs.indentPlus : 0, 'indent_plus'],\r\n                                ['number', 'dragDelay', (typeof attrs.dragDelay) === \"number\" ? attrs.dragDelay : 0],\r\n                                [\r\n                                    'null', 'callbacks',\r\n                                    function (optCallbacks) {\r\n                                        angular.forEach(\r\n                                            optCallbacks, function (value, key) {\r\n                                                if (typeof value === \"function\") {\r\n                                                    if (scope.$callbacks[key]) {\r\n                                                        scope.$callbacks[key] = value;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                        return scope.$callbacks;\r\n                                    },\r\n                                    '$callbacks'\r\n                                ],\r\n                                [\r\n                                    'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                    if (isHotkey) {\r\n                                        scope.enabledMove = false;\r\n                                    } else {\r\n                                        scope.enabledMove = scope.statusMove;\r\n                                    }\r\n                                }],\r\n                                [['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn],\r\n                                [['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs],\r\n\r\n                                [\r\n                                    'string', 'templateCopy', attrs.templateCopy, 'templateCopy', null,\r\n                                    function (_url) {\r\n                                        if (_url && $templateCache.get(_url)) {\r\n                                            $TreeDnDTemplate.setCopy(_url, scope);\r\n                                        }\r\n                                    }],\r\n\r\n                                [\r\n                                    'string', 'templateMove', attrs.templateMove, 'templateMove', null,\r\n                                    function (_url) {\r\n                                        if (_url && $templateCache.get(_url)) {\r\n                                            $TreeDnDTemplate.setMove(_url, scope);\r\n                                        }\r\n                                    }],\r\n                                [\r\n                                    ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                                    var _passed = false;\r\n                                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                                        var _keysF = Object.keys(filters),\r\n                                            _lenF = _keysF.length, _iF;\r\n                                            _first = true;\r\n\r\n                                        if (_lenF > 0) {\r\n                                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                                    continue;\r\n                                                }\r\n                                                _passed = true;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    scope.enabledFilter = _passed;\r\n                                    reload_data();\r\n                                }],\r\n                                [\r\n                                    'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                    _defaultFilterOption, function (option) {\r\n                                    if (typeof option === \"object\") {\r\n                                        scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                    }\r\n                                }],\r\n                                [\r\n                                    'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                                    reload_data();\r\n                                }]\r\n                            ], w, lenW = _watches.length,\r\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW;\r\n\r\n                        for (w = 0; w < lenW; w++) {\r\n                            _typeW = _watches[w][0];\r\n                            _nameW = _watches[w][1];\r\n                            _defaultW = _watches[w][2];\r\n                            _scopeW = _watches[w][3];\r\n                            _NotW = _watches[w][4];\r\n                            _AfterW = _watches[w][5];\r\n                            scope.generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW);\r\n                        }\r\n\r\n                        if (attrs.treeData) {\r\n                            var _first = true,\r\n                                fnWatchTreeData = function () {\r\n                                    var unWatchTreeData = scope.$watch(\r\n                                        attrs.treeData, function (val, oldValue) {\r\n                                            if (!angular.equals(val, oldValue) || _first) {\r\n                                                if (typeof val === 'object' || typeof val === 'array') {\r\n                                                    scope.treeData = val;\r\n                                                } else {\r\n                                                    scope.treeData = [];\r\n                                                }\r\n\r\n                                                unWatchTreeData();\r\n                                                _first = false;\r\n                                                reload_data();\r\n                                                fnWatchTreeData();\r\n                                            }\r\n                                        }, true\r\n                                    );\r\n                                }\r\n                            fnWatchTreeData();\r\n                        }\r\n\r\n                        if (attrs.treeClass) {\r\n                            if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + attrs.treeClass)) {\r\n                                scope.$tree_class = attrs.treeClass.trim();\r\n                            } else {\r\n                                scope.$watch(\r\n                                    attrs.treeClass, function (val) {\r\n                                        switch (typeof val) {\r\n                                            case 'string':\r\n                                                scope.$tree_class = val;\r\n                                                break;\r\n                                            case 'object':\r\n                                                angular.extend(scope.$class, val);\r\n                                                scope.$tree_class = scope.$class.tree;\r\n                                                break;\r\n                                            default:\r\n                                                scope.$tree_class = attrs.treeClass;\r\n                                                break;\r\n                                        }\r\n                                    }\r\n                                );\r\n                            }\r\n                        }else{\r\n                            scope.$tree_class = scope.$class.tree + ' table';\r\n                        }\r\n\r\n                        // End watch\r\n                        //\r\n\r\n                        scope.getElementChilds = function () {\r\n                            return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                        };\r\n\r\n                        scope.$class = angular.copy($TreeDnDClass);\r\n\r\n                        var n, tree;\r\n\r\n                        angular.extend(\r\n                            scope.$class.icon, {\r\n                                '1':  attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                                '0':  attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                                '-1': attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                            }\r\n                        );\r\n\r\n                        if (!scope.treeData) {\r\n                            scope.treeData = [];\r\n                        }\r\n\r\n                        scope.onClick = function (node) {\r\n                            if (angular.isFunction(scope.on_click)) {\r\n                                $timeout(\r\n                                    function () {\r\n                                        scope.on_click({node: node});\r\n                                    }\r\n                                );\r\n                            }\r\n                        };\r\n\r\n                        scope.onSelect = function (node) {\r\n                            if (node !== tree.selected_node) {\r\n                                tree.select_node(node);\r\n                            }\r\n                        };\r\n\r\n                        if (!scope.tree || !angular.isObject(scope.tree)) {\r\n                            scope.tree = {};\r\n                        }\r\n                        tree = {\r\n                            selected_node:                     null,\r\n                            for_all_descendants:               scope.for_all_descendants,\r\n                            select_node:                       function (node) {\r\n                                if (!node) {\r\n                                    if (tree.selected_node) {\r\n                                        delete(tree.selected_node.__selected__);\r\n                                    }\r\n                                    tree.selected_node = null;\r\n                                    return null;\r\n                                }\r\n\r\n                                if (node !== tree.selected_node) {\r\n                                    if (tree.selected_node) {\r\n                                        delete(tree.selected_node.__selected__);\r\n                                    }\r\n                                    node.__selected__ = true;\r\n                                    tree.selected_node = node;\r\n                                    tree.expand_all_parents(node);\r\n                                    if (angular.isFunction(scope.on_select)) {\r\n                                        $timeout(\r\n                                            function () {\r\n                                                scope.on_select({node: node});\r\n                                            }\r\n                                        );\r\n                                    }\r\n                                }\r\n                                return node;\r\n                            },\r\n                            deselect_node:                     function () {\r\n                                var node = null;\r\n                                if (tree.selected_node) {\r\n                                    delete(tree.selected_node.__selected__);\r\n                                    node = tree.selected_node;\r\n                                    tree.selected_node = null;\r\n                                }\r\n                                return node;\r\n                            },\r\n                            get_parent:                        function (node) {\r\n                                if (node && node.__parent_real__ !== null) {\r\n                                    return scope.tree_nodes[node.__parent_real__];\r\n                                }\r\n                                return null;\r\n                            },\r\n                            for_all_ancestors:                 function (child, fn) {\r\n                                var parent;\r\n                                parent = tree.get_parent(child);\r\n                                if (parent) {\r\n                                    if (fn(parent)) {\r\n                                        return false;\r\n                                    }\r\n\r\n                                    return tree.for_all_ancestors(parent, fn);\r\n                                }\r\n                                return true;\r\n                            },\r\n                            expand_all_parents:                function (child) {\r\n                                return tree.for_all_ancestors(\r\n                                    child, function (node) {\r\n                                        node.__expanded__ = true;\r\n                                    }\r\n                                );\r\n                            },\r\n                            reload_data:                       function () {\r\n                                return reload_data();\r\n                            },\r\n                            add_node:                          function (parent, new_node, index) {\r\n                                if ((typeof index) !== \"number\") {\r\n                                    if (parent) {\r\n                                        parent.__children__.push(new_node);\r\n                                        parent.__expanded__ = true;\r\n                                    } else {\r\n                                        scope.treeData.push(new_node);\r\n                                    }\r\n                                } else {\r\n                                    if (parent) {\r\n                                        parent.__children__.splice(index, 0, new_node);\r\n                                        parent.__expanded__ = true;\r\n                                    } else {\r\n                                        scope.treeData.splice(index, 0, new_node);\r\n                                    }\r\n                                }\r\n                                return new_node;\r\n                            },\r\n                            add_node_root:                     function (new_node) {\r\n                                tree.add_node(null, new_node);\r\n                                return new_node;\r\n                            },\r\n                            expand_all:                        function () {\r\n                                var i = 0,\r\n                                    len = scope.treeData.length,\r\n                                    fnCallback = function (node) {\r\n                                        node.__expanded__ = true;\r\n                                    };\r\n                                for (i = 0; i < len; i++) {\r\n                                    tree.for_all_descendants(\r\n                                        scope.treeData[i], fnCallback\r\n                                    );\r\n                                }\r\n                            },\r\n                            collapse_all:                      function () {\r\n                                var i = 0,\r\n                                    len = scope.treeData.length,\r\n                                    fnCallback = function (node) {\r\n                                        node.__expanded__ = false;\r\n                                    };\r\n                                for (i = 0; i < len; i++) {\r\n                                    tree.for_all_descendants(\r\n                                        scope.treeData[i], fnCallback\r\n                                    );\r\n                                }\r\n                            },\r\n                            remove_node:                       function (node) {\r\n                                node = node || tree.selected_node;\r\n                                if (node) {\r\n                                    var parent;\r\n                                    if (node.__parent_real__) {\r\n                                        parent = tree.get_parent(node).__children__;\r\n                                    } else {\r\n                                        parent = scope.treeData;\r\n                                    }\r\n\r\n                                    parent.splice(node.__index__, 1);\r\n\r\n                                    if (tree.selected_node === node) {\r\n                                        tree.selected_node = null;\r\n                                    }\r\n                                }\r\n                            },\r\n                            expand_node:                       function (node) {\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    node.__expanded__ = true;\r\n                                    return node;\r\n                                }\r\n                            },\r\n                            collapse_node:                     function (node) {\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    node.__expanded__ = false;\r\n                                    return node;\r\n                                }\r\n                            },\r\n                            get_selected_node:                 function () {\r\n                                return tree.selected_node;\r\n                            },\r\n                            get_first_node:                    function () {\r\n                                n = scope.treeData.length;\r\n                                if (n > 0) {\r\n                                    return scope.treeData[0];\r\n                                }\r\n                                return null;\r\n                            },\r\n                            get_children:                      function (node) {\r\n                                return node.__children__;\r\n                            },\r\n                            get_siblings:                      function (node) {\r\n                                var p, siblings;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    p = tree.get_parent(node);\r\n                                    if (p) {\r\n                                        siblings = p.__children__;\r\n                                    } else {\r\n                                        siblings = scope.treeData;\r\n                                    }\r\n                                    return siblings;\r\n                                }\r\n                            },\r\n                            get_next_sibling:                  function (node) {\r\n                                var siblings;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    siblings = tree.get_siblings(node);\r\n                                    n = siblings.length;\r\n                                    if (node.__index__ < n) {\r\n                                        return siblings[node.__index__ + 1];\r\n                                    }\r\n                                }\r\n                            },\r\n                            get_prev_sibling:                  function (node) {\r\n                                var siblings;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                siblings = tree.get_siblings(node);\r\n                                if (node.__index__ > 0) {\r\n                                    return siblings[node.__index__ - 1];\r\n                                }\r\n                            },\r\n                            get_first_child:                   function (node) {\r\n                                var _ref;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    if (((_ref = node.__children__) ? _ref.length : void 0) > 0) {\r\n                                        return node.__children__[0];\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            },\r\n                            get_closest_ancestor_next_sibling: function (node) {\r\n                                var next, parent;\r\n                                next = tree.get_next_sibling(node);\r\n                                if (next) {\r\n                                    return next;\r\n                                } else {\r\n                                    parent = tree.get_parent(node);\r\n                                    return tree.get_closest_ancestor_next_sibling(parent);\r\n                                }\r\n                            },\r\n                            get_next_node:                     function (node) {\r\n                                var next;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    next = tree.get_first_child(node);\r\n                                    if (next) {\r\n                                        return next;\r\n                                    } else {\r\n                                        return tree.get_closest_ancestor_next_sibling(node);\r\n                                    }\r\n                                }\r\n                            },\r\n                            get_prev_node:                     function (node) {\r\n                                var parent, prev_sibling;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    prev_sibling = tree.get_prev_sibling(node);\r\n                                    if (prev_sibling) {\r\n                                        return tree.get_last_descendant(prev_sibling);\r\n                                    } else {\r\n                                        parent = tree.get_parent(node);\r\n                                        return parent;\r\n                                    }\r\n                                }\r\n                            },\r\n                            get_last_descendant:               function (node) {\r\n                                var last_child;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                n = node.__children__.length;\r\n                                if (n === 0) {\r\n                                    return node;\r\n                                } else {\r\n                                    last_child = node.__children__[n - 1];\r\n                                    return tree.get_last_descendant(last_child);\r\n                                }\r\n                            },\r\n                            select_parent_node:                function (node) {\r\n                                var p;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    p = tree.get_parent(node);\r\n                                    if (p) {\r\n                                        return tree.select_node(p);\r\n                                    }\r\n                                }\r\n                            },\r\n                            select_first_node:                 function () {\r\n                                return tree.select_node(tree.get_first_node());\r\n                            },\r\n                            select_next_sibling:               function (node) {\r\n                                var next;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    next = tree.get_next_sibling(node);\r\n                                    if (next) {\r\n                                        return tree.select_node(next);\r\n                                    }\r\n                                }\r\n                            },\r\n                            select_prev_sibling:               function (node) {\r\n                                var prev;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    prev = tree.get_prev_sibling(node);\r\n                                    if (prev) {\r\n                                        return tree.select_node(prev);\r\n                                    }\r\n                                }\r\n                            },\r\n                            select_next_node:                  function (node) {\r\n                                var next;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    next = tree.get_next_node(node);\r\n                                    if (next) {\r\n                                        return tree.select_node(next);\r\n                                    }\r\n                                }\r\n                            },\r\n                            select_prev_node:                  function (node) {\r\n                                var prev;\r\n                                if (!node) {\r\n                                    node = tree.selected_node;\r\n                                }\r\n                                if (node) {\r\n                                    prev = tree.get_prev_node(node);\r\n                                    if (prev) {\r\n                                        return tree.select_node(prev);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        angular.extend(scope.tree, tree);\r\n                        tree = scope.tree;\r\n\r\n                        var hasTouch = 'ontouchstart' in window,\r\n                            startPos, firstMoving, dragInfo, pos,\r\n                            placeElm, dragElm,\r\n                            dragDelaying = true, dragStarted = false, dragTimer = null,\r\n                            body = document.body, html = document.documentElement,\r\n                            document_height, document_width,\r\n                            offsetEdge,\r\n                            dragStart = function (e) {\r\n                                if (!hasTouch && (e.button === 2 || e.which === 3)) {\r\n                                    // disable right click\r\n                                    return;\r\n                                }\r\n                                if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                                    return;\r\n                                }\r\n                                // the element which is clicked.\r\n                                var eventElm = angular.element(e.target),\r\n                                    eventScope = eventElm.scope();\r\n\r\n                                if (!eventScope || !eventScope.$type) {\r\n                                    return;\r\n                                }\r\n                                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                                //     return;\r\n                                // }\r\n\r\n                                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                                    return;\r\n                                }\r\n\r\n                                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                                    dragScope = null;\r\n                                if (eventElmTagName === 'input'\r\n                                    || eventElmTagName === 'textarea'\r\n                                    || eventElmTagName === 'button'\r\n                                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                                    return;\r\n                                }\r\n                                // check if it or it's parents has a 'data-nodrag' attribute\r\n                                while (eventElm && eventElm[0] && eventElm[0] !== element) {\r\n                                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                                        return;\r\n                                    }\r\n                                    eventElm = eventElm.parent();\r\n                                }\r\n\r\n                                e.uiTreeDragging = true; // stop event bubbling\r\n                                if (e.originalEvent) {\r\n                                    e.originalEvent.uiTreeDragging = true;\r\n                                }\r\n                                e.preventDefault();\r\n\r\n                                dragScope = eventScope.getScopeNode();\r\n\r\n                                firstMoving = true;\r\n\r\n                                if (!scope.$callbacks.beforeDrag(dragScope)) {\r\n                                    return;\r\n                                }\r\n\r\n                                var eventObj = $TreeDnDHelper.eventObj(e),\r\n                                    tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                                    isTable = (tagName === 'tr');\r\n\r\n                                dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                                scope.setDragging(dragInfo);\r\n\r\n                                pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                                if (isTable) {\r\n                                    dragElm = angular.element($window.document.createElement('table'))\r\n                                        .addClass(scope.$class.tree)\r\n                                        .addClass(scope.$class.drag)\r\n                                        .addClass(scope.$tree_class);\r\n                                } else {\r\n                                    dragElm = angular.element($window.document.createElement('ul'))\r\n                                        .addClass(scope.$class.drag)\r\n                                        .addClass('tree-dnd-nodes')\r\n                                        .addClass(scope.$tree_class);\r\n                                }\r\n\r\n                                dragElm.css(\r\n                                    {\r\n                                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                                        'z-index': 9995\r\n                                    }\r\n                                );\r\n\r\n                                offsetEdge = 0;\r\n                                var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                                    _scope = dragScope,\r\n                                    _element = _scope.$element,\r\n                                    _clone = null,\r\n                                    _needCollapse = scope.enabledCollapse,\r\n                                    _copied = false,\r\n                                    _tbody = null;\r\n\r\n                                if (isTable) {\r\n                                    offsetEdge = dragInfo.node.__level__ - 1;\r\n                                    _tbody = angular.element($window.document.createElement('tbody'));\r\n\r\n                                    scope.for_all_descendants(\r\n                                        dragInfo.node, function (_node) {\r\n                                            _scope = scope.getScope(_node);\r\n                                            _element = _scope.$element;\r\n\r\n                                            if (!_copied) {\r\n                                                _clone = _element.clone();\r\n\r\n                                                $TreeDnDHelper.replaceIndent(\r\n                                                    _scope,\r\n                                                    _clone,\r\n                                                    _node.__level__ - offsetEdge,\r\n                                                    'padding-left'\r\n                                                );\r\n\r\n                                                _tbody.append(_clone);\r\n\r\n                                                // skip all, just clone parent\r\n                                                if (_needCollapse) {\r\n                                                    _copied = true;\r\n                                                }\r\n                                            }\r\n\r\n                                            if (scope.enabledMove && scope.$class.hidden) {\r\n                                                _element.addClass(scope.$class.hidden);\r\n                                            }\r\n                                        }\r\n                                    );\r\n\r\n                                    dragElm.append(_tbody);\r\n                                } else {\r\n\r\n                                    if (!_needCollapse) {\r\n                                        _clone = _element.clone();\r\n                                    } else {\r\n                                        var _holder = _scope.getElementChilds(),\r\n                                            _swaper = angular.element(\"<swaped />\");\r\n\r\n                                        // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                                        _holder.after(angular.element(\"<holder />\"));\r\n                                        _swaper.append(_holder);\r\n\r\n                                        // Clone without Children & remove tag `<holder>`\r\n                                        _clone = _element.clone();\r\n                                        _clone.find(\"holder\").remove();\r\n\r\n                                        // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                                        _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                                        // Reset & clear all;\r\n                                        _swaper.remove();\r\n                                        _holder = null;\r\n                                    }\r\n\r\n                                    dragElm.append(_clone);\r\n                                    if (scope.enabledMove && scope.$class.hidden) {\r\n                                        _element.addClass(scope.$class.hidden);\r\n                                    }\r\n                                }\r\n\r\n                                dragElm.css(\r\n                                    {\r\n                                        'left': eventObj.pageX - pos.offsetX + scope.$callbacks.calsIndent(\r\n                                            offsetEdge + 1,\r\n                                            true,\r\n                                            true\r\n                                        )       + 'px',\r\n                                        'top':  eventObj.pageY - pos.offsetY + 'px'\r\n                                    }\r\n                                );\r\n                                // moving item with descendant\r\n                                $document.find('body').append(dragElm);\r\n                                if (scope.$callbacks.droppable()) {\r\n                                    placeElm = scope.initPlace(dragScope.$element, dragElm);\r\n\r\n                                    if (isTable) {\r\n                                        $TreeDnDHelper.replaceIndent(scope, placeElm, dragInfo.node.__level__);\r\n                                    }\r\n\r\n                                    placeElm.css('width', _width);\r\n                                }\r\n\r\n                                scope.showPlace();\r\n                                scope.targeting = true;\r\n\r\n                                if (scope.enabledStatus) {\r\n                                    scope.refreshStatus();\r\n                                    scope.setPositionStatus(e);\r\n                                }\r\n\r\n                                angular.element($document).bind('touchend', dragEndEvent);\r\n                                angular.element($document).bind('touchcancel', dragEndEvent);\r\n                                angular.element($document).bind('touchmove', dragMoveEvent);\r\n                                angular.element($document).bind('mouseup', dragEndEvent);\r\n                                angular.element($document).bind('mousemove', dragMoveEvent);\r\n                                angular.element($document).bind('mouseleave', dragCancelEvent);\r\n\r\n                                document_height = Math.max(\r\n                                    body.scrollHeight,\r\n                                    body.offsetHeight,\r\n                                    html.clientHeight,\r\n                                    html.scrollHeight,\r\n                                    html.offsetHeight\r\n                                );\r\n\r\n                                document_width = Math.max(\r\n                                    body.scrollWidth,\r\n                                    body.offsetWidth,\r\n                                    html.clientWidth,\r\n                                    html.scrollWidth,\r\n                                    html.offsetWidth\r\n                                );\r\n                            },\r\n                            dragMove = function (e) {\r\n                                if (!dragStarted) {\r\n                                    if (!dragDelaying) {\r\n                                        dragStarted = true;\r\n                                        scope.$safeApply(\r\n                                            function () {\r\n                                                scope.$callbacks.dragStart(dragInfo);\r\n                                            }\r\n                                        );\r\n                                    }\r\n                                    return;\r\n                                }\r\n\r\n                                if (dragElm) {\r\n                                    e.preventDefault();\r\n                                    if ($window.getSelection) {\r\n                                        $window.getSelection().removeAllRanges();\r\n                                    } else if ($window.document.selection) {\r\n                                        $window.document.selection.empty();\r\n                                    }\r\n\r\n                                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                                        prev,\r\n                                        leftElmPos = eventObj.pageX - pos.offsetX,\r\n                                        topElmPos = eventObj.pageY - pos.offsetY;\r\n\r\n                                    //dragElm can't leave the screen on the left\r\n                                    if (leftElmPos < 0) {\r\n                                        leftElmPos = 0;\r\n                                    }\r\n                                    //dragElm can't leave the screen on the top\r\n                                    if (topElmPos < 0) {\r\n                                        topElmPos = 0;\r\n                                    }\r\n                                    //dragElm can't leave the screen on the bottom\r\n                                    if ((topElmPos + 10) > document_height) {\r\n                                        topElmPos = document_height - 10;\r\n                                    }\r\n                                    //dragElm can't leave the screen on the right\r\n                                    if ((leftElmPos + 10) > document_width) {\r\n                                        leftElmPos = document_width - 10;\r\n                                    }\r\n\r\n                                    dragElm.css(\r\n                                        {\r\n                                            'left': leftElmPos + scope.$callbacks.calsIndent(\r\n                                                offsetEdge + 1,\r\n                                                true,\r\n                                                true\r\n                                            )       + 'px',\r\n                                            'top':  topElmPos + 'px'\r\n                                        }\r\n                                    );\r\n\r\n                                    if (scope.enabledStatus) {\r\n                                        scope.setPositionStatus(e);\r\n                                    }\r\n\r\n                                    var top_scroll = window.pageYOffset || $window.document.documentElement.scrollTop,\r\n                                        bottom_scroll = top_scroll + (window.innerHeight || $window.document.clientHeight || $window.document.clientHeight);\r\n                                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= document_height) {\r\n                                        window.scrollBy(0, 10);\r\n                                    }\r\n                                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                                    if (top_scroll > eventObj.pageY) {\r\n                                        window.scrollBy(0, -10);\r\n                                    }\r\n\r\n                                    $TreeDnDHelper.positionMoved(e, pos, firstMoving);\r\n\r\n                                    if (firstMoving) {\r\n                                        firstMoving = false;\r\n                                        return;\r\n                                    }\r\n                                    // check if add it as a child node first\r\n\r\n                                    var targetX = eventObj.pageX - $window.document.body.scrollLeft,\r\n                                        targetY = eventObj.pageY - (window.pageYOffset || $window.document.documentElement.scrollTop),\r\n\r\n                                        targetElm = null,\r\n                                        targetScope = null,\r\n                                        targetBefore = null,\r\n                                        targetOffset = null,\r\n                                        tagName = null,\r\n                                        isTable = false,\r\n                                        isChanged = true,\r\n                                        isVeritcal = true,\r\n                                        isEmpty = false,\r\n                                        isSwapped = false,\r\n                                        _scope = null,\r\n                                        _target = null,\r\n                                        _move = dragInfo.move,\r\n                                        _level = 1,\r\n                                        _drag = dragInfo.node,\r\n                                        _drop = dragInfo.drop,\r\n                                        treeScope = dragInfo.target,\r\n                                        fnSwapTree = null,\r\n                                        isHolder = false,\r\n                                        fnPlaceHolder = function () {\r\n                                            if (placeElm) {\r\n                                                var _offset = $TreeDnDHelper.offset(placeElm);\r\n                                                if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                                                    _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                                                ) {\r\n                                                    isHolder = true;\r\n                                                } else {\r\n                                                    isHolder = false;\r\n                                                }\r\n                                            }\r\n                                        };\r\n                                    fnPlaceHolder();\r\n                                    if (!isHolder) {\r\n\r\n                                        // when using elementFromPoint() inside an iframe, you have to call\r\n                                        // elementFromPoint() twice to make sure IE8 returns the correct value\r\n                                        // $window.document.elementFromPoint(targetX, targetY);\r\n\r\n                                        targetElm = angular.element(\r\n                                            $window.document.elementFromPoint(\r\n                                                targetX,\r\n                                                targetY\r\n                                            )\r\n                                        );\r\n\r\n                                        targetScope = targetElm.scope();\r\n                                        if (!targetScope) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        fnSwapTree = function () {\r\n                                            treeScope = targetScope.getScopeTree();\r\n                                            _target = dragInfo.target;\r\n                                            if (dragInfo.target !== treeScope) {\r\n                                                if (treeScope.$callbacks.droppable()) {\r\n                                                    // Replace by place-holder new\r\n                                                    _target.hidePlace();\r\n                                                    _target.targeting = false;\r\n                                                    treeScope.targeting = true;\r\n\r\n                                                    dragInfo.target = treeScope;\r\n                                                    placeElm = treeScope.initPlace(targetScope.$element, dragElm);\r\n\r\n                                                    _target = null;\r\n                                                    isSwapped = true;\r\n                                                } else {\r\n                                                    // Not allowed Drop Item\r\n                                                    return false;\r\n                                                }\r\n                                            }\r\n                                            return true;\r\n                                        };\r\n\r\n                                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                                            targetScope = targetScope.getScopeNode();\r\n                                            if (!fnSwapTree()) {\r\n                                                return;\r\n                                            }\r\n                                        } else {\r\n                                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                                if (targetScope.tree_nodes) {\r\n                                                    if (targetScope.tree_nodes.length === 0) {\r\n                                                        if (!fnSwapTree()) {\r\n                                                            return;\r\n                                                        }\r\n                                                        // Empty\r\n                                                        isEmpty = true;\r\n                                                    }\r\n                                                } else {\r\n                                                    return;\r\n                                                }\r\n                                            } else {\r\n                                                return;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (pos.dirAx && !isSwapped || isHolder) {\r\n                                        isVeritcal = false;\r\n                                        targetScope = dragInfo.scope;\r\n                                    }\r\n\r\n                                    if (!targetScope.$element && !targetScope) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    if (isEmpty) {\r\n                                        tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                                        isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n\r\n                                        _move.parent = null;\r\n                                        _move.pos = 0;\r\n\r\n                                        _drop = null;\r\n                                    } else {\r\n                                        tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                                        isTable = (tagName === 'tr' || tagName === 'tbody' || tagName === 'td');\r\n\r\n                                        // move vertical\r\n                                        if (isVeritcal) {\r\n                                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                                            if (targetScope.horizontal && !isTable) {\r\n                                                targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                                            } else {\r\n                                                if (isTable) {\r\n                                                    targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                                } else {\r\n                                                    var _height = $TreeDnDHelper.height(targetElm)\r\n                                                    if (targetScope.getElementChilds()) {\r\n                                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                                    }\r\n\r\n                                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                                        return;\r\n                                                    }\r\n\r\n                                                    targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                                }\r\n                                            }\r\n\r\n                                            _target = targetScope.getData();\r\n                                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                                            if (targetBefore) {\r\n                                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                                _move.parent = _parent;\r\n                                                _move.pos = (angular.isUndefinedOrNull(_prev)) ? 0 : _prev.__index__ + 1;\r\n\r\n                                                _drop = _prev;\r\n                                            } else {\r\n                                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n\r\n                                                    _move.parent = _target;\r\n                                                    _move.pos = 0;\r\n                                                    _drop = null;\r\n                                                } else {\r\n\r\n                                                    _move.parent = _target;\r\n                                                    _move.pos = _target.__index__ + 1;\r\n\r\n                                                    _drop = _target;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            // move horizontal\r\n                                            if (pos.dirAx && pos.distAxX >= treeScope.dragBorder) {\r\n                                                pos.distAxX = 0;\r\n                                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                                if (pos.distX > 0) {\r\n                                                    _parent = _drop;\r\n                                                    if (!_parent) {\r\n                                                        if (_move.pos - 1 >= 0) {\r\n                                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                                        } else {\r\n                                                            return;\r\n                                                        }\r\n                                                    }\r\n\r\n                                                    if (dragInfo.drag === dragInfo.target && _parent === _drag && scope.enabledMove) {\r\n                                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                                    }\r\n\r\n                                                    if (_parent && _parent.__visible__) {\r\n                                                        var _len = _parent.__children__.length;\r\n\r\n                                                        _move.parent = _parent;\r\n                                                        _move.pos = _len;\r\n\r\n                                                        if (_len > 0) {\r\n                                                            _drop = _parent.__children__[_len - 1];\r\n                                                        } else {\r\n                                                            _drop = null;\r\n                                                        }\r\n                                                    } else {\r\n                                                        // Not changed\r\n                                                        return;\r\n                                                    }\r\n                                                } else if (pos.distX < 0) {\r\n                                                    _target = _move.parent;\r\n                                                    if (_target &&\r\n                                                        (_target.__children__.length === 0 ||\r\n                                                         _target.__children__.length - 1 < _move.pos ||\r\n                                                         (_target.__children__.length - 1 === _drag.__index__ &&\r\n                                                          _target.__index__real__ === _drag.__parent_real__ && scope.enabledMove))\r\n                                                    ) {\r\n                                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                                        _move.parent = _parent;\r\n                                                        _move.pos = _target.__index__ + 1;\r\n\r\n                                                        _drop = _target;\r\n                                                    } else {\r\n                                                        // Not changed\r\n                                                        return;\r\n                                                    }\r\n                                                } else {\r\n                                                    return;\r\n                                                }\r\n                                            } else {\r\n                                                // limited\r\n                                                return;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (dragInfo.drag === dragInfo.target && _move.parent &&\r\n                                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                                        _drag.__index__ === _move.pos\r\n                                    ) {\r\n                                        isChanged = false;\r\n                                    }\r\n\r\n                                    if (treeScope.$callbacks.accept(dragInfo, _move, isChanged)) {\r\n                                        dragInfo.move = _move;\r\n                                        dragInfo.drop = _drop;\r\n                                        dragInfo.changed = isChanged;\r\n                                        dragInfo.scope = targetScope;\r\n\r\n                                        if (isTable) {\r\n                                            _level = (angular.isUndefinedOrNull(_move.parent)) ? 1 : _move.parent.__level__ + 1;\r\n\r\n                                            $TreeDnDHelper.replaceIndent(\r\n                                                treeScope,\r\n                                                placeElm,\r\n                                                _level\r\n                                            );\r\n\r\n                                            if (_drop) {\r\n                                                var _parent = (_move.parent ? _move.parent.__children__ : null ) || dragInfo.target.treeData;\r\n\r\n                                                if (_drop.__index__ < _parent.length - 1) {\r\n                                                    // Find fast\r\n                                                    _drop = _parent[_drop.__index__ + 1];\r\n                                                    _scope = dragInfo.target.getScope(_drop);\r\n                                                    _scope.$element[0].parentNode.insertBefore(\r\n                                                        placeElm[0],\r\n                                                        _scope.$element[0]\r\n                                                    );\r\n                                                } else {\r\n                                                    _target = dragInfo.target.tree.get_last_descendant(_drop);\r\n                                                    _scope = dragInfo.target.getScope(_target);\r\n                                                    _scope.$element.after(placeElm);\r\n                                                }\r\n                                            } else {\r\n                                                _scope = dragInfo.target.getScope(_move.parent);\r\n                                                if (_scope) {\r\n                                                    if (_move.parent) {\r\n                                                        _scope.$element.after(placeElm);\r\n\r\n                                                    } else {\r\n                                                        _scope.getElementChilds().prepend(placeElm);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            _scope = dragInfo.target.getScope(_drop || _move.parent);\r\n\r\n                                            if (_drop) {\r\n                                                _scope.$element.after(placeElm);\r\n                                            } else {\r\n                                                _scope.getElementChilds().prepend(placeElm);\r\n                                            }\r\n                                        }\r\n\r\n                                        treeScope.showPlace();\r\n\r\n                                        scope.$safeApply(\r\n                                            function () {\r\n                                                scope.$callbacks.dragMove(dragInfo);\r\n                                            }\r\n                                        );\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            dragEnd = function (e) {\r\n                                e.preventDefault();\r\n                                if (dragElm) {\r\n                                    var _passed = false,\r\n                                        _scope = scope.getScope(dragInfo.node),\r\n                                        tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                        _isTable = (tagName === 'tr'),\r\n                                        _element = _scope.$element;\r\n\r\n                                    scope.$safeApply(\r\n                                        function () {\r\n                                            _passed = scope.$callbacks.beforeDrop(dragInfo);\r\n                                        }\r\n                                    );\r\n\r\n                                    // rollback all\r\n                                    if (_isTable) {\r\n                                        scope.for_all_descendants(\r\n                                            dragInfo.node, function (_node) {\r\n                                                _scope = scope.getScope(_node);\r\n                                                _element = _scope.$element;\r\n\r\n                                                if (_scope.$class.hidden) {\r\n                                                    _element.removeClass(scope.$class.hidden);\r\n                                                }\r\n                                            }\r\n                                        );\r\n                                    } else {\r\n                                        if (scope.$class.hidden) {\r\n                                            _element.removeClass(scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                    dragElm.remove();\r\n                                    dragElm = null;\r\n\r\n                                    if (scope.enabledStatus) {\r\n                                        scope.hideStatus();\r\n                                    }\r\n\r\n                                    var _status = false;\r\n                                    if (scope.$$apply) {\r\n                                        scope.$safeApply(\r\n                                            function () {\r\n                                                _status = scope.$callbacks.dropped(\r\n                                                    dragInfo,\r\n                                                    _passed,\r\n                                                    scope.enabledMove\r\n                                                );\r\n                                            }\r\n                                        );\r\n                                    } else {\r\n                                        bindDrag();\r\n                                    }\r\n\r\n                                    scope.$safeApply(\r\n                                        function () {\r\n                                            scope.$callbacks.dragStop(dragInfo, _status);\r\n                                        }\r\n                                    );\r\n\r\n                                    dragInfo.target.hidePlace();\r\n                                    dragInfo.target.targeting = false;\r\n\r\n                                    dragInfo = null;\r\n                                    scope.$$apply = false;\r\n                                    scope.setDragging(null);\r\n                                }\r\n                                angular.element($document).unbind('touchend', dragEndEvent); // Mobile\r\n                                angular.element($document).unbind('touchcancel', dragEndEvent); // Mobile\r\n                                angular.element($document).unbind('touchmove', dragMoveEvent); // Mobile\r\n                                angular.element($document).unbind('mouseup', dragEndEvent);\r\n                                angular.element($document).unbind('mousemove', dragMoveEvent);\r\n                                angular.element($window.document.body).unbind('mouseleave', dragCancelEvent);\r\n                            },\r\n                            dragStartEvent = function (e) {\r\n                                if (scope.$callbacks.draggable()) {\r\n                                    dragStart(e);\r\n                                }\r\n                            },\r\n                            dragMoveEvent = function (e) {\r\n                                dragMove(e);\r\n                            },\r\n                            dragEndEvent = function (e) {\r\n                                scope.$$apply = true;\r\n                                scope.dragEnd(e);\r\n                            },\r\n                            dragCancelEvent = function (e) {\r\n                                scope.dragEnd(e);\r\n                            },\r\n                            bindDrag = function () {\r\n                                element.bind(\r\n                                    'touchstart mousedown', function (e) {\r\n                                        dragDelaying = true;\r\n                                        dragStarted = false;\r\n                                        dragStartEvent(e);\r\n                                        dragTimer = $timeout(\r\n                                            function () {\r\n                                                dragDelaying = false;\r\n                                            }, scope.dragDelay\r\n                                        );\r\n                                    }\r\n                                );\r\n                                element.bind(\r\n                                    'touchend touchcancel mouseup', function () {\r\n                                        $timeout.cancel(dragTimer);\r\n                                    }\r\n                                );\r\n                            },\r\n                            keydownHandler = function (e) {\r\n                                if (e.keyCode === 27) {\r\n                                    if (scope.enabledStatus) {\r\n                                        scope.hideStatus();\r\n                                    }\r\n\r\n                                    scope.$$apply = false;\r\n                                    scope.dragEnd(e);\r\n                                } else {\r\n                                    if (scope.enabledHotkey && e.shiftKey) {\r\n                                        scope.enableMove(true);\r\n                                        if (scope.enabledStatus) {\r\n                                            scope.refreshStatus();\r\n                                        }\r\n\r\n                                        if (!dragInfo) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        var _scope = scope.getScope(dragInfo.node),\r\n                                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                            _element = _scope.$element;\r\n\r\n                                        if (tagName === 'tr') {\r\n                                            scope.for_all_descendants(\r\n                                                dragInfo.node, function (_node) {\r\n                                                    _scope = scope.getScope(_node);\r\n                                                    _element = _scope.$element;\r\n\r\n                                                    if (scope.$class.hidden) {\r\n                                                        _element.addClass(scope.$class.hidden);\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                        } else {\r\n                                            if (scope.$class.hidden) {\r\n                                                _element.addClass(scope.$class.hidden);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            keyupHandler = function (e) {\r\n                                if (scope.enabledHotkey && !e.shiftKey) {\r\n                                    scope.enableMove(false);\r\n\r\n                                    if (scope.enabledStatus) {\r\n                                        scope.refreshStatus();\r\n                                    }\r\n\r\n                                    if (!dragInfo) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    var _scope = scope.getScope(dragInfo.node),\r\n                                        tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                        _element = _scope.$element;\r\n\r\n                                    if (tagName === 'tr') {\r\n                                        scope.for_all_descendants(\r\n                                            dragInfo.node, function (_node) {\r\n\r\n                                                _scope = scope.getScope(_node);\r\n                                                _element = _scope.$element;\r\n\r\n                                                if (scope.$class.hidden) {\r\n                                                    _element.removeClass(scope.$class.hidden);\r\n                                                }\r\n                                            }\r\n                                        );\r\n                                    } else {\r\n                                        if (scope.$class.hidden) {\r\n                                            _element.removeClass(scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            };\r\n\r\n                        scope.dragEnd = function (e) {\r\n                            dragEnd(e);\r\n                        };\r\n\r\n                        bindDrag();\r\n\r\n                        angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                        angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                        //unbind handler that retains scope\r\n                        scope.$on(\r\n                            '$destroy', function () {\r\n                                angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                                angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                                if (scope.statusElm) {\r\n                                    scope.statusElm.remove();\r\n                                }\r\n\r\n                                if (scope.placeElm) {\r\n                                    scope.placeElm.remove();\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        scope.$safeApply(\r\n                            function () {\r\n                                if ($_Template.length > 0) {\r\n                                    element.append($compile($_Template)(scope));\r\n                                } else {\r\n                                    $http.get(\r\n                                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                        {cache: $templateCache}\r\n                                    ).success(\r\n                                        function (data) {\r\n                                            element.append($compile(data.trim())(scope));\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n                        );\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            \"\" + \"<table ng-class=\\\"$tree_class\\\">\"\r\n            + \"    <thead>\"\r\n            + \"  <tr>\"\r\n            + \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\"\r\n            + \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\"\r\n            + \"        </th>\"\r\n            + \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\"\r\n            + \"         {{col.displayName || col.field}}\"\r\n            + \"     </th>\"\r\n            + \"    </tr>\"\r\n            + \"    </thead>\"\r\n            + \" <tbody tree-dnd-nodes=\\\"tree_nodes\\\">\"\r\n            + \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\"\r\n            + \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\"\r\n            + \"        <td ng-if=\\\"!expandingProperty.template\\\" tree-dnd-node-handle\"\r\n            + \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\"\r\n            + \"          ng-class=\\\"expandingProperty.cellClass\\\"\"\r\n            + \"            compile=\\\"expandingProperty.cellTemplate\\\">\"\r\n            + \"              <a data-nodrag>\"\r\n            + \"                  <i ng-class=\\\"$icon_class\\\" ng-click=\\\"toggleExpand(node)\\\"\"\r\n            + \"                     class=\\\"tree-icon\\\"></i>\"\r\n            + \"              </a>\"\r\n            + \"             {{node[expandingProperty.field] || node[expandingProperty]}}\"\r\n            + \"       </td>\"\r\n            + \"        <td ng-if=\\\"expandingProperty.template\\\" compile=\\\"expandingProperty.template\\\"></td>\"\r\n            + \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\"\r\n            + \"            compile=\\\"col.cellTemplate\\\">\"\r\n            + \"            {{node[col.field]}}\"\r\n            + \"       </td>\"\r\n            + \"    </tr>\"\r\n            + \"    </tbody>\"\r\n            + \"</table>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"],"sourceRoot":"/source/"}