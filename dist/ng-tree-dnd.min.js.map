{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","isDefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","directive","$compile","restrict","link","scope","element","attrs","$watch","compile","new_val","isFunction","html","append","compileReplace","replaceWith","$type","$class","addClass","$parse","$http","$templateCache","controller","$scope","$element","$attrs","$node_class","_enabledDragDrop","dragEnabled","dropEnabled","keyNode","treeDndNode","setScope","getElementChilds","querySelector","getData","getScopeNode","replace","$nodes_class","$injector","$timeout","$window","$document","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","indent","indent_plus","indent_unit","$tree_class","primary_key","colDefinitions","$globals","treeData","tree_nodes","copy","extend","iconExpand","iconCollapse","iconLeaf","for_all_descendants","fn","_i","_len","_nodes","__children__","length","getLastDescendant","last_child","n","selected_node","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","__expanded__","getHash","__parent__","__uid__","accept","dragInfo","moveTo","isChanged","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","beforeDrop","event","changeKey","_key","Math","random","__selected__","clone","_this","this","remove","parent","splice","__index__","add","pos","push","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","dropped","info","pass","isMove","changed","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","target","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","getMove","getCopy","attr","find","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","targeting","getPrevSibling","_index","__parent_real__","getNode","index","_hash","getScope","initPlace","dragElm","tagName","isTable","prop","toLowerCase","document","createElement","_len_down","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","$safeApply","phase","$root","$$phase","$apply","_fnInitFilter","_fnInitOrderBy","_fnGetControl","w","i","len","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","getExpandOn","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","field","do_f","root","parent_real","visible","_icon","_index_real","_dept","_hashKey","isArray","expandLevel","__index_real__","__level__","__icon__","__icon_class__","__visible__","__hashKey__","__dept__","reload_data","oData","_data","_tree_nodes","expandOn","columnDefs","orderBy","filter","filterOptions","_offset","_max","_min","_deptTotal","abs","_defaultFilterOption","showParent","showChild","beginAnd","check_exist_attr","existAttr","isAnd","for_each_attrs","exist","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","indexOf","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","trim","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","tElement","$_Template","_element","_fnInitDrag","ready","templateUrl","getPath","cache","success","data","factory","_$initConvert","line2tree","parentKey","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","width","offset","boundingClientRect","getBoundingClientRect","pageYOffset","body","scrollTop","documentElement","pageXOffset","scrollLeft","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","moving","replaceIndent","children","_fnget","name","has","temp","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","_filter","_state","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","check","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","isObject","_fnMain","_options","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","_$scope","preventDefault","offsetEdge","_width","_scope","_needCollapse","_copied","_tbody","_holder","_swaper","after","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","clientHeight","document_width","scrollWidth","offsetWidth","clientWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","_height","_prev","dragBorder","prepend","_fnDragEnd","_isTable","_status","$$apply","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","cancel","_fnKeydownHandler","keyCode","shiftKey","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put","join","call"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.4\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = function (val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    angular.isDefined = function (val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                if (angular.isFunction(element.empty)) {\r\n                                    element.empty()\r\n                                } else {\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                element.replaceWith($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.$class.handle) {\r\n                    element.addClass(scope.$class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', [\r\n        '$parse', '$http', '$templateCache', '$compile', function ($parse, $http, $templateCache, $compile) {\r\n            return {\r\n                restrict:   'A',\r\n                controller: function ($scope, $element, $attrs) {\r\n                    $scope.$node_class = '';\r\n\r\n                    if ($scope.$class.node) {\r\n                        $element.addClass($scope.$class.node);\r\n                        $scope.$node_class = $scope.$class.node;\r\n                    }\r\n\r\n                    var _enabledDragDrop = (typeof $scope.dragEnabled === 'boolean' || typeof $scope.dropEnabled === 'boolean');\r\n\r\n                    var keyNode = $attrs.treeDndNode;\r\n\r\n                    if (_enabledDragDrop) {\r\n                        $scope.setScope($scope, $scope[keyNode]);\r\n                    }\r\n\r\n                    $scope.getElementChilds = function () {\r\n                        return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                    };\r\n\r\n                    if (_enabledDragDrop) {\r\n\r\n                        $scope.$element = $element;\r\n                        $scope.$type = 'TreeDnDNode';\r\n\r\n                        $scope.getData = function () {\r\n                            return $scope[keyNode];\r\n                        };\r\n                    }\r\n\r\n                    $scope.getScopeNode = function () {\r\n                        return $scope;\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodes', ['$parse',function ($parse) {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$nodes_class = '';\r\n                scope.$type = 'TreeDnDNodes';\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }]\r\n).directive(\r\n    'treeDnd', [\r\n        '$injector', '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin',\r\n        function ($injector, $timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin) {\r\n            return {\r\n                restrict:   'E',\r\n                scope:      true,\r\n                replace:    true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.$tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n\r\n\r\n                        $scope.$type = 'TreeDnD';\r\n                        // $scope.enabledFilter = null;\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.$class = {};\r\n\r\n                        $scope.treeData = [];\r\n                        $scope.tree_nodes = [];\r\n\r\n\r\n                        $scope.$class = angular.copy($TreeDnDClass);\r\n                        angular.extend(\r\n                            $scope.$class.icon, {\r\n                                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                            }\r\n                        );\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        $scope.getLastDescendant = function (node) {\r\n                            var last_child, n;\r\n                            if (!node) {\r\n                                node = $scope.tree ? $scope.tree.selected_node : false;\r\n                            }\r\n                            if (node === false) {\r\n                                return false;\r\n                            }\r\n                            n = node.__children__.length;\r\n                            if (n === 0) {\r\n                                return node;\r\n                            } else {\r\n                                last_child = node.__children__[n - 1];\r\n                                return $scope.getLastDescendant(last_child);\r\n                            }\r\n                        };\r\n\r\n                        $scope.getElementChilds = function () {\r\n                            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n                        };\r\n\r\n                        $scope.onClick = function (node) {\r\n                            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                                // We want to detach from Angular's digest cycle so we can\r\n                                // independently measure the time for one cycle.\r\n                                setTimeout(\r\n                                    function () {\r\n                                        $scope.tree.on_click(node);\r\n                                    }, 0\r\n                                );\r\n                            }\r\n                        };\r\n\r\n                        $scope.onSelect = function (node) {\r\n                            if (angular.isDefined($scope.tree)) {\r\n                                if (node !== $scope.tree.selected_node) {\r\n                                    $scope.tree.select_node(node);\r\n                                }\r\n\r\n                                if (angular.isFunction($scope.tree.on_select)) {\r\n                                    setTimeout(\r\n                                        function () {\r\n                                            $scope.tree.on_select(node);\r\n                                        }, 0\r\n                                    );\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        var passedExpand, _clone;\r\n                        $scope.toggleExpand = function (node, fnCallback) {\r\n                            passedExpand = true;\r\n                            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                                passedExpand = false;\r\n                            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                                passedExpand = false;\r\n                            }\r\n\r\n                            if (passedExpand) {\r\n                                if (node.__children__.length > 0) {\r\n                                    node.__expanded__ = !node.__expanded__;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.$callbacks = {\r\n                            for_all_descendants: $scope.for_all_descendants,\r\n                            expand:              function (node) {\r\n                                return true;\r\n                            },\r\n                            accept:              function (dragInfo, moveTo, isChanged) {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:           function () {\r\n                                return $scope.dropEnabled === true;\r\n                            },\r\n                            draggable:           function () {\r\n                                return $scope.dragEnabled === true;\r\n                            },\r\n                            beforeDrop:          function (event) {\r\n                                return true;\r\n                            },\r\n                            changeKey:           function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:               function (node, _this) {\r\n                                _clone = angular.copy(node);\r\n                                this.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:              function (node, parent, _this) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:                 function (node, pos, parent, _this) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n                            $scope.placeElm = null;\r\n                            //                            $scope.dragBorder = 30;\r\n                            $scope.dragEnabled = null;\r\n                            $scope.dropEnabled = null;\r\n                            $scope.horizontal = null;\r\n\r\n                            if ($attrs.enableDrag) {\r\n\r\n                                $scope.dragDelay = 0;\r\n                                $scope.enabledMove = true;\r\n                                $scope.statusMove = true;\r\n                                $scope.enabledHotkey = false;\r\n                                $scope.enabledCollapse = null;\r\n                                $scope.statusElm = null;\r\n                                $scope.dragging = null;\r\n\r\n                                angular.extend(\r\n                                    $scope.$callbacks, {\r\n                                        beforeDrag: function (scopeDrag) {\r\n                                            return true;\r\n                                        },\r\n                                        dragStop:   function (event, skiped) {},\r\n                                        dropped:    function (info, pass, isMove) {\r\n                                            if (!info) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            if (!info.changed && isMove) {\r\n                                                return false;\r\n                                            }\r\n                                            var _node = info.node,\r\n                                                _nodeAdd = null,\r\n                                                _move = info.move,\r\n                                                _parent = null,\r\n                                                _parentRemove = (info.parent || info.drag.treeData),\r\n                                                _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                                if (isMove) {\r\n                                                    _parent = _parentRemove;\r\n                                                    if (angular.isDefined(_parent.__children__)) {\r\n                                                        _parent = _parent.__children__;\r\n                                                    }\r\n\r\n                                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                                        _node,\r\n                                                        _parent,\r\n                                                        info.drag.$callbacks\r\n                                                    );\r\n                                                } else {\r\n                                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                                }\r\n\r\n                                                // if node dragging change index in sample node parent\r\n                                                // and index node decrement\r\n                                                if (isMove &&\r\n                                                    info.drag === info.target &&\r\n                                                    _parentRemove === _parentAdd &&\r\n                                                    _move.pos >= info.node.__index__) {\r\n                                                    _move.pos--;\r\n                                                }\r\n\r\n                                                _parent = _parentAdd;\r\n                                                if (_parent.__children__) {\r\n                                                    _parent = _parent.__children__;\r\n                                                }\r\n\r\n                                                info.target.$callbacks.add(\r\n                                                    _nodeAdd,\r\n                                                    _move.pos,\r\n                                                    _parent,\r\n                                                    info.drag.$callbacks\r\n                                                );\r\n\r\n                                                return true;\r\n                                            }\r\n\r\n                                            return false;\r\n                                        },\r\n                                        dragStart:  function (event) {},\r\n                                        dragMove:   function (event) {}\r\n                                    }\r\n                                );\r\n\r\n                                $scope.setDragging = function (dragInfo) {\r\n                                    $scope.dragging = dragInfo;\r\n                                };\r\n\r\n                                $scope.enableMove = function (val) {\r\n                                    if (typeof val === \"boolean\") {\r\n                                        $scope.enabledMove = val;\r\n                                    } else {\r\n                                        $scope.enabledMove = true;\r\n                                    }\r\n                                };\r\n\r\n                                if ($attrs.enableStatus) {\r\n                                    $scope.enabledStatus = false;\r\n\r\n                                    $scope.hideStatus = function () {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.refreshStatus = function () {\r\n                                        if (!$scope.dragging) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        if ($scope.enabledStatus) {\r\n                                            var statusElmOld = $scope.statusElm;\r\n                                            if ($scope.enabledMove) {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                            } else {\r\n                                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                            }\r\n\r\n                                            if (statusElmOld !== $scope.statusElm) {\r\n                                                if (statusElmOld) {\r\n                                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                                    statusElmOld.remove();\r\n                                                }\r\n                                                $document.find('body').append($scope.statusElm);\r\n\r\n                                            }\r\n\r\n                                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                                        }\r\n                                    };\r\n\r\n                                    $scope.setPositionStatus = function (e) {\r\n                                        if ($scope.statusElm) {\r\n                                            $scope.statusElm.css(\r\n                                                {\r\n                                                    'left':    e.pageX + 10 + 'px',\r\n                                                    'top':     e.pageY + 15 + 'px',\r\n                                                    'z-index': 9999\r\n                                                }\r\n                                            );\r\n                                            $scope.statusElm.addClass($scope.$class.status);\r\n                                        }\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            $scope.targeting = false;\r\n\r\n                            $scope.getPrevSibling = function (node) {\r\n                                if (node && node.__index__ > 0) {\r\n                                    var _parent, _index = node.__index__ - 1;\r\n\r\n                                    if (angular.isDefined(node.__parent_real__)) {\r\n                                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                        return _parent.__children__[_index];\r\n                                    }\r\n                                    return $scope.treeData[_index];\r\n\r\n                                }\r\n                                return null;\r\n                            };\r\n\r\n                            $scope.getNode = function (index) {\r\n                                if (angular.isUndefinedOrNull(index)) {\r\n                                    return null;\r\n                                }\r\n                                return $scope.tree_nodes[index];\r\n                            };\r\n\r\n                            $scope.setScope = function (scope, node) {\r\n                                var _hash = $scope.getHash(node);\r\n                                if ($scope.$globals[_hash] !== scope) {\r\n                                    $scope.$globals[_hash] = scope;\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScope = function (node) {\r\n                                if (node) {\r\n                                    return $scope.$globals[$scope.getHash(node)];\r\n                                }\r\n                                return $scope;\r\n\r\n                            };\r\n\r\n                            $scope.initPlace = function (element, dragElm) {\r\n\r\n                                var tagName = null,\r\n                                    isTable = false;\r\n\r\n                                if (element) {\r\n                                    tagName = element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tr' || tagName === 'td');\r\n                                } else {\r\n                                    tagName = $scope.getElementChilds().prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tbody' || tagName === 'table');\r\n                                }\r\n\r\n                                if (!$scope.placeElm) {\r\n\r\n                                    if (isTable) {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                        var _len_down = $scope.colDefinitions.length;\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.$class.empty)\r\n                                                .addClass('indented')\r\n                                                .addClass($scope.$class.place)\r\n                                        );\r\n                                        while (_len_down-- > 0) {\r\n                                            $scope.placeElm.append(\r\n                                                angular.element($window.document.createElement('td'))\r\n                                                    .addClass($scope.$class.empty)\r\n                                                    .addClass($scope.$class.place)\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                            .addClass($scope.$class.empty)\r\n                                            .addClass($scope.$class.place);\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (dragElm) {\r\n                                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                                }\r\n\r\n                                if (element) {\r\n                                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                                } else {\r\n                                    $scope.getElementChilds().append($scope.placeElm);\r\n                                }\r\n\r\n                                return $scope.placeElm;\r\n                            };\r\n\r\n                            $scope.hidePlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.showPlace = function () {\r\n                                if ($scope.placeElm) {\r\n                                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.getScopeTree = function () {\r\n                                return $scope;\r\n                            };\r\n\r\n                        }\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                        var getExpandOn = function () {\r\n                                if ($scope.treeData && $scope.treeData.length) {\r\n                                    var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                        _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                        _len,\r\n                                        i;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            $scope.expandingProperty = _keys[i];\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    // Auto get first\r\n                                    if (angular.isUndefinedOrNull($scope.expandingProperty)) {\r\n                                        $scope.expandingProperty = _keys[0];\r\n                                    }\r\n\r\n                                }\r\n                            },\r\n                            getColDefs = function () {\r\n                                // Auto get Defs except attribute __level__ ....\r\n                                if ($scope.treeData.length) {\r\n                                    var _col_defs = [], _firstNode = $scope.treeData[0],\r\n                                        _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + $scope.expandingProperty + \"$)\"),\r\n                                        _keys = Object.keys(_firstNode),\r\n                                        i, _len;\r\n                                    // Auto get first field with type is string;\r\n                                    for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                        if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                            _col_defs.push(\r\n                                                {\r\n                                                    field: _keys[i]\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                    $scope.colDefinitions = _col_defs;\r\n                                }\r\n                            },\r\n                            _fnInitFilter,\r\n                            _fnInitOrderBy,\r\n                            _fnGetControl,\r\n                            do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                                var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                                if (!angular.isArray(node.__children__)) {\r\n                                    node.__children__ = [];\r\n                                }\r\n\r\n                                node.__parent_real__ = parent_real;\r\n                                node.__parent__ = parent;\r\n                                _len = node.__children__.length;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                    node.__expanded__ = level < $scope.expandLevel;\r\n                                }\r\n\r\n                                if (_len === 0) {\r\n                                    _icon = -1;\r\n                                } else {\r\n                                    if (node.__expanded__) {\r\n                                        _icon = 1;\r\n                                    } else {\r\n                                        _icon = 0;\r\n                                    }\r\n                                }\r\n                                // Insert item vertically\r\n                                _index_real = root.length;\r\n                                node.__index__ = index;\r\n                                node.__index_real__ = _index_real;\r\n                                node.__level__ = level;\r\n                                node.__icon__ = _icon;\r\n                                node.__icon_class__ = $scope.$class.icon[_icon];\r\n                                node.__visible__ = !!visible;\r\n\r\n                                if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                    node.__uid__ = \"\" + Math.random();\r\n                                }\r\n\r\n                                root.push(node);\r\n\r\n                                // Check node children\r\n                                _dept = 1;\r\n                                if (_len > 0) {\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _dept += do_f(\r\n                                            root,\r\n                                            node.__children__[_i],\r\n                                            ($scope.primary_key === '__uid__') ? node.__uid__ : node[$scope.primary_key],\r\n                                            _index_real,\r\n                                            level + 1,\r\n                                            visible && node.__expanded__,\r\n                                            _i\r\n                                        );\r\n                                    }\r\n                                }\r\n\r\n                                _hashKey = $scope.getHash(node);\r\n\r\n                                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                    node.__hashKey__ = _hashKey;\r\n                                    // delete($scope.$globals[_hashKey]);\r\n                                }\r\n\r\n                                node.__dept__ = _dept;\r\n\r\n                                return _dept;\r\n                            },\r\n                            reload_data = function (oData) {\r\n                                var _data,\r\n                                    _len,\r\n                                    _tree_nodes = [];\r\n                                if (angular.isDefined(oData)) {\r\n                                    if (!angular.isArray(oData) || oData.length === 0) {\r\n                                        return [];\r\n                                    } else {\r\n                                        _data = oData;\r\n                                    }\r\n                                } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\r\n                                    return [];\r\n                                } else {\r\n                                    _data = $scope.treeData;\r\n                                }\r\n\r\n                                if (!$attrs.expandOn) {\r\n                                    getExpandOn();\r\n                                }\r\n\r\n                                if (!$attrs.columnDefs) {\r\n                                    getColDefs();\r\n                                }\r\n\r\n                                if (angular.isDefined($scope.orderBy)) {\r\n                                    if (!angular.isFunction(_fnInitOrderBy)) {\r\n                                        _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitOrderBy)) {\r\n                                        _data = _fnInitOrderBy(_data, $scope.orderBy);\r\n                                    }\r\n                                }\r\n\r\n                                if (angular.isDefined($scope.filter)) {\r\n                                    if (!angular.isFunction(_fnInitFilter)) {\r\n                                        _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                                    }\r\n\r\n                                    if (angular.isFunction(_fnInitFilter)) {\r\n                                        _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\r\n                                    }\r\n                                }\r\n\r\n                                _len = _data.length;\r\n                                if (_len > 0) {\r\n                                    var _i,\r\n                                        _offset, _max, _min, _keys,\r\n                                        _deptTotal = 0;\r\n\r\n                                    for (_i = 0; _i < _len; _i++) {\r\n                                        _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                    }\r\n\r\n                                    // clear Element Empty\r\n                                    _keys = Object.keys($scope.$globals);\r\n                                    _len = $scope.$globals.length;\r\n                                    _offset = _len - _deptTotal;\r\n\r\n                                    if (_offset !== 0) {\r\n                                        _max = _len - _offset;\r\n                                        _min = _max - Math.abs(_offset);\r\n                                        for (_i = _min; _i < _max; _i++) {\r\n                                            delete($scope.$globals[_keys[_i]]);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // clear memory\r\n                                if (angular.isDefined($scope.tree_nodes)) {\r\n                                    delete($scope.tree_nodes);\r\n                                }\r\n\r\n                                $scope.tree_nodes = _tree_nodes;\r\n                                return _tree_nodes;\r\n                            },\r\n                            _defaultFilterOption = {\r\n                                showParent: true,\r\n                                showChild:  false,\r\n                                beginAnd:   true\r\n                            },\r\n                            tree,\r\n                            check_exist_attr = function (attrs, existAttr, isAnd) {\r\n                                if (angular.isUndefinedOrNull(existAttr)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                                    return true;\r\n                                }\r\n\r\n                                if (angular.isArray(existAttr)) {\r\n                                    return for_each_attrs(attrs, existAttr, isAnd);\r\n                                }\r\n                            },\r\n                            for_each_attrs = function (attrs, exist, isAnd) {\r\n                                var i, len = exist.length, passed = false;\r\n\r\n                                if (len === 0) {\r\n                                    return null;\r\n                                }\r\n                                for (i = 0; i < len; i++) {\r\n                                    if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                                        passed = true;\r\n                                        if (!isAnd) {\r\n                                            return true;\r\n                                        }\r\n                                    } else {\r\n                                        if (isAnd) {\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                return passed;\r\n                            },\r\n                            generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter, fnBefore) {\r\n                                nameScope = nameScope || nameAttr;\r\n                                if (typeof type === 'string' || angular.isArray(type)) {\r\n                                    if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                                        return;//jmp\r\n                                    }\r\n                                    if (typeof $attrs[nameAttr] === 'string') {\r\n                                        $scope.$watch(\r\n                                            $attrs[nameAttr], function (val) {\r\n                                                if ((typeof type === 'string' && typeof val === type) ||\r\n                                                    (angular.isArray(type) && type.indexOf(typeof val) > -1)\r\n                                                ) {\r\n                                                    $scope[nameScope] = val;\r\n                                                } else {\r\n                                                    if (angular.isFunction(valDefault)) {\r\n                                                        $scope[nameScope] = valDefault(val);\r\n                                                    } else {\r\n                                                        $scope[nameScope] = valDefault;\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (angular.isFunction(fnAfter)) {\r\n                                                    fnAfter($scope[nameScope], $scope);\r\n                                                }\r\n                                            }, true\r\n                                        );\r\n                                    } else {\r\n\r\n                                        if (angular.isFunction(fnNotExist)) {\r\n                                            $scope[nameScope] = fnNotExist();\r\n                                        } else if (!angular.isUndefined(fnNotExist)) {\r\n                                            $scope[nameScope] = fnNotExist;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            _watches = [\r\n                                [\r\n                                    'enableDrag', [\r\n                                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                                    ['number', 'dragDelay', 0, null, 0],\r\n                                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                                    [\r\n                                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                        if (isHotkey) {\r\n                                            $scope.enabledMove = false;\r\n                                        } else {\r\n                                            $scope.enabledMove = $scope.statusMove;\r\n                                        }\r\n                                    }]\r\n                                ]],\r\n                                [\r\n                                    ['enableDrag', 'enableStatus'], [\r\n                                    [\r\n                                        'string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setCopy(_url, $scope);\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'string', 'templateMove', $attrs.templateMove, 'templateMove', null,\r\n                                        function (_url) {\r\n                                            if (_url && $templateCache.get(_url)) {\r\n                                                $TreeDnDTemplate.setMove(_url, $scope);\r\n                                            }\r\n                                        }]\r\n                                ]],\r\n                                [\r\n                                    [['enableDrag', 'enableDrop']], [\r\n                                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                                ],\r\n                                [\r\n                                    '*', [\r\n                                    ['boolean', 'horizontal'],\r\n                                    [\r\n                                        'callback', 'treeClass', function (val) {\r\n                                        switch (typeof val) {\r\n                                            case 'string':\r\n                                                $scope.$tree_class = val;\r\n                                                break;\r\n                                            case 'object':\r\n                                                angular.extend($scope.$class, val);\r\n                                                $scope.$tree_class = $scope.$class.tree;\r\n                                                break;\r\n                                            default:\r\n                                                $scope.$tree_class = $attrs.treeClass;\r\n                                                break;\r\n                                        }\r\n                                    }, 'treeClass', function () {\r\n                                        $scope.$tree_class = $scope.$class.tree + ' table';\r\n                                    }, null, function () {\r\n                                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + $attrs.treeClass)) {\r\n                                            $scope.$tree_class = $attrs.treeClass.trim();\r\n                                            return true;\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                                        function (expandOn) {\r\n                                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                                $scope.expandingProperty = $attrs.expandOn;\r\n                                            }\r\n                                        }],\r\n                                    [\r\n                                        'object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\r\n                                        'tree', null, function ($tree) {\r\n\r\n                                        $scope.reload_data = reload_data;\r\n\r\n                                        if (!angular.isFunction(_fnGetControl)) {\r\n                                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                                        }\r\n\r\n                                        if (angular.isFunction(_fnGetControl)) {\r\n                                            tree = angular.extend(\r\n                                                $tree,\r\n                                                _fnGetControl($scope)\r\n                                            );\r\n                                        }\r\n                                    }],\r\n                                    [\r\n                                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                                        function (colDefs) {\r\n                                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                                $scope.colDefinitions = getColDefs();\r\n                                            }\r\n                                        }],\r\n                                    [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\r\n                                    [\r\n                                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                                        var _passed = false;\r\n                                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                                            var _keysF = Object.keys(filters),\r\n                                                _lenF = _keysF.length, _iF;\r\n\r\n                                            if (_lenF > 0) {\r\n                                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                                    if ((typeof filters[_keysF[_iF]]) === 'string' &&\r\n                                                        filters[_keysF[_iF]].length === 0) {\r\n                                                        continue;\r\n                                                    }\r\n                                                    _passed = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        $scope.enabledFilter = _passed;\r\n                                        reload_data();\r\n                                    }],\r\n                                    [\r\n                                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                        _defaultFilterOption, function (option) {\r\n                                        if (typeof option === \"object\") {\r\n                                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                        }\r\n                                    }],\r\n                                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\r\n                                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\r\n                                    ['number', 'indent', 30, null, 30],\r\n                                    ['number', 'indentPlus', 20, null, 20],\r\n                                    [\r\n                                        'null', 'callbacks',\r\n                                        function (optCallbacks) {\r\n                                            angular.forEach(\r\n                                                optCallbacks, function (value, key) {\r\n                                                    if (typeof value === \"function\") {\r\n                                                        if ($scope.$callbacks[key]) {\r\n                                                            $scope.$callbacks[key] = value;\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            );\r\n                                            return $scope.$callbacks;\r\n                                        },\r\n                                        '$callbacks'\r\n                                    ],\r\n                                    [\r\n                                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                                        reload_data();\r\n                                    }],\r\n                                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                                ]]\r\n                            ],\r\n                            w, lenW = _watches.length,\r\n                            i, len,\r\n                            _curW,\r\n                            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW;\r\n                        for (w = 0; w < lenW; w++) {\r\n                            // skip if not exist\r\n                            if (!check_exist_attr($attrs, _watches[w][0], true)) {\r\n                                continue;\r\n                            }\r\n                            _curW = _watches[w][1];\r\n                            for (i = 0, len = _curW.length; i < len; i++) {\r\n                                _typeW = _curW[i][0];\r\n                                _nameW = _curW[i][1];\r\n                                _defaultW = _curW[i][2];\r\n                                _scopeW = _curW[i][3];\r\n                                _NotW = _curW[i][4];\r\n                                _AfterW = _curW[i][5];\r\n                                _BeforeW = _curW[i][6];\r\n                                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n                            }\r\n                        }\r\n\r\n                        if ($attrs.treeData) {\r\n                            $scope.$watch(\r\n                                $attrs.treeData, function (val) {\r\n                                    $scope.treeData = val;\r\n                                }, true\r\n                            );\r\n                        }\r\n\r\n                        $scope.$watch(\r\n                            'treeData', function () {\r\n                                reload_data();\r\n                            }, true\r\n                        );\r\n                    }],\r\n                compile:    function compile(tElement) {\r\n\r\n                    var $_Template = '',\r\n                        _element = tElement.html().trim();\r\n                    if (_element.length > 0) {\r\n                        $_Template = _element;\r\n                        tElement.html('');\r\n                    }\r\n\r\n                    return function fnPost(scope, element, attrs) {\r\n\r\n                        if (attrs.enableDrag) {\r\n                            var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                            if (angular.isFunction(_fnInitDrag)) {\r\n                                _fnInitDrag(scope, element, $window, $document);\r\n                            }\r\n                        }\r\n\r\n                        // kick out $digest\r\n                        element.ready(function(){\r\n                            // apply Template\r\n                            scope.$safeApply(\r\n                                function () {\r\n                                    if ($_Template.length > 0) {\r\n                                        element.append($compile($_Template)(scope));\r\n                                    } else {\r\n                                        $http.get(\r\n                                            attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                            {cache: $templateCache}\r\n                                        ).success(\r\n                                            function (data) {\r\n                                                element.append($compile(data.trim())(scope));\r\n                                                scope.$element = angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n                                            }\r\n                                        );\r\n                                    }\r\n\r\n                                }\r\n                            );\r\n                        })\r\n                    };\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function access_child(data, parentKey) {\r\n                var _tree = [],\r\n                    _i,\r\n                    _len = data ? data.length : 0,\r\n                    _copy, _child;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _copy = angular.copy(data[_i]);\r\n                    if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                        _child = access_child(_copy[parentKey], parentKey);\r\n                        delete(_copy[parentKey]);\r\n                        _copy.__children__ = _child;\r\n                    }\r\n                    _tree.push(_copy);\r\n                }\r\n                return _tree;\r\n            }\r\n        }\r\n\r\n        return _$initConvert;\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n).factory(\r\n    '$TreeDnDPlugin',['$injector', function ($injector) {\r\n        var _fnget = function (name) {\r\n                if (angular.isDefined($injector) && $injector.has(name)) {\r\n                    return $injector.get(name);\r\n                }\r\n                return null;\r\n            };\r\n        return _fnget;\r\n    }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                scopes = {},\r\n                temp,\r\n                _$init = {\r\n                    setMove: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].movePath = path;\r\n                    },\r\n                    setCopy: function (path, scope) {\r\n                        if (!scopes[scope.$id]) {\r\n                            scopes[scope.$id] = {};\r\n                        }\r\n                        scopes[scope.$id].copyPath = path;\r\n                    },\r\n                    getPath: function () {\r\n                        return templatePath;\r\n                    },\r\n                    getCopy: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(copyPath);\r\n                    },\r\n                    getMove: function (scope) {\r\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                            if (temp) {\r\n                                return temp;\r\n                            }\r\n                        }\r\n                        return $templateCache.get(movePath);\r\n                    }\r\n                };\r\n\r\n            return _$init;\r\n        }]\r\n).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _iF, _lenF, _keysF,\r\n                _filter,\r\n                _state,\r\n                for_all_descendants = function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes,\r\n                        _nodePassed = fnBefore(options, node),\r\n                        _childPassed = false;\r\n\r\n                    if (angular.isDefined(node[fieldChild])) {\r\n                        _nodes = node[fieldChild];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                    }\r\n\r\n                    return _nodePassed || _childPassed;\r\n                },\r\n                // Check data by filter\r\n                _fnCheck = function _fnCheck(callback, check) {\r\n                    if (angular.isUndefinedOrNull(check) || angular.isArray(check)) {\r\n                        return null;\r\n                    }\r\n\r\n                    if (angular.isFunction(callback)) {\r\n                        return callback(check, $filter);\r\n                    } else {\r\n                        if (typeof callback === 'boolean') {\r\n                            check = !!check;\r\n                            return check === callback;\r\n                        } else if (angular.isDefined(callback)) {\r\n                            try {\r\n                                var _regex = new RegExp(callback);\r\n                                return _regex.test(check);\r\n                            }\r\n                            catch (err) {\r\n                                if (typeof check === 'string') {\r\n                                    return check.indexOf(callback) > -1;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                },\r\n                _fnProccess = function _fnProccess(node, condition, isAnd) {\r\n                    if (angular.isArray(condition)) {\r\n                        return for_each_filter(node, condition, isAnd);\r\n                    } else {\r\n                        var _key = condition.field,\r\n                            _callback = condition.callback,\r\n                            _iO, _keysO, _lenO;\r\n\r\n                        if (_key === '_$') {\r\n                            _keysO = Object.keys(node);\r\n                            _lenO = _keysO.length;\r\n                            for (_iO = 0; _iO < _lenO; _iO++) {\r\n                                if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        } else if (angular.isDefined(node[_key])) {\r\n                            return _fnCheck(_callback, node[_key]);\r\n                        }\r\n                    }\r\n                },\r\n                for_each_filter = function for_each_filter(node, conditions, isAnd) {\r\n                    var i, len = conditions.length, passed = false;\r\n                    if (len === 0) {\r\n                        return null;\r\n                    }\r\n\r\n                    for (i = 0; i < len; i++) {\r\n                        if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                            passed = true;\r\n                            // if condition `or` then return;\r\n                            if (!isAnd) {\r\n                                return true;\r\n                            }\r\n                        } else {\r\n\r\n                            // if condition `and` and result in fnProccess = false then return;\r\n                            if (isAnd) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return passed;\r\n                },\r\n\r\n                // Will call _fnAfter to clear data no need\r\n                _fnAfter = function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if ((isChildPassed === true && options.showParent === true)\r\n                               || (isParentPassed === true && options.showChild === true)) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n                _fnBefore = function _fnBefore(options, node) {\r\n                    if (options.filter.length === 0) {\r\n                        return true;\r\n                    } else {\r\n                        return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                    }\r\n                },\r\n                _fnConvert = function _fnConvert(filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n\r\n                        if (_lenF > 0) {\r\n                            for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                if ((typeof filters[_keysF[_iF]]) === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                    continue;\r\n                                } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                    _state = filters[_keysF[_iF]];\r\n                                } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                    _state = _fnConvert(filters[_keysF[_iF]]);\r\n                                } else {\r\n                                    _state = {\r\n                                        field:    _keysF[_iF],\r\n                                        callback: filters[_keysF[_iF]]\r\n                                    };\r\n                                }\r\n                                _filter.push(_state);\r\n                            }\r\n                        }\r\n                        _state = null;\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                },\r\n                _fnMain = function _fnMain(treeData, filters, _options) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(filters) || angular.isObject(filters))\r\n                        || filters.length === 0) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _filter;\r\n\r\n                    _filter = _fnConvert(filters);\r\n                    if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                        || _filter.length === 0) {\r\n                        return treeData;\r\n                    }\r\n                    _options.filter = _filter;\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            _options,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnBefore, _fnAfter\r\n                        );\r\n                    }\r\n\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || (orderBy.length === 0 && !angular.isFunction(orderBy))) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len,\r\n                        _iF, _lenF, _keysF;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    treeData = _fnOrder(treeData, orderBy);\r\n                    return treeData;\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n).factory(\r\n    '$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            var _offset,\r\n                _fnPlaceHolder = function (e, $params) {\r\n                    if ($params.placeElm) {\r\n                        _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                        if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                            _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                        ) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                },\r\n                _fnDragStart = function (e, $params) {\r\n                    if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                        // disable right click\r\n                        return;\r\n                    }\r\n                    if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                        return;\r\n                    }\r\n                    // the element which is clicked.\r\n                    var eventElm = angular.element(e.target),\r\n                        eventScope = eventElm.scope();\r\n                    if (!eventScope || !eventScope.$type) {\r\n                        return;\r\n                    }\r\n                    // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                    //     return;\r\n                    // }\r\n\r\n                    if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                        return;\r\n                    }\r\n\r\n                    var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                        dragScope,\r\n                        _$scope = $params.$scope;\r\n                    if (eventElmTagName === 'input'\r\n                        || eventElmTagName === 'textarea'\r\n                        || eventElmTagName === 'button'\r\n                        || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                        return;\r\n                    }\r\n                    // check if it or it's parents has a 'data-nodrag' attribute\r\n                    while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                        if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                            return;\r\n                        }\r\n                        eventElm = eventElm.parent();\r\n                    }\r\n\r\n                    e.uiTreeDragging = true; // stop event bubbling\r\n                    if (e.originalEvent) {\r\n                        e.originalEvent.uiTreeDragging = true;\r\n                    }\r\n                    e.preventDefault();\r\n\r\n                    dragScope = eventScope.getScopeNode();\r\n\r\n                    $params.firstMoving = true;\r\n\r\n                    if (!_$scope.$callbacks.beforeDrag(dragScope)) {\r\n                        return;\r\n                    }\r\n\r\n                    var eventObj = $TreeDnDHelper.eventObj(e),\r\n                        tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                        isTable = (tagName === 'tr');\r\n\r\n                    $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                    _$scope.setDragging($params.dragInfo);\r\n\r\n                    $params.pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                    if (isTable) {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                            .addClass(_$scope.$class.tree)\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass(_$scope.$tree_class);\r\n                    } else {\r\n                        $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                            .addClass(_$scope.$class.drag)\r\n                            .addClass('tree-dnd-nodes')\r\n                            .addClass(_$scope.$tree_class);\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                            'z-index': 9995\r\n                        }\r\n                    );\r\n\r\n                    $params.offsetEdge = 0;\r\n                    var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                        _scope = dragScope,\r\n                        _element = _scope.$element,\r\n                        _clone = null,\r\n                        _needCollapse = !!_$scope.enabledCollapse,\r\n                        _copied = false,\r\n                        _tbody = null;\r\n\r\n                    if (isTable) {\r\n                        $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                        _tbody = angular.element($params.$window.document.createElement('tbody'));\r\n\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope = _$scope.getScope(_node);\r\n                                _element = _scope.$element;\r\n\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _$scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _tbody.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n                                }\r\n\r\n                                if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        $params.dragElm.append(_tbody);\r\n                    } else {\r\n\r\n                        if (!_needCollapse) {\r\n                            _clone = _element.clone();\r\n                        } else {\r\n                            var _holder = _scope.getElementChilds(),\r\n                                _swaper = angular.element(\"<swaped />\");\r\n\r\n                            // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                            _holder.after(angular.element(\"<holder />\"));\r\n                            _swaper.append(_holder);\r\n\r\n                            // Clone without Children & remove tag `<holder>`\r\n                            _clone = _element.clone();\r\n                            _clone.find(\"holder\").remove();\r\n\r\n                            // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                            _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                            // Reset & clear all;\r\n                            _swaper.remove();\r\n                            _holder = null;\r\n                        }\r\n\r\n                        $params.dragElm.append(_clone);\r\n                        if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                            _element.addClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                            )       + 'px',\r\n                            'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                        }\r\n                    );\r\n                    // moving item with descendant\r\n                    $params.$document.find('body').append($params.dragElm);\r\n                    if (_$scope.$callbacks.droppable()) {\r\n                        $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                        if (isTable) {\r\n                            $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                        }\r\n\r\n                        $params.placeElm.css('width', _width);\r\n                    }\r\n\r\n                    _$scope.showPlace();\r\n                    _$scope.targeting = true;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                    $params.document_height = Math.max(\r\n                        $params.body.scrollHeight,\r\n                        $params.body.offsetHeight,\r\n                        $params.html.clientHeight,\r\n                        $params.html.scrollHeight,\r\n                        $params.html.offsetHeight\r\n                    );\r\n\r\n                    $params.document_width = Math.max(\r\n                        $params.body.scrollWidth,\r\n                        $params.body.offsetWidth,\r\n                        $params.html.clientWidth,\r\n                        $params.html.scrollWidth,\r\n                        $params.html.offsetWidth\r\n                    );\r\n                },\r\n                _fnDragMove = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (!$params.dragStarted) {\r\n                        if (!$params.dragDelaying) {\r\n                            $params.dragStarted = true;\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragStart($params.dragInfo);\r\n                                }\r\n                            );\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if ($params.dragElm) {\r\n                        e.preventDefault();\r\n                        if ($params.$window.getSelection) {\r\n                            $params.$window.getSelection().removeAllRanges();\r\n                        } else if ($params.$window.document.selection) {\r\n                            $params.$window.document.selection.empty();\r\n                        }\r\n\r\n                        var eventObj = $TreeDnDHelper.eventObj(e),\r\n                            leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                            topElmPos = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                        //dragElm can't leave the screen on the left\r\n                        if (leftElmPos < 0) {\r\n                            leftElmPos = 0;\r\n                        }\r\n\r\n                        //dragElm can't leave the screen on the top\r\n                        if (topElmPos < 0) {\r\n                            topElmPos = 0;\r\n                        }\r\n\r\n                        //dragElm can't leave the screen on the bottom\r\n                        if ((topElmPos + 10) > $params.document_height) {\r\n                            topElmPos = $params.document_height - 10;\r\n                        }\r\n\r\n                        //dragElm can't leave the screen on the right\r\n                        if ((leftElmPos + 10) > $params.document_width) {\r\n                            leftElmPos = $params.document_width - 10;\r\n                        }\r\n\r\n                        $params.dragElm.css(\r\n                            {\r\n                                'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                    $params.offsetEdge + 1,\r\n                                    true,\r\n                                    true\r\n                                )       + 'px',\r\n                                'top':  topElmPos + 'px'\r\n                            }\r\n                        );\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.setPositionStatus(e);\r\n                        }\r\n\r\n                        var top_scroll = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                            bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                        // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                        if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                            window.scrollBy(0, 10);\r\n                        }\r\n                        // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                        if (top_scroll > eventObj.pageY) {\r\n                            window.scrollBy(0, -10);\r\n                        }\r\n\r\n                        $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                        if ($params.firstMoving) {\r\n                            $params.firstMoving = false;\r\n                            return;\r\n                        }\r\n                        // check if add it as a child node first\r\n\r\n                        var targetX = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                            targetY = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                            targetElm,\r\n                            targetScope,\r\n                            targetBefore,\r\n                            targetOffset,\r\n                            tagName,\r\n                            isTable,\r\n                            isChanged = true,\r\n                            isVeritcal = true,\r\n                            isEmpty,\r\n                            isSwapped,\r\n                            _scope,\r\n                            _target,\r\n                            _parent,\r\n                            _info = $params.dragInfo,\r\n                            _move = _info.move,\r\n                            _drag = _info.node,\r\n                            _drop = _info.drop,\r\n                            treeScope = _info.target,\r\n                            fnSwapTree,\r\n                            isHolder = _fnPlaceHolder(e, $params);\r\n\r\n                        if (!isHolder) {\r\n                            /* when using elementFromPoint() inside an iframe, you have to call\r\n                             elementFromPoint() twice to make sure IE8 returns the correct value\r\n                             $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                            targetElm = angular.element(\r\n                                $params.$window.document.elementFromPoint(\r\n                                    targetX,\r\n                                    targetY\r\n                                )\r\n                            );\r\n\r\n                            targetScope = targetElm.scope();\r\n                            if (!targetScope) {\r\n                                return;\r\n                            }\r\n\r\n                            fnSwapTree = function () {\r\n                                treeScope = targetScope.getScopeTree();\r\n                                _target = _info.target;\r\n                                if (_info.target !== treeScope) {\r\n                                    if (treeScope.$callbacks.droppable()) {\r\n                                        // Replace by place-holder new\r\n                                        _target.hidePlace();\r\n                                        _target.targeting = false;\r\n                                        treeScope.targeting = true;\r\n\r\n                                        _info.target = treeScope;\r\n                                        $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                        _target = null;\r\n                                        isSwapped = true;\r\n                                    } else {\r\n                                        // Not allowed Drop Item\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                                return true;\r\n                            };\r\n\r\n                            if (angular.isFunction(targetScope.getScopeNode)) {\r\n                                targetScope = targetScope.getScopeNode();\r\n                                if (!fnSwapTree()) {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                    if (targetScope.tree_nodes) {\r\n                                        if (targetScope.tree_nodes.length === 0) {\r\n                                            if (!fnSwapTree()) {\r\n                                                return;\r\n                                            }\r\n                                            // Empty\r\n                                            isEmpty = true;\r\n                                        }\r\n                                    } else {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                            isVeritcal = false;\r\n                            targetScope = _info.scope;\r\n                        }\r\n\r\n                        if (!targetScope.$element && !targetScope) {\r\n                            return;\r\n                        }\r\n\r\n                        tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                        isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n                        if (isEmpty) {\r\n                            _move.parent = null;\r\n                            _move.pos = 0;\r\n\r\n                            _drop = null;\r\n                        } else {\r\n                            // move vertical\r\n                            if (isVeritcal) {\r\n                                targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                                targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                                if (targetScope.horizontal && !isTable) {\r\n                                    targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                                } else {\r\n                                    if (isTable) {\r\n                                        targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                    } else {\r\n                                        var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                        if (targetScope.getElementChilds()) {\r\n                                            _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                        }\r\n\r\n                                        if (eventObj.pageY > targetOffset.top + _height) {\r\n                                            return;\r\n                                        }\r\n\r\n                                        targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                    }\r\n                                }\r\n\r\n                                if (!angular.isFunction(targetScope.getData)) {\r\n                                    return;\r\n                                }\r\n\r\n                                _target = targetScope.getData();\r\n                                _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                                if (targetBefore) {\r\n                                    var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                    _move.parent = _parent;\r\n                                    _move.pos = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                    _drop = _prev;\r\n                                } else {\r\n                                    if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                        _move.parent = _target;\r\n                                        _move.pos = 0;\r\n\r\n                                        _drop = null;\r\n                                    } else {\r\n                                        _move.parent = _parent;\r\n                                        _move.pos = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                // move horizontal\r\n                                if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                    $params.pos.distAxX = 0;\r\n                                    // increase horizontal level if previous sibling exists and is not collapsed\r\n                                    if ($params.pos.distX > 0) {\r\n                                        _parent = _drop;\r\n                                        if (!_parent) {\r\n                                            if (_move.pos - 1 >= 0) {\r\n                                                _parent = _move.parent.__children__[_move.pos - 1];\r\n                                            } else {\r\n                                                return;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                            _parent = treeScope.getPrevSibling(_parent);\r\n                                        }\r\n\r\n                                        if (_parent && _parent.__visible__) {\r\n                                            var _len = _parent.__children__.length;\r\n\r\n                                            _move.parent = _parent;\r\n                                            _move.pos = _len;\r\n\r\n                                            if (_len > 0) {\r\n                                                _drop = _parent.__children__[_len - 1];\r\n                                            } else {\r\n                                                _drop = null;\r\n                                            }\r\n                                        } else {\r\n                                            // Not changed\r\n                                            return;\r\n                                        }\r\n                                    } else if ($params.pos.distX < 0) {\r\n                                        _target = _move.parent;\r\n                                        if (_target &&\r\n                                            (_target.__children__.length === 0 ||\r\n                                             _target.__children__.length - 1 < _move.pos ||\r\n                                             (_info.drag === _info.target &&\r\n                                              _target.__index_real__ === _drag.__parent_real__ &&\r\n                                              _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove))\r\n                                        ) {\r\n                                            _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                            _move.parent = _parent;\r\n                                            _move.pos = _target.__index__ + 1;\r\n\r\n                                            _drop = _target;\r\n                                        } else {\r\n                                            // Not changed\r\n                                            return;\r\n                                        }\r\n                                    } else {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    // limited\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (_info.drag === _info.target &&\r\n                            _move.parent &&\r\n                            _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                            _drag.__index__ === _move.pos\r\n                        ) {\r\n                            isChanged = false;\r\n                        }\r\n\r\n                        if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                            _info.move = _move;\r\n                            _info.drop = _drop;\r\n                            _info.changed = isChanged;\r\n                            _info.scope = targetScope;\r\n\r\n                            if (isTable) {\r\n                                $TreeDnDHelper.replaceIndent(\r\n                                    treeScope,\r\n                                    $params.placeElm,\r\n                                    angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                                );\r\n\r\n                                if (_drop) {\r\n                                    _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                    if (_drop.__index__ < _parent.length - 1) {\r\n                                        // Find fast\r\n                                        _drop = _parent[_drop.__index__ + 1];\r\n                                        _scope = _info.target.getScope(_drop);\r\n                                        _scope.$element[0].parentNode.insertBefore(\r\n                                            $params.placeElm[0],\r\n                                            _scope.$element[0]\r\n                                        );\r\n                                    } else {\r\n                                        _target = _info.target.getLastDescendant(_drop);\r\n                                        _scope = _info.target.getScope(_target);\r\n                                        _scope.$element.after($params.placeElm);\r\n                                    }\r\n                                } else {\r\n                                    _scope = _info.target.getScope(_move.parent);\r\n                                    if (_scope) {\r\n                                        if (_move.parent) {\r\n                                            _scope.$element.after($params.placeElm);\r\n\r\n                                        } else {\r\n                                            _scope.getElementChilds().prepend($params.placeElm);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_drop || _move.parent);\r\n\r\n                                if (_drop) {\r\n                                    _scope.$element.after($params.placeElm);\r\n                                } else {\r\n                                    _scope.getElementChilds().prepend($params.placeElm);\r\n                                }\r\n                            }\r\n\r\n                            treeScope.showPlace();\r\n\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _$scope.$callbacks.dragMove(_info);\r\n                                }\r\n                            );\r\n                        }\r\n\r\n                    }\r\n                },\r\n                _fnDragEnd = function (e, $params) {\r\n                    e.preventDefault();\r\n                    if ($params.dragElm) {\r\n                        var _passed = false,\r\n                            _$scope = $params.$scope,\r\n                            _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _isTable = (tagName === 'tr'),\r\n                            _element = _scope.$element;\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                            }\r\n                        );\r\n\r\n                        // rollback all\r\n                        if (_isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n\r\n                        $params.dragElm.remove();\r\n                        $params.dragElm = null;\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        var _status = false;\r\n                        if (_$scope.$$apply) {\r\n                            _$scope.$safeApply(\r\n                                function () {\r\n                                    _status = _$scope.$callbacks.dropped(\r\n                                        $params.dragInfo,\r\n                                        _passed,\r\n                                        _$scope.enabledMove\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            _fnBindDrag($params);\r\n                        }\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                            }\r\n                        );\r\n\r\n                        $params.dragInfo.target.hidePlace();\r\n                        $params.dragInfo.target.targeting = false;\r\n\r\n                        $params.dragInfo = null;\r\n                        _$scope.$$apply = false;\r\n                        _$scope.setDragging(null);\r\n                    }\r\n\r\n                    angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                    angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                    angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                    angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                    angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n                },\r\n                _fnDragStartEvent = function (e, $params) {\r\n                    if ($params.$scope.$callbacks.draggable()) {\r\n                        _fnDragStart(e, $params);\r\n                    }\r\n                },\r\n                _fnBindDrag = function ($params) {\r\n                    $params.element.bind(\r\n                        'touchstart mousedown', function (e) {\r\n                            $params.dragDelaying = true;\r\n                            $params.dragStarted = false;\r\n                            _fnDragStartEvent(e, $params);\r\n                            $params.dragTimer = $timeout(\r\n                                function () {\r\n                                    $params.dragDelaying = false;\r\n                                }, $params.$scope.dragDelay\r\n                            );\r\n                        }\r\n                    );\r\n                    $params.element.bind(\r\n                        'touchend touchcancel mouseup', function () {\r\n                            $timeout.cancel($params.dragTimer);\r\n                        }\r\n                    );\r\n                },\r\n                _fnKeydownHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (e.keyCode === 27) {\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.hideStatus();\r\n                        }\r\n\r\n                        _$scope.$$apply = false;\r\n                        _fnDragEnd(e, $params);\r\n                    } else {\r\n                        if (_$scope.enabledHotkey && e.shiftKey) {\r\n                            _$scope.enableMove(true);\r\n                            if (_$scope.enabledStatus) {\r\n                                _$scope.refreshStatus();\r\n                            }\r\n\r\n                            if (!$params.dragInfo) {\r\n                                return;\r\n                            }\r\n\r\n                            var _scope = _$scope.getScope($params.dragInfo.node),\r\n                                tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                _element = _scope.$element;\r\n\r\n                            if (tagName === 'tr') {\r\n                                _$scope.for_all_descendants(\r\n                                    $params.dragInfo.node, function (_node) {\r\n                                        _scope = _$scope.getScope(_node);\r\n                                        _element = _scope.$element;\r\n\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.addClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _fnKeyupHandler = function (e, $params) {\r\n                    var _$scope = $params.$scope;\r\n                    if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                        _$scope.enableMove(false);\r\n\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope = _$scope.getScope($params.dragInfo.node),\r\n                            tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                            _element = _scope.$element;\r\n\r\n                        if (tagName === 'tr') {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n\r\n                                    _scope = _$scope.getScope(_node);\r\n                                    _element = _scope.$element;\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.removeClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                _$init = function (scope, element, $window, $document) {\r\n                    var $params = {\r\n                            hasTouch:        ('ontouchstart' in window),\r\n                            firstMoving:     null,\r\n                            dragInfo:        null,\r\n                            pos:             null,\r\n                            placeElm:        null,\r\n                            dragElm:         null,\r\n                            dragDelaying:    true,\r\n                            dragStarted:     false,\r\n                            dragTimer:       null,\r\n                            body:            document.body,\r\n                            html:            document.documentElement,\r\n                            document_height: null,\r\n                            document_width:  null,\r\n                            offsetEdge:      null,\r\n                            $scope:          scope,\r\n                            $window:         $window,\r\n                            $document:       $document,\r\n                            element:         element,\r\n                            bindDrag:        function () {\r\n                                _fnBindDrag($params);\r\n                            },\r\n                            dragEnd:         function (e) {\r\n                                _fnDragEnd(e, $params);\r\n                            },\r\n                            dragMoveEvent:   function (e) {\r\n                                _fnDragMove(e, $params)\r\n                            },\r\n                            dragEndEvent:    function (e) {\r\n                                scope.$$apply = true;\r\n                                _fnDragEnd(e, $params);\r\n                            },\r\n                            dragCancelEvent: function (e) {\r\n                                _fnDragEnd(e, $params);\r\n                            }\r\n                        },\r\n                        keydownHandler = function (e) {\r\n                            return _fnKeydownHandler(e, $params);\r\n                        },\r\n                        keyupHandler = function (e) {\r\n                            return _fnKeyupHandler(e, $params);\r\n                        };\r\n\r\n                    scope.dragEnd = function (e) {\r\n                        $params.dragEnd(e);\r\n                    };\r\n\r\n                    $params.bindDrag();\r\n\r\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                    //unbind handler that retains scope\r\n                    scope.$on(\r\n                        '$destroy', function () {\r\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                            if (scope.statusElm) {\r\n                                scope.statusElm.remove();\r\n                            }\r\n\r\n                            if (scope.placeElm) {\r\n                                scope.placeElm.remove();\r\n                            }\r\n                        }\r\n                    );\r\n                };\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n).factory(\r\n    '$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len,\r\n            fnSetCollapse = function fnSetCollapse(node) {\r\n                node.__expanded__ = false;\r\n            },\r\n            fnSetExpand = function fnSetExpand(node) {\r\n                node.__expanded__ = true;\r\n            },\r\n\r\n            _$init = function _$init(scope) {\r\n                var n, tree = {\r\n                    selected_node:                     null,\r\n                    for_all_descendants:               scope.for_all_descendants,\r\n                    select_node:                       function (node) {\r\n                        if (!node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            tree.selected_node = null;\r\n                            return null;\r\n                        }\r\n\r\n                        if (node !== tree.selected_node) {\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                            }\r\n                            node.__selected__ = true;\r\n                            tree.selected_node = node;\r\n                            tree.expand_all_parents(node);\r\n                            if (angular.isFunction(tree.on_select)) {\r\n                                tree.on_select(node);\r\n                            }\r\n                        }\r\n                        return node;\r\n                    },\r\n                    deselect_node:                     function () {\r\n                        _target = null;\r\n                        if (tree.selected_node) {\r\n                            delete(tree.selected_node.__selected__);\r\n                            _target = tree.selected_node;\r\n                            tree.selected_node = null;\r\n                        }\r\n                        return _target;\r\n                    },\r\n                    get_parent:                        function (node) {\r\n                        if (node && node.__parent_real__ !== null) {\r\n                            return scope.tree_nodes[node.__parent_real__];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    for_all_ancestors:                 function (child, fn) {\r\n                        _parent = tree.get_parent(child);\r\n                        if (_parent) {\r\n                            if (fn(_parent)) {\r\n                                return false;\r\n                            }\r\n\r\n                            return tree.for_all_ancestors(_parent, fn);\r\n                        }\r\n                        return true;\r\n                    },\r\n                    expand_all_parents:                function (child) {\r\n                        return tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        );\r\n                    },\r\n                    reload_data:                       function () {\r\n                        return scope.reload_data();\r\n                    },\r\n                    add_node:                          function (parent, new_node, index) {\r\n                        if (typeof index !== 'number') {\r\n                            if (parent) {\r\n                                parent.__children__.push(new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.push(new_node);\r\n                            }\r\n                        } else {\r\n                            if (parent) {\r\n                                parent.__children__.splice(index, 0, new_node);\r\n                                parent.__expanded__ = true;\r\n                            } else {\r\n                                scope.treeData.splice(index, 0, new_node);\r\n                            }\r\n                        }\r\n                        return new_node;\r\n                    },\r\n                    add_node_root:                     function (new_node) {\r\n                        tree.add_node(null, new_node);\r\n                        return new_node;\r\n                    },\r\n                    expand_all:                        function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetExpand\r\n                            );\r\n                        }\r\n                    },\r\n                    collapse_all:                      function () {\r\n                        len = scope.treeData.length;\r\n                        for (i = 0; i < len; i++) {\r\n                            tree.for_all_descendants(\r\n                                scope.treeData[i], fnSetCollapse\r\n                            );\r\n                        }\r\n                    },\r\n                    remove_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            if (node.__parent_real__) {\r\n                                _parent = tree.get_parent(node).__children__;\r\n                            } else {\r\n                                _parent = scope.treeData;\r\n                            }\r\n\r\n                            _parent.splice(node.__index__, 1);\r\n\r\n                            if (tree.selected_node === node) {\r\n                                tree.selected_node = null;\r\n                            }\r\n                        }\r\n                    },\r\n                    expand_node:                       function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = true;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    collapse_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            node.__expanded__ = false;\r\n                            return node;\r\n                        }\r\n                    },\r\n                    get_selected_node:                 function () {\r\n                        return tree.selected_node;\r\n                    },\r\n                    get_first_node:                    function () {\r\n                        len = scope.treeData.length;\r\n                        if (len > 0) {\r\n                            return scope.treeData[0];\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_children:                      function (node) {\r\n                        return node.__children__;\r\n                    },\r\n                    get_siblings:                      function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                _target = _parent.__children__;\r\n                            } else {\r\n                                _target = scope.treeData;\r\n                            }\r\n                            return _target;\r\n                        }\r\n                    },\r\n                    get_next_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = tree.get_siblings(node);\r\n                            n = _target.length;\r\n                            if (node.__index__ < n) {\r\n                                return _target[node.__index__ + 1];\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_sibling:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_siblings(node);\r\n                        if (node.__index__ > 0) {\r\n                            return _target[node.__index__ - 1];\r\n                        }\r\n                    },\r\n                    get_first_child:                   function (node) {\r\n                        node = node || tree.selected_node;\r\n                        if (node) {\r\n                            _target = node.__children__;\r\n                            if (_target && _target.length > 0) {\r\n                                return node.__children__[0];\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n                    get_closest_ancestor_next_sibling: function (node) {\r\n                        node = node || tree.selected_node;\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return tree.get_closest_ancestor_next_sibling(_parent);\r\n                    },\r\n                    get_next_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_first_child(node);\r\n                            if (_target) {\r\n                                return _target;\r\n                            } else {\r\n                                return tree.get_closest_ancestor_next_sibling(node);\r\n                            }\r\n                        }\r\n                    },\r\n                    get_prev_node:                     function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.get_last_descendant(_target);\r\n                            }\r\n\r\n                            _parent = tree.get_parent(node);\r\n                            return _parent;\r\n                        }\r\n                    },\r\n                    get_last_descendant:               scope.getLastDescendant,\r\n                    select_parent_node:                function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _parent = tree.get_parent(node);\r\n                            if (_parent) {\r\n                                return tree.select_node(_parent);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_first_node:                 function () {\r\n                        return tree.select_node(tree.get_first_node());\r\n                    },\r\n                    select_next_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_sibling:               function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_sibling(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_next_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_next_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    },\r\n                    select_prev_node:                  function (node) {\r\n                        node = node || tree.selected_node;\r\n\r\n                        if (node) {\r\n                            _target = tree.get_prev_node(node);\r\n                            if (_target) {\r\n                                return tree.select_node(_target);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                angular.extend(scope.tree, tree);\r\n                return scope.tree;\r\n            };\r\n\r\n        return _$init;\r\n    }\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            [\"<table ng-class=\\\"$tree_class\\\">\",\r\n             \"    <thead>\",\r\n             \"  <tr>\",\r\n             \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\",\r\n             \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\",\r\n             \"        <\\/th>\",\r\n             \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\",\r\n             \"         {{col.displayName || col.field}}\",\r\n             \"     </th>\",\r\n             \"    </tr>\",\r\n             \"    </thead>\",\r\n             \" <tbody tree-dnd-nodes>\",\r\n             \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in tree_nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\",\r\n             \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\",\r\n             \"        <td tree-dnd-node-handle\",\r\n             \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\",\r\n             \"          ng-class=\\\"expandingProperty.cellClass\\\"\",\r\n             \"            compile=\\\"expandingProperty.cellTemplate\\\">\",\r\n             \"              <a data-nodrag>\",\r\n             \"                  <i ng-class=\\\"node.__icon_class__\\\" ng-click=\\\"toggleExpand(node)\\\"\",\r\n             \"                     class=\\\"tree-icon\\\"></i>\",\r\n             \"              </a>\",\r\n             \"             {{node[expandingProperty.field] || node[expandingProperty]}}\",\r\n             \"       </td>\",\r\n             \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\",\r\n             \"            compile=\\\"col.cellTemplate\\\">\",\r\n             \"            {{node[col.field]}}\",\r\n             \"       </td>\",\r\n             \"    </tr>\",\r\n             \"    </tbody>\",\r\n             \"</table>\"].join('')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            \"<label><i class=\\\"fa fa-copy\\\"></i>&nbsp;<b>Copying</b></label>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"],"sourceRoot":"/source/"}