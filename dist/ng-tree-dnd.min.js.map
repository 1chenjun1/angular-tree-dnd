{"version":3,"sources":["ng-tree-dnd.js"],"names":["angular","isUndefinedOrNull","val","isUndefined","module","constant","tree","empty","hidden","node","nodes","handle","place","drag","status","icon","1","0","-1","directive","$compile","restrict","link","scope","element","attrs","$watch","compile","new_val","new_elem","isFunction","html","append","$element","$type","addClass","replace","controller","$scope","$modelValue","$scopeChildren","elementChilds","prev","getPrevGlobal","__index_real__","getData","setElementChilds","_elements","getScopeNode","$icon_class","$node_class","treeDndNode","newValue","oldValue","setScope","__icon__","$nodes_class","treeDndNodes","$timeout","$http","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDOrderBy","$TreeDnDFilter","$attrs","dragEnabled","dropEnabled","dragDelay","indent","indent_plus","indent_unit","tree_class","primary_key","enabledMove","statusMove","enabledHotkey","enabledCollapse","enabledFilter","dragBorder","horizontal","colDefinitions","$globals","tree_nodes","statusElm","placeElm","dragging","targeting","for_all_descendants","fn","_i","_len","_nodes","__children__","length","$callbacks","accept","dragInfo","moveTo","isChanged","beforeDrag","scopeDrag","dragStart","event","dragMove","dragStop","skiped","beforeDrop","calsIndent","level","skipUnit","skipEdge","unit","edge","droppable","draggable","changeKey","_key","__uid__","Math","random","__selected__","clone","_clone","copy","this","remove","parent","splice","__index__","add","pos","push","dropped","info","pass","isMove","changed","_node","_nodeAdd","_move","move","_parent","_parentRemove","treeData","_parentAdd","target","setDragging","toggleExpand","__expanded__","getScopeTree","getPrevSibling","_index","__parent_real__","getNode","index","getHash","__parent__","_hash","getScope","enableMove","visible","__visible__","enableStatus","enabledStatus","hideStatus","refreshStatus","statusElmOld","getMove","getCopy","attr","find","removeClass","setPositionStatus","e","_scope","css","left","pageX","top","pageY","z-index","initPlace","dragElm","tagName","isTable","prop","toLowerCase","document","createElement","_len_down","height","parentNode","insertBefore","hidePlace","showPlace","$safeApply","phase","$root","$$phase","$apply","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","indexOf","w","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","getExpandOn","i","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","field","do_f","root","parent_real","_icon","_index_real","_dept","_hashKey","isArray","expand_level","__level__","__hashKey__","__dept__","reload_data","_data","_tree_nodes","expandOn","columnDefs","orderBy","filter","filterOptions","_offset","_max","_min","_deptTotal","abs","_defaultFilterOption","showParent","showChild","_watches","primaryKey","indentUnit","enableCollapse","enableDrag","enableDrop","indentPlus","optCallbacks","forEach","value","key","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","option","extend","lenW","_first","fnWatchTreeData","unWatchTreeData","equals","treeClass","trim","n","iconExpand","iconCollapse","iconLeaf","expandLevel","parseInt","onClick","on_click","onSelect","selected_node","select_node","isObject","expand_all_parents","on_select","deselect_node","get_parent","for_all_ancestors","child","add_node","new_node","add_node_root","expand_all","len","fnCallback","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","p","siblings","get_next_sibling","get_prev_sibling","get_first_child","_ref","get_closest_ancestor_next_sibling","next","get_next_node","get_prev_node","prev_sibling","get_last_descendant","last_child","select_parent_node","select_first_node","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","firstMoving","document_height","document_width","offsetEdge","hasTouch","window","dragDelaying","dragStarted","dragTimer","body","documentElement","button","which","uiTreeDragging","originalEvent","eventElm","eventScope","eventElmTagName","dragScope","nodrag","preventDefault","eventObj","positionStarted","width","_width","_element","_needCollapse","_copied","_tbody","replaceIndent","_holder","_swaper","after","replaceWith","offsetX","offsetY","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","max","scrollHeight","offsetHeight","clientHeight","scrollWidth","offsetWidth","clientWidth","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","pageYOffset","scrollTop","bottom_scroll","innerHeight","scrollBy","positionMoved","targetX","scrollLeft","targetY","targetElm","elementFromPoint","targetScope","targetBefore","isVeritcal","isEmpty","isSwapped","_target","_level","_drag","_drop","drop","treeScope","fnSwapTree","dirAx","targetOffset","offset","_height","_prev","distAxX","distX","prepend","dragEnd","_passed","_isTable","_status","$$apply","bindDrag","unbind","dragStartEvent","cancel","keydownHandler","keyCode","shiftKey","keyupHandler","$on","children","templateUrl","getPath","cache","success","data","factory","line2tree","parentKey","parentId","rootIds","item","_primary","treeObjs","tree2tree","access_child","_copy","_child","_tree","obj","undefined","targetTouches","boundingClientRect","getBoundingClientRect","pageXOffset","startX","lastX","startY","lastY","nowX","nowY","distY","dirX","dirY","lastDirX","lastDirY","distAxY","newAx","moving","templatePath","copyPath","movePath","scopes","path","$id","temp","$filter","_iF","_lenF","_keysF","_state","_filter","_condition","options","name","fnBefore","isPassed","_parentPassed","_childPassed","for_all_descendants_condition","condition","nameChild","_childs","_fnProccess","_check","_callback","callback","_fnAfter","isNodePassed","isChildPassed","__filtered__","__filtered_visible__","_fnConvert","filters","conditions","_options","_fnBefore","_PassedNull","_return","_deptW","_fnAfterDept","opts","_fnOrderBy","fnOrderBy","_fnOrder","list","isString","run","put","call"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.2\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    angular.isUndefinedOrNull = function(val) {\r\n        return angular.isUndefined(val) || val === null\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html']).constant(\r\n        '$TreeDnDClass', {\r\n            tree:        'tree-dnd',\r\n            empty:       'tree-dnd-empty',\r\n            hidden:      'tree-dnd-hidden',\r\n            node:        'tree-dnd-node',\r\n            nodes:       'tree-dnd-nodes',\r\n            handle:      'tree-dnd-handle',\r\n            place:       'tree-dnd-placeholder',\r\n            drag:        'tree-dnd-drag',\r\n            status:      'tree-dnd-status',\r\n            icon: {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    ).directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                /*\r\n                                 * Compile creates a linking function\r\n                                 * that can be used with any scope.\r\n                                 */\r\n                                var link = $compile(new_val);\r\n                                /*\r\n                                 * Executing the linking function\r\n                                 * creates a new element.\r\n                                 */\r\n                                var new_elem = link(scope);\r\n                                // Which we can then append to our DOM element.\r\n                                if(angular.isFunction(element.empty)){\r\n                                    element.empty()\r\n                                }else{\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append(new_elem)\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).directive(\r\n    'treeDndNodeHandle', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope:    true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNodeHandle';\r\n                if (scope.class.handle) {\r\n                    element.addClass(scope.class.handle);\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNode', function () {\r\n        return {\r\n            restrict:   'A',\r\n            replace:    true,\r\n            controller: [\r\n                '$scope', function ($scope) {\r\n                    $scope.$modelValue = null;\r\n                    $scope.$scopeChildren = null;\r\n                    $scope.elementChilds = null;\r\n\r\n                    $scope.prev = function () {\r\n                        return $scope.getPrevGlobal($scope.$modelValue.__index_real__);\r\n                    };\r\n\r\n                    $scope.getData = function () {\r\n                        return $scope.$modelValue;\r\n                    };\r\n\r\n                    $scope.setElementChilds = function (_elements) {\r\n                        $scope.elementChilds = _elements;\r\n                    };\r\n\r\n                    $scope.getScopeNode = function () {\r\n                        return $scope;\r\n                    };\r\n\r\n                }],\r\n            link:       function (scope, element, attrs) {\r\n                scope.$element = element;\r\n                scope.$type = 'TreeDnDNode';\r\n                scope.$icon_class = '';\r\n                scope.$node_class = '';\r\n\r\n                if (scope.class.node) {\r\n                    element.addClass(scope.class.node);\r\n                    scope.$node_class = scope.class.node;\r\n                }\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNode, function (newValue, oldValue, scope) {\r\n                        scope.setScope(scope, newValue);\r\n                        scope.$modelValue = newValue;\r\n                        scope.$icon_class = scope.class.icon[newValue.__icon__];\r\n                    }, true\r\n                );\r\n\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element, attrs) {\r\n                scope.$type = 'TreeDnDNodes';\r\n                scope.$element = element;\r\n                scope.nodes = [];\r\n                scope.$nodes_class = '';\r\n\r\n                if (scope.setElementChilds) {\r\n                    scope.setElementChilds(element);\r\n                }\r\n\r\n                scope.$watch(\r\n                    attrs.treeDndNodes, function (newValue, oldValue, scope) {\r\n                        scope.nodes = newValue;\r\n                    }, true\r\n                );\r\n\r\n                if (scope.class.nodes) {\r\n                    element.addClass(scope.class.nodes);\r\n                    scope.$nodes_class = scope.class.nodes;\r\n                }\r\n            }\r\n        };\r\n    }\r\n).directive(\r\n    'treeDnd', [\r\n        '$timeout', '$http', '$compile', '$window', '$document', '$templateCache',\r\n        '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDOrderBy', '$TreeDnDFilter',\r\n        function ($timeout, $http, $compile, $window, $document, $templateCache,\r\n                  $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDOrderBy, $TreeDnDFilter) {\r\n            return {\r\n                restrict:   'E',\r\n                replace:    true,\r\n                scope:      true,\r\n                controller: [\r\n                    '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\r\n                        $scope.dragEnabled = true;\r\n                        $scope.dropEnabled = true;\r\n                        $scope.dragDelay = 0;\r\n                        $scope.indent = 20;\r\n                        $scope.indent_plus = 15;\r\n                        $scope.indent_unit = 'px';\r\n                        $scope.tree_class = 'table';\r\n                        $scope.primary_key = '__uid__';\r\n                        $scope.enabledMove = true;\r\n                        $scope.statusMove = true;\r\n                        $scope.enabledHotkey = false;\r\n                        $scope.enabledCollapse = null;\r\n                        $scope.enabledFilter = false;\r\n                        $scope.dragBorder = 30;\r\n\r\n                        $scope.horizontal = null;\r\n                        $scope.$type = 'TreeDnD';\r\n                        $scope.colDefinitions = [];\r\n                        $scope.$globals = {};\r\n                        $scope.class = {};\r\n                        $scope.tree_nodes = [];\r\n\r\n                        $scope.elementChilds = null;\r\n\r\n                        $scope.statusElm = null;\r\n                        $scope.placeElm = null;\r\n                        $scope.dragging = null;\r\n\r\n                        $scope.targeting = false;\r\n\r\n                        $scope.for_all_descendants = function (node, fn) {\r\n                            if (angular.isFunction(fn)) {\r\n                                var _i, _len, _nodes;\r\n\r\n                                if (fn(node)) {\r\n                                    return false;\r\n                                }\r\n                                _nodes = node.__children__;\r\n                                _len = _nodes.length;\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    if (!$scope.for_all_descendants(_nodes[_i], fn)) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        $scope.$callbacks = {\r\n                            accept:     function (dragInfo, moveTo, isChanged) {\r\n                                return true;\r\n                            },\r\n                            beforeDrag: function (scopeDrag) {\r\n                                return true;\r\n                            },\r\n                            dragStart:  function (event) {},\r\n                            dragMove:   function (event) {},\r\n                            dragStop:   function (event, skiped) {},\r\n                            beforeDrop: function (event) {\r\n                                return true;\r\n                            },\r\n                            calsIndent: function (level, skipUnit, skipEdge) {\r\n                                var unit = 0,\r\n                                    edge = (skipEdge) ? 0 : $scope.indent_plus;\r\n                                if (!skipUnit) {\r\n                                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                                }\r\n\r\n                                if (level - 1 < 1) {\r\n                                    return edge + unit;\r\n                                } else {\r\n                                    return $scope.indent * (level - 1) + edge + unit;\r\n                                }\r\n                            },\r\n                            droppable:  function () {\r\n                                return $scope.dropEnabled;\r\n                            },\r\n                            draggable:  function () {\r\n                                return $scope.dragEnabled;\r\n                            },\r\n                            changeKey:  function (node) {\r\n                                var _key = node.__uid__;\r\n                                node.__uid__ = Math.random();\r\n                                if (node.__selected__) {\r\n                                    delete(node.__selected__);\r\n                                }\r\n\r\n                                if ($scope.primary_key !== '__uid__') {\r\n                                    _key = '' + node[$scope.primary_key];\r\n                                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                                    node[$scope.primary_key] = _key;\r\n                                }\r\n                                // delete(node.__hashKey__);\r\n                            },\r\n                            clone:      function (node) {\r\n                                var _clone = angular.copy(node);\r\n                                $scope.for_all_descendants(_clone, this.changeKey);\r\n                                return _clone;\r\n                            },\r\n                            remove:     function (node, parent) {\r\n                                return parent.splice(node.__index__, 1)[0];\r\n                            },\r\n                            add:        function (node, pos, parent) {\r\n                                if (parent) {\r\n                                    if (parent.length > -1) {\r\n                                        if (pos > -1) {\r\n                                            parent.splice(pos, 0, node);\r\n                                        } else {\r\n                                            // todo If children need load crazy\r\n                                            parent.push(node);\r\n                                        }\r\n                                    } else {\r\n                                        parent.push(node);\r\n                                    }\r\n                                }\r\n                            },\r\n\r\n                            dropped: function (info, pass, isMove) {\r\n                                if (!info) {\r\n                                    return null;\r\n                                }\r\n\r\n                                if (!info.changed && isMove) {\r\n                                    return false;\r\n                                }\r\n\r\n                                var _node = info.node,\r\n                                    _nodeAdd = null,\r\n                                    _move = info.move,\r\n                                    _parent = null,\r\n                                    _parentRemove = (info.parent || info.drag.treeData),\r\n                                    _parentAdd = (_move.parent || info.target.treeData);\r\n\r\n                                if (isMove) {\r\n                                    _parent = _parentRemove;\r\n                                    if (angular.isUndefinedOrNull(_parent.__children__)) {\r\n                                        _parent = _parent.__children__;\r\n                                    }\r\n                                    _nodeAdd = info.target.$callbacks.remove(_node, _parent);\r\n                                } else {\r\n                                    _nodeAdd = info.target.$callbacks.clone(_node);\r\n                                }\r\n\r\n                                // if node dragging change index in sample node parent\r\n                                // and index node decrement\r\n                                if (isMove &&\r\n                                    info.drag === info.target &&\r\n                                    _parentRemove === _parentAdd &&\r\n                                    _move.pos >= info.node.__index__) {\r\n                                    _move.pos--;\r\n                                }\r\n\r\n                                _parent = _parentAdd;\r\n                                if (_parent.__children__) {\r\n                                    _parent = _parent.__children__;\r\n                                }\r\n\r\n                                info.target.$callbacks.add(_nodeAdd, _move.pos, _parent);\r\n\r\n                                return true;\r\n                            }\r\n                        };\r\n\r\n                        $scope.setElementChilds = function (_elements) {\r\n                            $scope.elementChilds = _elements;\r\n                        };\r\n\r\n                        $scope.setDragging = function (dragInfo) {\r\n                            $scope.dragging = dragInfo;\r\n                        };\r\n\r\n                        $scope.toggleExpand = function (node) {\r\n                            if (node.__children__.length > 0) {\r\n                                node.__expanded__ = !node.__expanded__;\r\n                            }\r\n                        };\r\n\r\n                        $scope.getScopeTree = function () {\r\n                            return $scope;\r\n                        };\r\n\r\n                        $scope.getPrevSibling = function (node) {\r\n                            if (node && node.__index__ > 0) {\r\n                                var _parent, _index = node.__index__ - 1;\r\n\r\n                                if (!angular.isUndefinedOrNull(node.__parent_real__)) {\r\n                                    _parent = $scope.tree_nodes[node.__parent_real__];\r\n                                    return _parent.__children__[_index];\r\n                                } else {\r\n                                    return $scope.treeData[_index];\r\n                                }\r\n                            }\r\n                            return null;\r\n                        };\r\n\r\n                        $scope.getNode = function (index) {\r\n                            if (angular.isUndefinedOrNull(index)) {\r\n                                return null;\r\n                            }\r\n                            return $scope.tree_nodes[index];\r\n                        };\r\n\r\n                        $scope.getHash = function (node) {\r\n                            if ($scope.primary_key === '__uid__') {\r\n                                return '#' + node.__parent__ + '#' + node.__uid__;\r\n                            } else {\r\n                                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n                            }\r\n                        };\r\n\r\n                        $scope.setScope = function (scope, node) {\r\n                            var _hash = $scope.getHash(node);\r\n                            if ($scope.$globals[_hash] !== scope) {\r\n                                $scope.$globals[_hash] = scope;\r\n                            }\r\n                        };\r\n\r\n                        $scope.getScope = function (node) {\r\n                            if (node) {\r\n                                return $scope.$globals[$scope.getHash(node)];\r\n                            } else {\r\n                                return $scope;\r\n                            }\r\n                        };\r\n\r\n                        $scope.enableMove = function (val) {\r\n                            if ((typeof val) === \"boolean\") {\r\n                                $scope.enabledMove = val;\r\n                            } else {\r\n                                $scope.enabledMove = true;\r\n                            }\r\n                        };\r\n\r\n                        $scope.visible = function (node) {\r\n                            if (node) {\r\n                                return node.__visible__ ? node : $scope.visible($scope.tree_nodes[node.__parent_real__]);\r\n                            }\r\n                            return null;\r\n                        };\r\n\r\n                        if ($attrs.enableStatus) {\r\n                            $scope.enabledStatus = false;\r\n\r\n                            $scope.hideStatus = function () {\r\n                                if ($scope.statusElm) {\r\n                                    $scope.statusElm.addClass($scope.class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.refreshStatus = function () {\r\n                                if (!$scope.dragging) {\r\n                                    return;\r\n                                }\r\n\r\n                                if ($scope.enabledStatus) {\r\n                                    var statusElmOld = $scope.statusElm;\r\n                                    if ($scope.enabledMove) {\r\n                                        $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                                    } else {\r\n                                        $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                                    }\r\n\r\n                                    if (statusElmOld !== $scope.statusElm) {\r\n                                        if (statusElmOld) {\r\n                                            $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                            $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                            statusElmOld.remove();\r\n                                        }\r\n                                        $document.find('body').append($scope.statusElm);\r\n\r\n                                    }\r\n\r\n                                    $scope.statusElm.removeClass($scope.class.hidden);\r\n                                }\r\n                            };\r\n\r\n                            $scope.setPositionStatus = function (e, _scope) {\r\n                                if ($scope.statusElm) {\r\n                                    $scope.statusElm.css(\r\n                                        {\r\n                                            'left':    e.pageX + 10 + 'px',\r\n                                            'top':     e.pageY + 15 + 'px',\r\n                                            'z-index': 9999\r\n                                        }\r\n                                    );\r\n                                    $scope.statusElm.addClass($scope.class.status);\r\n                                }\r\n                            };\r\n\r\n                        } else {\r\n                            $scope.enabledStatus = null;\r\n                        }\r\n\r\n                        $scope.initPlace = function (element, dragElm) {\r\n\r\n                            var tagName = null,\r\n                                isTable = false;\r\n\r\n                            if (element) {\r\n                                tagName = element.prop('tagName').toLowerCase();\r\n                                isTable = (tagName === 'tr' || tagName === 'td');\r\n                            } else {\r\n                                tagName = $scope.elementChilds.prop('tagName').toLowerCase();\r\n                                isTable = (tagName === 'tbody' || tagName === 'table');\r\n                            }\r\n\r\n                            if (!$scope.placeElm) {\r\n\r\n                                if (isTable) {\r\n                                    $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                                    var _len_down = $scope.colDefinitions.length;\r\n                                    $scope.placeElm.append(\r\n                                        angular.element($window.document.createElement('td'))\r\n                                            .addClass($scope.class.empty)\r\n                                            .addClass('indented')\r\n                                            .addClass($scope.class.place)\r\n                                    );\r\n                                    while (_len_down-- > 0) {\r\n                                        $scope.placeElm.append(\r\n                                            angular.element($window.document.createElement('td'))\r\n                                                .addClass($scope.class.empty)\r\n                                                .addClass($scope.class.place)\r\n                                        );\r\n                                    }\r\n                                } else {\r\n                                    $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                        .addClass($scope.class.empty)\r\n                                        .addClass($scope.class.place);\r\n                                }\r\n\r\n                            }\r\n\r\n                            if (dragElm) {\r\n                                $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                            }\r\n\r\n                            if (element) {\r\n                                element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                            } else {\r\n                                $scope.elementChilds.append($scope.placeElm);\r\n                            }\r\n\r\n                            return $scope.placeElm;\r\n                        };\r\n\r\n                        $scope.hidePlace = function () {\r\n                            if ($scope.placeElm) {\r\n                                $scope.placeElm.addClass($scope.class.hidden);\r\n                            }\r\n                        };\r\n\r\n                        $scope.showPlace = function () {\r\n                            if ($scope.placeElm) {\r\n                                $scope.placeElm.removeClass($scope.class.hidden);\r\n                            }\r\n                        };\r\n\r\n                        $scope.$safeApply = function (fn) {\r\n                            var phase = this.$root.$$phase;\r\n                            if (phase === '$apply' || phase === '$digest') {\r\n                                if (fn && (typeof(fn) === 'function')) {\r\n                                    fn();\r\n                                }\r\n                            } else {\r\n                                this.$apply(fn);\r\n                            }\r\n                        };\r\n\r\n                        $scope.generateWatch = function (type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter) {\r\n                            nameScope = nameScope || nameAttr;\r\n                            if (typeof type === 'string' || typeof type === 'array' || typeof type === 'object') {\r\n                                if ($attrs[nameAttr]) {\r\n                                    $scope.$watch(\r\n                                        $attrs[nameAttr], function (val) {\r\n                                            if ((typeof type === 'string' && typeof val === type) ||\r\n                                                ((typeof type === 'array' || typeof type === 'object') && type.indexOf(typeof val) > -1)\r\n                                            ) {\r\n                                                $scope[nameScope] = val;\r\n                                            } else {\r\n                                                if (angular.isFunction(valDefault)) {\r\n                                                    $scope[nameScope] = valDefault(val);\r\n                                                } else {\r\n                                                    $scope[nameScope] = valDefault;\r\n                                                }\r\n                                            }\r\n                                            if (angular.isFunction(fnAfter)) {\r\n                                                fnAfter($scope[nameScope]);\r\n                                            }\r\n                                        }, true\r\n                                    );\r\n                                } else {\r\n\r\n                                    if (angular.isFunction(fnNotExist)) {\r\n                                        $scope[nameScope] = fnNotExist();\r\n                                    } else if (!angular.isUndefined(fnNotExist)) {\r\n                                        $scope[nameScope] = fnNotExist;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }],\r\n                link:       function (scope, element, attrs) {\r\n\r\n                    var getExpandOn = function () {\r\n                            if (scope.treeData.length) {\r\n                                var _firstNode = scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                                    _regex = new RegExp(\"^__([a-zA-Z0-9_\\-]*)__$\"),\r\n                                    _len,\r\n                                    i;\r\n                                // Auto get first field with type is string;\r\n                                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                    if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                        scope.expandingProperty = _keys[i];\r\n                                        return;\r\n                                    }\r\n                                }\r\n\r\n                                // Auto get first\r\n                                if (angular.isUndefinedOrNull(scope.expandingProperty)) {\r\n                                    scope.expandingProperty = _keys[0];\r\n                                }\r\n\r\n                            }\r\n                        },\r\n                        getColDefs = function () {\r\n                            // Auto get Defs except attribute __level__ ....\r\n                            if (scope.treeData.length) {\r\n                                var _col_defs = [], _firstNode = scope.treeData[0],\r\n                                    _regex = new RegExp(\"(^__([a-zA-Z0-9_\\-]*)__$|^\" + scope.expandingProperty + \"$)\"),\r\n                                    _keys = Object.keys(_firstNode),\r\n                                    i, _len;\r\n                                // Auto get first field with type is string;\r\n                                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                                    if (typeof (_firstNode[_keys[i]]) === 'string' && !_regex.test(_keys[i])) {\r\n                                        _col_defs.push(\r\n                                            {\r\n                                                field: _keys[i]\r\n                                            }\r\n                                        );\r\n                                    }\r\n                                }\r\n                                scope.colDefinitions = _col_defs;\r\n                            }\r\n                        },\r\n                        do_f = function (root, node, parent, parent_real, level, visible, index) {\r\n                            var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n                            if (!angular.isArray(node.__children__)) {\r\n                                node.__children__ = [];\r\n                            }\r\n\r\n                            node.__parent_real__ = parent_real;\r\n                            node.__parent__ = parent;\r\n                            _len = node.__children__.length;\r\n\r\n                            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                                node.__expanded__ = level < expand_level;\r\n                            }\r\n\r\n                            if (_len === 0) {\r\n                                _icon = -1;\r\n                            } else {\r\n                                if (node.__expanded__) {\r\n                                    _icon = 1;\r\n                                } else {\r\n                                    _icon = 0;\r\n                                }\r\n                            }\r\n                            // Insert item vertically\r\n                            _index_real = root.length;\r\n                            node.__index__ = index;\r\n                            node.__index_real__ = _index_real;\r\n                            node.__level__ = level;\r\n                            node.__icon__ = _icon;\r\n                            node.__visible__ = visible;\r\n\r\n                            if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                                node.__uid__ = \"\" + Math.random();\r\n                            }\r\n\r\n                            root.push(node);\r\n\r\n                            // Check node children\r\n                            _dept = 1;\r\n                            if (_len > 0) {\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    _dept += do_f(\r\n                                        root,\r\n                                        node.__children__[_i],\r\n                                        (scope.primary_key === '__uid__') ? node.__uid__ : node[scope.primary_key],\r\n                                        _index_real,\r\n                                        level + 1,\r\n                                        visible && node.__expanded__,\r\n                                        _i\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                            _hashKey = scope.getHash(node);\r\n\r\n                            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                                node.__hashKey__ = _hashKey;\r\n                                // delete(scope.$globals[_hashKey]);\r\n                            }\r\n\r\n                            node.__dept__ = _dept;\r\n\r\n                            return _dept;\r\n                        },\r\n                        reload_data = function () {\r\n                            var _data = scope.treeData,\r\n                                _len = _data.length,\r\n                                _tree_nodes = [];\r\n\r\n                            if (!attrs.expandOn) {\r\n                                getExpandOn();\r\n                            }\r\n\r\n                            if (!attrs.columnDefs) {\r\n                                getColDefs();\r\n                            }\r\n\r\n                            if (!angular.isUndefinedOrNull(scope.orderBy)) {\r\n                                _data = $TreeDnDOrderBy(_data, scope.orderBy);\r\n                            }\r\n\r\n                            if (!angular.isUndefinedOrNull(scope.filter)) {\r\n                                _data = $TreeDnDFilter(_data, scope.filter, scope.filterOptions);\r\n                            }\r\n\r\n                            if (_len > 0) {\r\n                                var _i,\r\n                                    _offset, _max, _min, _keys,\r\n                                    _deptTotal = 0;\r\n\r\n                                for (_i = 0; _i < _len; _i++) {\r\n                                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                                }\r\n\r\n                                // clear Element Empty\r\n                                _keys = Object.keys(scope.$globals);\r\n                                _len = scope.$globals.length;\r\n                                _offset = _len - _deptTotal;\r\n\r\n                                if (_offset !== 0) {\r\n                                    _max = _len - _offset;\r\n                                    _min = _max - Math.abs(_offset);\r\n                                    for (_i = _min; _i < _max; _i++) {\r\n                                        delete(scope.$globals[_keys[_i]]);\r\n                                    }\r\n                                }\r\n                            }\r\n                            scope.tree_nodes = _tree_nodes;\r\n\r\n                            return scope.tree_nodes;\r\n                        },\r\n                        _defaultFilterOption = {\r\n                            showParent: true,\r\n                            showChild:  false\r\n                        },\r\n                        _watches = [\r\n                            ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                            ['boolean', 'enableMove', null, 'enabledMove'],\r\n                            ['boolean', 'horizontal', null],\r\n                            [['object', 'string', 'array', 'function'], 'orderBy', attrs.orderBy],\r\n                            ['string', 'primaryKey', attrs.primaryKey, 'primary_key', '__uid__'],\r\n                            ['string', 'indentUnit', attrs.indentUnit, 'indent_unit'],\r\n                            [\r\n                                'boolean', 'enableCollapse',\r\n                                (typeof attrs.enableCollapse) === \"boolean\" ? attrs.enableCollapse : null,\r\n                                'enabledCollapse'\r\n                            ],\r\n                            [\r\n                                'boolean', 'enableDrag',\r\n                                (typeof attrs.enableDrag) === \"boolean\" ? attrs.enableDrag : null\r\n                                , 'dragEnabled'\r\n                            ],\r\n                            [\r\n                                'boolean', 'enableDrop',\r\n                                (typeof attrs.enableDrop) === \"boolean\" ? attrs.enableDrop : null,\r\n                                'dropEnabled'\r\n                            ],\r\n\r\n                            [\r\n                                'number', 'dragBorder',\r\n                                (typeof attrs.dragBorder) === \"number\" ? attrs.dragBorder : null\r\n                            ],\r\n\r\n                            ['number', 'indent', (typeof attrs.indent) === \"number\" ? attrs.indent : 0],\r\n                            [\r\n                                'number', 'indentPlus',\r\n                                (typeof attrs.indentPlus) === \"number\" ? attrs.indentPlus : 0, 'indent_plus'],\r\n                            ['number', 'dragDelay', (typeof attrs.dragDelay) === \"number\" ? attrs.dragDelay : 0],\r\n                            [\r\n                                'null', 'callbacks',\r\n                                function (optCallbacks) {\r\n                                    angular.forEach(\r\n                                        optCallbacks, function (value, key) {\r\n                                            if (typeof value === \"function\") {\r\n                                                if (scope.$callbacks[key]) {\r\n                                                    scope.$callbacks[key] = value;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    )\r\n                                    return scope.$callbacks;\r\n                                },\r\n                                '$callbacks'\r\n                            ],\r\n                            [\r\n                                'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                                if (isHotkey) {\r\n                                    scope.enabledMove = false;\r\n                                } else {\r\n                                    scope.enabledMove = scope.statusMove;\r\n                                }\r\n                            }],\r\n                            [['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn],\r\n                            [['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs],\r\n\r\n                            [\r\n                                'string', 'templateCopy', attrs.templateCopy, 'templateCopy', null, function (_url) {\r\n                                if (_url && $templateCache.get(_url)) {\r\n                                    $TreeDnDTemplate.setCopy(_url, scope);\r\n                                }\r\n                            }],\r\n\r\n                            [\r\n                                'string', 'templateMove', attrs.templateMove, 'templateMove', null, function (_url) {\r\n                                if (_url && $templateCache.get(_url)) {\r\n                                    $TreeDnDTemplate.setMove(_url, scope);\r\n                                }\r\n                            }],\r\n                            [\r\n                                ['object', 'array'], 'filter', null, 'filter', null, function (filter) {\r\n                                scope.enabledFilter = !angular.isUndefinedOrNull(filter);\r\n                                reload_data();\r\n                            }],\r\n                            [\r\n                                'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                                _defaultFilterOption, function (option) {\r\n                                if (typeof option === \"object\") {\r\n                                    scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                                }\r\n                            }]\r\n                        ], w, lenW = _watches.length,\r\n                        _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW;\r\n\r\n                    for (w = 0; w < lenW; w++) {\r\n                        _typeW = _watches[w][0];\r\n                        _nameW = _watches[w][1];\r\n                        _defaultW = _watches[w][2];\r\n                        _scopeW = _watches[w][3];\r\n                        _NotW = _watches[w][4];\r\n                        _AfterW = _watches[w][5];\r\n                        scope.generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW);\r\n                    }\r\n\r\n                    if (attrs.treeData) {\r\n                        var _first = true,\r\n                            fnWatchTreeData = function () {\r\n                                var unWatchTreeData = scope.$watch(\r\n                                    attrs.treeData, function (val, oldValue) {\r\n                                        if (!angular.equals(val, oldValue) || _first) {\r\n                                            if (typeof val === 'object' || typeof val === 'array') {\r\n                                                scope.treeData = val;\r\n                                            } else {\r\n                                                scope.treeData = [];\r\n                                            }\r\n\r\n                                            unWatchTreeData();\r\n                                            _first = false;\r\n                                            reload_data();\r\n                                            fnWatchTreeData();\r\n                                        }\r\n                                    }, true\r\n                                );\r\n                            }\r\n                        fnWatchTreeData();\r\n                    }\r\n\r\n                    if (attrs.treeClass) {\r\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(\" \" + attrs.treeClass)) {\r\n                            scope.tree_class = attrs.treeClass.trim();\r\n                        } else {\r\n                            scope.$watch(\r\n                                'treeClass', function (val) {\r\n                                    switch (typeof val) {\r\n                                        case 'string':\r\n                                            scope.tree_class = val;\r\n                                            break;\r\n                                        case 'object':\r\n                                            angular.extend(scope.class, val);\r\n                                            break;\r\n                                        default:\r\n                                            scope.tree_class = attrs.treeClass;\r\n                                            break;\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                    }\r\n\r\n                    // End watch\r\n                    //\r\n                    scope.class = {};\r\n                    angular.extend(scope.class, $TreeDnDClass);\r\n\r\n                    var expand_level, n, tree;\r\n\r\n                    angular.extend(\r\n                        scope.class.icon, {\r\n                            '1':  attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                            '0':  attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                            '-1': attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n                        }\r\n                    );\r\n\r\n                    attrs.expandLevel = attrs.expandLevel ? attrs.expandLevel : '3';\r\n\r\n                    expand_level = parseInt(attrs.expandLevel, 10);\r\n                    if (!scope.treeData) {\r\n                        scope.treeData = [];\r\n                    }\r\n\r\n                    scope.onClick = function (node) {\r\n                        if (angular.isFunction(scope.on_click)) {\r\n                            $timeout(\r\n                                function () {\r\n                                    scope.on_click({node: node});\r\n                                }\r\n                            );\r\n                        }\r\n                    };\r\n\r\n                    scope.onSelect = function (node) {\r\n                        if (node !== tree.selected_node) {\r\n                            tree.select_node(node);\r\n                        }\r\n                    };\r\n\r\n                    if (!scope.tree || !angular.isObject(scope.tree)) {\r\n                        scope.tree = {};\r\n                    }\r\n                    tree = {\r\n                        selected_node:                     null,\r\n                        for_all_descendants:               scope.for_all_descendants,\r\n                        select_node:                       function (node) {\r\n                            if (!node) {\r\n                                if (tree.selected_node) {\r\n                                    delete(tree.selected_node.__selected__);\r\n                                }\r\n                                tree.selected_node = null;\r\n                                return null;\r\n                            }\r\n\r\n                            if (node !== tree.selected_node) {\r\n                                if (tree.selected_node) {\r\n                                    delete(tree.selected_node.__selected__);\r\n                                }\r\n                                node.__selected__ = true;\r\n                                tree.selected_node = node;\r\n                                tree.expand_all_parents(node);\r\n                                if (angular.isFunction(scope.on_select)) {\r\n                                    $timeout(\r\n                                        function () {\r\n                                            scope.on_select({node: node});\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n                            return node;\r\n                        },\r\n                        deselect_node:                     function () {\r\n                            var node = null;\r\n                            if (tree.selected_node) {\r\n                                delete(tree.selected_node.__selected__);\r\n                                node = tree.selected_node;\r\n                                tree.selected_node = null;\r\n                            }\r\n                            return node;\r\n                        },\r\n                        get_parent:                        function (node) {\r\n                            if (node && node.__parent_real__ !== null) {\r\n                                return scope.tree_nodes[node.__parent_real__];\r\n                            }\r\n                            return null;\r\n                        },\r\n                        for_all_ancestors:                 function (child, fn) {\r\n                            var parent;\r\n                            parent = tree.get_parent(child);\r\n                            if (parent) {\r\n                                if (fn(parent)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                return tree.for_all_ancestors(parent, fn);\r\n                            }\r\n                            return true;\r\n                        },\r\n                        expand_all_parents:                function (child) {\r\n                            return tree.for_all_ancestors(\r\n                                child, function (node) {\r\n                                    node.__expanded__ = true;\r\n                                }\r\n                            );\r\n                        },\r\n                        reload_data:                       function () {\r\n                            return reload_data();\r\n                        },\r\n                        add_node:                          function (parent, new_node, index) {\r\n                            if ((typeof index) !== \"number\") {\r\n                                if (parent) {\r\n                                    parent.__children__.push(new_node);\r\n                                    parent.__expanded__ = true;\r\n                                } else {\r\n                                    scope.treeData.push(new_node);\r\n                                }\r\n                            } else {\r\n                                if (parent) {\r\n                                    parent.__children__.splice(index, 0, new_node);\r\n                                    parent.__expanded__ = true;\r\n                                } else {\r\n                                    scope.treeData.splice(index, 0, new_node);\r\n                                }\r\n                            }\r\n                            return new_node;\r\n                        },\r\n                        add_node_root:                     function (new_node) {\r\n                            tree.add_node(null, new_node);\r\n                            return new_node;\r\n                        },\r\n                        expand_all:                        function () {\r\n                            var i = 0,\r\n                                len = scope.treeData.length,\r\n                                fnCallback = function (node) {\r\n                                    node.__expanded__ = true;\r\n                                };\r\n                            for (i = 0; i < len; i++) {\r\n                                tree.for_all_descendants(\r\n                                    scope.treeData[i], fnCallback\r\n                                );\r\n                            }\r\n                        },\r\n                        collapse_all:                      function () {\r\n                            var i = 0,\r\n                                len = scope.treeData.length,\r\n                                fnCallback = function (node) {\r\n                                    node.__expanded__ = false;\r\n                                };\r\n                            for (i = 0; i < len; i++) {\r\n                                tree.for_all_descendants(\r\n                                    scope.treeData[i], fnCallback\r\n                                );\r\n                            }\r\n                        },\r\n                        remove_node:                       function (node) {\r\n                            node = node || tree.selected_node;\r\n                            if (node) {\r\n                                var parent;\r\n                                if (node.__parent_real__) {\r\n                                    parent = tree.get_parent(node).__children__;\r\n                                } else {\r\n                                    parent = scope.treeData;\r\n                                }\r\n\r\n                                parent.splice(node.__index__, 1);\r\n\r\n                                if (tree.selected_node === node) {\r\n                                    tree.selected_node = null;\r\n                                }\r\n                            }\r\n                        },\r\n                        expand_node:                       function (node) {\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                node.__expanded__ = true;\r\n                                return node;\r\n                            }\r\n                        },\r\n                        collapse_node:                     function (node) {\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                node.__expanded__ = false;\r\n                                return node;\r\n                            }\r\n                        },\r\n                        get_selected_node:                 function () {\r\n                            return tree.selected_node;\r\n                        },\r\n                        get_first_node:                    function () {\r\n                            n = scope.treeData.length;\r\n                            if (n > 0) {\r\n                                return scope.treeData[0];\r\n                            }\r\n                            return null;\r\n                        },\r\n                        get_children:                      function (node) {\r\n                            return node.__children__;\r\n                        },\r\n                        get_siblings:                      function (node) {\r\n                            var p, siblings;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                p = tree.get_parent(node);\r\n                                if (p) {\r\n                                    siblings = p.__children__;\r\n                                } else {\r\n                                    siblings = scope.treeData;\r\n                                }\r\n                                return siblings;\r\n                            }\r\n                        },\r\n                        get_next_sibling:                  function (node) {\r\n                            var siblings;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                siblings = tree.get_siblings(node);\r\n                                n = siblings.length;\r\n                                if (node.__index__ < n) {\r\n                                    return siblings[node.__index__ + 1];\r\n                                }\r\n                            }\r\n                        },\r\n                        get_prev_sibling:                  function (node) {\r\n                            var siblings;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            siblings = tree.get_siblings(node);\r\n                            if (node.__index__ > 0) {\r\n                                return siblings[node.__index__ - 1];\r\n                            }\r\n                        },\r\n                        get_first_child:                   function (node) {\r\n                            var _ref;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                if (((_ref = node.__children__) ? _ref.length : void 0) > 0) {\r\n                                    return node.__children__[0];\r\n                                }\r\n                            }\r\n                            return null;\r\n                        },\r\n                        get_closest_ancestor_next_sibling: function (node) {\r\n                            var next, parent;\r\n                            next = tree.get_next_sibling(node);\r\n                            if (next) {\r\n                                return next;\r\n                            } else {\r\n                                parent = tree.get_parent(node);\r\n                                return tree.get_closest_ancestor_next_sibling(parent);\r\n                            }\r\n                        },\r\n                        get_next_node:                     function (node) {\r\n                            var next;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                next = tree.get_first_child(node);\r\n                                if (next) {\r\n                                    return next;\r\n                                } else {\r\n                                    return tree.get_closest_ancestor_next_sibling(node);\r\n                                }\r\n                            }\r\n                        },\r\n                        get_prev_node:                     function (node) {\r\n                            var parent, prev_sibling;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                prev_sibling = tree.get_prev_sibling(node);\r\n                                if (prev_sibling) {\r\n                                    return tree.get_last_descendant(prev_sibling);\r\n                                } else {\r\n                                    parent = tree.get_parent(node);\r\n                                    return parent;\r\n                                }\r\n                            }\r\n                        },\r\n                        get_last_descendant:               function (node) {\r\n                            var last_child;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            n = node.__children__.length;\r\n                            if (n === 0) {\r\n                                return node;\r\n                            } else {\r\n                                last_child = node.__children__[n - 1];\r\n                                return tree.get_last_descendant(last_child);\r\n                            }\r\n                        },\r\n                        select_parent_node:                function (node) {\r\n                            var p;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                p = tree.get_parent(node);\r\n                                if (p) {\r\n                                    return tree.select_node(p);\r\n                                }\r\n                            }\r\n                        },\r\n                        select_first_node:                 function () {\r\n                            return tree.select_node(tree.get_first_node());\r\n                        },\r\n                        select_next_sibling:               function (node) {\r\n                            var next;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                next = tree.get_next_sibling(node);\r\n                                if (next) {\r\n                                    return tree.select_node(next);\r\n                                }\r\n                            }\r\n                        },\r\n                        select_prev_sibling:               function (node) {\r\n                            var prev;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                prev = tree.get_prev_sibling(node);\r\n                                if (prev) {\r\n                                    return tree.select_node(prev);\r\n                                }\r\n                            }\r\n                        },\r\n                        select_next_node:                  function (node) {\r\n                            var next;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                next = tree.get_next_node(node);\r\n                                if (next) {\r\n                                    return tree.select_node(next);\r\n                                }\r\n                            }\r\n                        },\r\n                        select_prev_node:                  function (node) {\r\n                            var prev;\r\n                            if (!node) {\r\n                                node = tree.selected_node;\r\n                            }\r\n                            if (node) {\r\n                                prev = tree.get_prev_node(node);\r\n                                if (prev) {\r\n                                    return tree.select_node(prev);\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    angular.extend(scope.tree, tree);\r\n                    tree = scope.tree;\r\n\r\n                    var hasTouch = 'ontouchstart' in window,\r\n                        startPos, firstMoving, dragInfo, pos,\r\n                        placeElm, dragElm,\r\n                        dragDelaying = true, dragStarted = false, dragTimer = null,\r\n                        body = document.body, html = document.documentElement,\r\n                        document_height, document_width,\r\n                        offsetEdge,\r\n                        dragStart = function (e) {\r\n                            if (!hasTouch && (e.button === 2 || e.which === 3)) {\r\n                                // disable right click\r\n                                return;\r\n                            }\r\n                            if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) { // event has already fired in other scope.\r\n                                return;\r\n                            }\r\n                            // the element which is clicked.\r\n                            var eventElm = angular.element(e.target),\r\n                                eventScope = eventElm.scope();\r\n\r\n                            if (!eventScope || !eventScope.$type) {\r\n                                return;\r\n                            }\r\n                            // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                            //     return;\r\n                            // }\r\n\r\n                            if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                                return;\r\n                            }\r\n\r\n                            var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                                dragScope = null;\r\n                            if (eventElmTagName === 'input' || eventElmTagName === 'textarea' || eventElmTagName === 'button' || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                                return;\r\n                            }\r\n                            // check if it or it's parents has a 'data-nodrag' attribute\r\n                            while (eventElm && eventElm[0] && eventElm[0] !== element) {\r\n                                if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                                    return;\r\n                                }\r\n                                eventElm = eventElm.parent();\r\n                            }\r\n\r\n                            e.uiTreeDragging = true; // stop event bubbling\r\n                            if (e.originalEvent) {\r\n                                e.originalEvent.uiTreeDragging = true;\r\n                            }\r\n                            e.preventDefault();\r\n\r\n                            dragScope = eventScope.getScopeNode();\r\n\r\n                            firstMoving = true;\r\n\r\n                            if (!scope.$callbacks.beforeDrag(dragScope)) {\r\n                                return;\r\n                            }\r\n\r\n                            var eventObj = $TreeDnDHelper.eventObj(e),\r\n                                tagName = dragScope.$element.prop('tagName').toLowerCase(),\r\n                                isTable = (tagName === 'tr');\r\n\r\n                            dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                            scope.setDragging(dragInfo);\r\n\r\n                            pos = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                            if (isTable) {\r\n                                dragElm = angular.element($window.document.createElement('table'))\r\n                                    .addClass(scope.class.tree)\r\n                                    .addClass(scope.class.drag)\r\n                                    .addClass(scope.tree_class);\r\n                            } else {\r\n                                dragElm = angular.element($window.document.createElement('ul'))\r\n                                    .addClass(scope.class.drag)\r\n                                    .addClass('tree-dnd-nodes')\r\n                                    .addClass(scope.tree_class);\r\n                            }\r\n\r\n                            dragElm.css(\r\n                                {\r\n                                    'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                                    'z-index': 9995\r\n                                }\r\n                            );\r\n\r\n                            offsetEdge = 0;\r\n                            var _width = $TreeDnDHelper.width(dragScope.$element),\r\n                                _scope = dragScope,\r\n                                _element = _scope.$element,\r\n                                _clone = null,\r\n                                _needCollapse = scope.enabledCollapse,\r\n                                _copied = false,\r\n                                _tbody = null;\r\n\r\n                            if (isTable) {\r\n                                offsetEdge = dragInfo.node.__level__ - 1;\r\n                                _tbody = angular.element($window.document.createElement('tbody'));\r\n\r\n                                scope.for_all_descendants(\r\n                                    dragInfo.node, function (_node) {\r\n                                        _scope = scope.getScope(_node);\r\n                                        _element = _scope.$element;\r\n\r\n                                        if (!_copied) {\r\n                                            _clone = _element.clone();\r\n\r\n                                            $TreeDnDHelper.replaceIndent(\r\n                                                _scope,\r\n                                                _clone,\r\n                                                _node.__level__ - offsetEdge,\r\n                                                'padding-left'\r\n                                            );\r\n\r\n                                            _tbody.append(_clone);\r\n\r\n                                            // skip all, just clone parent\r\n                                            if (_needCollapse) {\r\n                                                _copied = true;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (scope.enabledMove && scope.class.hidden) {\r\n                                            _element.addClass(scope.class.hidden);\r\n                                        }\r\n                                    }\r\n                                );\r\n\r\n                                dragElm.append(_tbody);\r\n                            } else {\r\n\r\n                                if (!_needCollapse) {\r\n                                    _clone = _element.clone();\r\n                                } else {\r\n                                    var _holder = _scope.elementChilds,\r\n                                        _swaper = angular.element(\"<swaped />\");\r\n\r\n                                    // Insert tag `<holder>` & move _holder into tag `<swaper>`;\r\n                                    _holder.after(angular.element(\"<holder />\"));\r\n                                    _swaper.append(_holder);\r\n\r\n                                    // Clone without Children & remove tag `<holder>`\r\n                                    _clone = _element.clone();\r\n                                    _clone.find(\"holder\").remove();\r\n\r\n                                    // bring childs back frome `swaper` & remove tag `<swaper>`\r\n                                    _element.find(\"holder\").replaceWith(_holder);\r\n\r\n                                    // Reset & clear all;\r\n                                    _swaper.remove();\r\n                                    _holder = null;\r\n                                }\r\n\r\n                                dragElm.append(_clone);\r\n                                if (scope.enabledMove && scope.class.hidden) {\r\n                                    _element.addClass(scope.class.hidden);\r\n                                }\r\n                            }\r\n\r\n                            dragElm.css(\r\n                                {\r\n                                    'left': eventObj.pageX - pos.offsetX + scope.$callbacks.calsIndent(\r\n                                        offsetEdge + 1,\r\n                                        true,\r\n                                        true\r\n                                    )       + 'px',\r\n                                    'top':  eventObj.pageY - pos.offsetY + 'px'\r\n                                }\r\n                            );\r\n                            // moving item with descendant\r\n                            $document.find('body').append(dragElm);\r\n\r\n                            placeElm = scope.initPlace(dragScope.$element, dragElm);\r\n\r\n                            if (isTable) {\r\n                                $TreeDnDHelper.replaceIndent(scope, placeElm, dragInfo.node.__level__);\r\n                            }\r\n\r\n                            scope.showPlace();\r\n                            scope.targeting = true;\r\n\r\n                            placeElm.css('width', _width);\r\n\r\n                            if (scope.enabledStatus) {\r\n                                scope.refreshStatus();\r\n                                scope.setPositionStatus(e);\r\n                            }\r\n\r\n                            angular.element($document).bind('touchend', dragEndEvent);\r\n                            angular.element($document).bind('touchcancel', dragEndEvent);\r\n                            angular.element($document).bind('touchmove', dragMoveEvent);\r\n                            angular.element($document).bind('mouseup', dragEndEvent);\r\n                            angular.element($document).bind('mousemove', dragMoveEvent);\r\n                            angular.element($document).bind('mouseleave', dragCancelEvent);\r\n\r\n                            document_height = Math.max(\r\n                                body.scrollHeight,\r\n                                body.offsetHeight,\r\n                                html.clientHeight,\r\n                                html.scrollHeight,\r\n                                html.offsetHeight\r\n                            );\r\n\r\n                            document_width = Math.max(\r\n                                body.scrollWidth,\r\n                                body.offsetWidth,\r\n                                html.clientWidth,\r\n                                html.scrollWidth,\r\n                                html.offsetWidth\r\n                            );\r\n                        },\r\n                        dragMove = function (e) {\r\n                            if (!dragStarted) {\r\n                                if (!dragDelaying) {\r\n                                    dragStarted = true;\r\n                                    scope.$safeApply(\r\n                                        function () {\r\n                                            scope.$callbacks.dragStart(dragInfo);\r\n                                        }\r\n                                    );\r\n                                }\r\n                                return;\r\n                            }\r\n\r\n                            if (dragElm) {\r\n                                e.preventDefault();\r\n                                if ($window.getSelection) {\r\n                                    $window.getSelection().removeAllRanges();\r\n                                } else if ($window.document.selection) {\r\n                                    $window.document.selection.empty();\r\n                                }\r\n\r\n                                var eventObj = $TreeDnDHelper.eventObj(e),\r\n                                    prev,\r\n                                    leftElmPos = eventObj.pageX - pos.offsetX,\r\n                                    topElmPos = eventObj.pageY - pos.offsetY;\r\n\r\n                                //dragElm can't leave the screen on the left\r\n                                if (leftElmPos < 0) {\r\n                                    leftElmPos = 0;\r\n                                }\r\n                                //dragElm can't leave the screen on the top\r\n                                if (topElmPos < 0) {\r\n                                    topElmPos = 0;\r\n                                }\r\n                                //dragElm can't leave the screen on the bottom\r\n                                if ((topElmPos + 10) > document_height) {\r\n                                    topElmPos = document_height - 10;\r\n                                }\r\n                                //dragElm can't leave the screen on the right\r\n                                if ((leftElmPos + 10) > document_width) {\r\n                                    leftElmPos = document_width - 10;\r\n                                }\r\n\r\n                                dragElm.css(\r\n                                    {\r\n                                        'left': leftElmPos + scope.$callbacks.calsIndent(\r\n                                            offsetEdge + 1,\r\n                                            true,\r\n                                            true\r\n                                        )       + 'px',\r\n                                        'top':  topElmPos + 'px'\r\n                                    }\r\n                                );\r\n\r\n                                if (scope.enabledStatus) {\r\n                                    scope.setPositionStatus(e);\r\n                                }\r\n\r\n                                var top_scroll = window.pageYOffset || $window.document.documentElement.scrollTop,\r\n                                    bottom_scroll = top_scroll + (window.innerHeight || $window.document.clientHeight || $window.document.clientHeight);\r\n                                // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                                if (bottom_scroll < eventObj.pageY && bottom_scroll <= document_height) {\r\n                                    window.scrollBy(0, 10);\r\n                                }\r\n                                // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                                if (top_scroll > eventObj.pageY) {\r\n                                    window.scrollBy(0, -10);\r\n                                }\r\n\r\n                                $TreeDnDHelper.positionMoved(e, pos, firstMoving);\r\n\r\n                                if (firstMoving) {\r\n                                    firstMoving = false;\r\n                                    return;\r\n                                }\r\n                                // check if add it as a child node first\r\n\r\n                                var targetX = eventObj.pageX - $window.document.body.scrollLeft,\r\n                                    targetY = eventObj.pageY - (window.pageYOffset || $window.document.documentElement.scrollTop),\r\n\r\n                                    // when using elementFromPoint() inside an iframe, you have to call\r\n                                    // elementFromPoint() twice to make sure IE8 returns the correct value\r\n                                    // $window.document.elementFromPoint(targetX, targetY);\r\n                                    targetElm = angular.element(\r\n                                        $window.document.elementFromPoint(\r\n                                            targetX,\r\n                                            targetY\r\n                                        )\r\n                                    ),\r\n                                    targetScope = targetElm.scope(),\r\n                                    targetBefore = null,\r\n                                    tagName = null,\r\n                                    isTable = false,\r\n                                    isChanged = true,\r\n                                    isVeritcal = true,\r\n                                    isEmpty = false,\r\n                                    isSwapped = false,\r\n                                    _scope = null,\r\n                                    _target = null,\r\n                                    _move = dragInfo.move,\r\n                                    _level = 1,\r\n                                    _drag = dragInfo.node,\r\n                                    _drop = dragInfo.drop,\r\n                                    treeScope = dragInfo.target,\r\n                                    fnSwapTree = function () {\r\n                                        treeScope = targetScope.getScopeTree();\r\n                                        _target = dragInfo.target;\r\n                                        if (dragInfo.target !== treeScope) {\r\n                                            if (treeScope.$callbacks.droppable()) {\r\n                                                // Replace by place-holder new\r\n                                                _target.hidePlace();\r\n                                                _target.targeting = false;\r\n                                                treeScope.targeting = true;\r\n\r\n                                                dragInfo.target = treeScope;\r\n                                                placeElm = treeScope.initPlace(targetScope.$element, dragElm);\r\n\r\n                                                _target = null;\r\n                                                isSwapped = true;\r\n                                            } else {\r\n                                                // Not allowed Drop Item\r\n                                                return false;\r\n                                            }\r\n                                        }\r\n\r\n                                        return true;\r\n                                    };\r\n\r\n                                if (!targetScope) {\r\n                                    return;\r\n                                }\r\n\r\n                                if (targetScope.getScopeNode) {\r\n                                    targetScope = targetScope.getScopeNode();\r\n\r\n                                    if (!fnSwapTree()) {\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                        if (targetScope.tree_nodes) {\r\n                                            if (targetScope.tree_nodes.length) {\r\n                                                // target is place holder\r\n                                                // return;\r\n                                                targetScope = dragInfo.scope;\r\n                                                isVeritcal = false;\r\n                                            } else {\r\n                                                if (!fnSwapTree()) {\r\n                                                    return;\r\n                                                }\r\n                                                // Empty\r\n                                                isEmpty = true;\r\n                                            }\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    } else {\r\n                                        return;\r\n                                    }\r\n                                }\r\n\r\n                                if (pos.dirAx && !isSwapped) {\r\n                                    isVeritcal = false;\r\n                                    targetScope = dragInfo.scope;\r\n                                }\r\n\r\n                                if (!targetScope.$element && !targetScope) {\r\n                                    return;\r\n                                }\r\n\r\n                                if (isEmpty) {\r\n                                    tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tbody' || tagName === 'table' || tagName === 'tr' || tagName === 'td');\r\n\r\n                                    _move.parent = null;\r\n                                    _move.pos = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    tagName = targetScope.$element.prop('tagName').toLowerCase();\r\n                                    isTable = (tagName === 'tr' || tagName === 'tbody' || tagName === 'td');\r\n\r\n                                    // move vertical\r\n                                    if (isVeritcal) {\r\n                                        targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n\r\n                                        var targetOffset = $TreeDnDHelper.offset(targetElm);\r\n                                        if (targetScope.horizontal && !isTable) {\r\n                                            targetBefore = eventObj.pageX < (targetOffset.left + $TreeDnDHelper.width(targetElm) / 2);\r\n                                        } else {\r\n                                            if (isTable) {\r\n                                                targetBefore = eventObj.pageY < (targetOffset.top + $TreeDnDHelper.height(targetElm) / 2);\r\n                                            } else {\r\n                                                var _height = $TreeDnDHelper.height(targetElm) - $TreeDnDHelper.height(targetScope.elementChilds);\r\n                                                if (eventObj.pageY > targetOffset.top + _height) {\r\n                                                    return;\r\n                                                }\r\n                                                targetBefore = eventObj.pageY < (targetOffset.top + _height / 2);\r\n                                            }\r\n                                        }\r\n\r\n                                        _target = targetScope.getData();\r\n                                        _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                                        if (targetBefore) {\r\n                                            var _prev;\r\n                                            _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                            _move.parent = _parent;\r\n                                            _move.pos = (angular.isUndefinedOrNull(_prev)) ? 0 : _prev.__index__ + 1;\r\n\r\n                                            _drop = _prev;\r\n                                        } else {\r\n                                            if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n\r\n                                                _move.parent = _target;\r\n                                                _move.pos = 0;\r\n                                                _drop = null;\r\n                                            } else {\r\n\r\n                                                _move.parent = _target;\r\n                                                _move.pos = _target.__index__ + 1;\r\n\r\n                                                _drop = _target;\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        // move horizontal\r\n                                        if (pos.dirAx && pos.distAxX >= treeScope.dragBorder) {\r\n                                            pos.distAxX = 0;\r\n                                            // increase horizontal level if previous sibling exists and is not collapsed\r\n                                            if (pos.distX > 0) {\r\n                                                _parent = _drop;\r\n                                                if (!_parent) {\r\n                                                    if (_move.pos - 1 >= 0) {\r\n                                                        _parent = _move.parent.__children__[_move.pos - 1];\r\n                                                    } else {\r\n                                                        return;\r\n                                                    }\r\n                                                }\r\n\r\n                                                if (dragInfo.drag === dragInfo.target && _parent === _drag && scope.enabledMove) {\r\n                                                    _parent = treeScope.getPrevSibling(_parent);\r\n                                                }\r\n\r\n                                                if (_parent && _parent.__visible__) {\r\n                                                    var _len = _parent.__children__.length;\r\n\r\n                                                    _move.parent = _parent;\r\n                                                    _move.pos = _len;\r\n\r\n                                                    if (_len > 0) {\r\n                                                        _drop = _parent.__children__[_len - 1];\r\n                                                    } else {\r\n                                                        _drop = null;\r\n                                                    }\r\n                                                } else {\r\n                                                    // Not changed\r\n                                                    return;\r\n                                                }\r\n                                            } else if (pos.distX < 0) {\r\n                                                _target = _move.parent;\r\n                                                if (_target &&\r\n                                                    (_target.__children__.length === 0 ||\r\n                                                     _target.__children__.length - 1 < _move.pos ||\r\n                                                     _target.__children__.length - 1 === _drag.__index__ && scope.enabledMove)\r\n                                                ) {\r\n                                                    _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                                    _move.parent = _parent;\r\n                                                    _move.pos = _target.__index__ + 1;\r\n\r\n                                                    _drop = _target;\r\n                                                } else {\r\n                                                    // Not changed\r\n                                                    return;\r\n                                                }\r\n                                            } else {\r\n                                                return;\r\n                                            }\r\n                                        } else {\r\n                                            // limited\r\n                                            return;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                if (dragInfo.drag === dragInfo.target && _move.parent &&\r\n                                    _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                                    _drag.__index__ === _move.pos\r\n                                ) {\r\n                                    isChanged = false;\r\n                                }\r\n\r\n                                if (treeScope.$callbacks.accept(dragInfo, _move, isChanged)) {\r\n                                    dragInfo.move = _move;\r\n                                    dragInfo.drop = _drop;\r\n                                    dragInfo.changed = isChanged;\r\n                                    dragInfo.scope = targetScope;\r\n\r\n                                    if (isTable) {\r\n                                        _level = (angular.isUndefinedOrNull(_move.parent)) ? 1 : _move.parent.__level__ + 1;\r\n\r\n                                        $TreeDnDHelper.replaceIndent(\r\n                                            treeScope,\r\n                                            placeElm,\r\n                                            _level\r\n                                        );\r\n\r\n                                        if (_drop) {\r\n                                            var _parent = (_move.parent ? _move.parent.__children__ : null ) || dragInfo.target.treeData;\r\n\r\n                                            if (_drop.__index__ < _parent.length - 1) {\r\n                                                // Find fast\r\n                                                _drop = _parent[_drop.__index__ + 1];\r\n                                                _scope = dragInfo.target.getScope(_drop);\r\n                                                _scope.$element[0].parentNode.insertBefore(\r\n                                                    placeElm[0],\r\n                                                    _scope.$element[0]\r\n                                                );\r\n                                            } else {\r\n                                                _target = dragInfo.target.tree.get_last_descendant(_drop);\r\n                                                _scope = dragInfo.target.getScope(_target);\r\n                                                _scope.$element.after(placeElm);\r\n                                            }\r\n                                        } else {\r\n                                            _scope = dragInfo.target.getScope(_move.parent);\r\n                                            if (_scope) {\r\n                                                if (_move.parent) {\r\n                                                    _scope.$element.after(placeElm);\r\n\r\n                                                } else {\r\n                                                    _scope.elementChilds.prepend(placeElm);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        _scope = dragInfo.target.getScope(_drop || _move.parent);\r\n                                        if (_drop) {\r\n                                            _scope.$element.after(placeElm);\r\n                                        } else {\r\n                                            _scope.elementChilds.prepend(placeElm);\r\n                                        }\r\n                                    }\r\n\r\n                                    treeScope.showPlace();\r\n\r\n                                    scope.$safeApply(\r\n                                        function () {\r\n                                            scope.$callbacks.dragMove(dragInfo);\r\n                                        }\r\n                                    );\r\n                                }\r\n\r\n                            }\r\n                        },\r\n                        dragEnd = function (e) {\r\n                            e.preventDefault();\r\n                            if (dragElm) {\r\n                                var _passed = false;\r\n                                scope.$safeApply(\r\n                                    function () {\r\n                                        _passed = scope.$callbacks.beforeDrop(dragInfo);\r\n                                    }\r\n                                );\r\n\r\n                                var _scope = scope.getScope(dragInfo.node),\r\n                                    tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                    _isTable = (tagName === 'tr'),\r\n                                    _element = _scope.$element;\r\n\r\n                                dragElm.remove();\r\n                                dragElm = null;\r\n\r\n                                if (scope.enabledStatus) {\r\n                                    scope.hideStatus();\r\n                                }\r\n\r\n                                var _status = false;\r\n                                if (scope.$$apply) {\r\n                                    scope.$safeApply(\r\n                                        function () {\r\n\r\n                                            _status = scope.$callbacks.dropped(\r\n                                                dragInfo,\r\n                                                _passed,\r\n                                                scope.enabledMove\r\n                                            );\r\n\r\n                                            if (!_status) {\r\n                                                // rollback all\r\n                                                if (_isTable) {\r\n                                                    scope.for_all_descendants(\r\n                                                        dragInfo.node, function (_node) {\r\n                                                            _scope = scope.getScope(_node);\r\n                                                            _element = _scope.$element;\r\n\r\n                                                            if (_scope.class.hidden) {\r\n                                                                _element.removeClass(scope.class.hidden);\r\n                                                            }\r\n                                                        }\r\n                                                    );\r\n                                                } else {\r\n                                                    if (_scope.class.hidden) {\r\n                                                        _element.removeClass(scope.class.hidden);\r\n                                                    }\r\n                                                }\r\n\r\n                                            }\r\n                                        }\r\n                                    );\r\n                                } else {\r\n                                    bindDrag();\r\n                                }\r\n\r\n                                scope.$safeApply(\r\n                                    function () {\r\n                                        scope.$callbacks.dragStop(dragInfo, _status);\r\n                                    }\r\n                                );\r\n\r\n                                dragInfo.target.hidePlace();\r\n                                dragInfo.target.targeting = false;\r\n\r\n                                dragInfo = null;\r\n                                scope.$$apply = false;\r\n                                scope.setDragging(null);\r\n                            }\r\n                            angular.element($document).unbind('touchend', dragEndEvent); // Mobile\r\n                            angular.element($document).unbind('touchcancel', dragEndEvent); // Mobile\r\n                            angular.element($document).unbind('touchmove', dragMoveEvent); // Mobile\r\n                            angular.element($document).unbind('mouseup', dragEndEvent);\r\n                            angular.element($document).unbind('mousemove', dragMoveEvent);\r\n                            angular.element($window.document.body).unbind('mouseleave', dragCancelEvent);\r\n                        },\r\n                        dragStartEvent = function (e) {\r\n                            if (scope.$callbacks.draggable()) {\r\n                                dragStart(e);\r\n                            }\r\n                        },\r\n                        dragMoveEvent = function (e) {\r\n                            dragMove(e);\r\n                        },\r\n                        dragEndEvent = function (e) {\r\n                            scope.$$apply = true;\r\n                            scope.dragEnd(e);\r\n                        },\r\n                        dragCancelEvent = function (e) {\r\n                            scope.dragEnd(e);\r\n                        },\r\n                        bindDrag = function () {\r\n                            element.bind(\r\n                                'touchstart mousedown', function (e) {\r\n                                    dragDelaying = true;\r\n                                    dragStarted = false;\r\n                                    dragStartEvent(e);\r\n                                    dragTimer = $timeout(\r\n                                        function () {\r\n                                            dragDelaying = false;\r\n                                        }, scope.dragDelay\r\n                                    );\r\n                                }\r\n                            );\r\n                            element.bind(\r\n                                'touchend touchcancel mouseup', function () {\r\n                                    $timeout.cancel(dragTimer);\r\n                                }\r\n                            );\r\n                        },\r\n                        keydownHandler = function (e) {\r\n                            if (e.keyCode === 27) {\r\n                                if (scope.enabledStatus) {\r\n                                    scope.hideStatus();\r\n                                }\r\n\r\n                                scope.$$apply = false;\r\n                                scope.dragEnd(e);\r\n                            } else {\r\n                                if (scope.enabledHotkey && e.shiftKey) {\r\n                                    scope.enableMove(true);\r\n                                    if (scope.enabledStatus) {\r\n                                        scope.refreshStatus();\r\n                                    }\r\n\r\n                                    if (!dragInfo) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    var _scope = scope.getScope(dragInfo.node),\r\n                                        tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                        _element = _scope.$element;\r\n\r\n                                    if (tagName === 'tr') {\r\n                                        scope.for_all_descendants(\r\n                                            dragInfo.node, function (_node) {\r\n                                                _scope = scope.getScope(_node);\r\n                                                _element = _scope.$element;\r\n\r\n                                                if (scope.class.hidden) {\r\n                                                    _element.addClass(scope.class.hidden);\r\n                                                }\r\n                                            }\r\n                                        );\r\n                                    } else {\r\n                                        if (scope.class.hidden) {\r\n                                            _element.addClass(scope.class.hidden);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        keyupHandler = function (e) {\r\n                            if (scope.enabledHotkey && !e.shiftKey) {\r\n                                scope.enableMove(false);\r\n\r\n                                if (scope.enabledStatus) {\r\n                                    scope.refreshStatus();\r\n                                }\r\n\r\n                                if (!dragInfo) {\r\n                                    return;\r\n                                }\r\n\r\n                                var _scope = scope.getScope(dragInfo.node),\r\n                                    tagName = _scope.$element.prop('tagName').toLowerCase(),\r\n                                    _element = _scope.$element;\r\n\r\n                                if (tagName === 'tr') {\r\n                                    scope.for_all_descendants(\r\n                                        dragInfo.node, function (_node) {\r\n\r\n                                            _scope = scope.getScope(_node);\r\n                                            _element = _scope.$element;\r\n\r\n                                            if (scope.class.hidden) {\r\n                                                _element.removeClass(scope.class.hidden);\r\n                                            }\r\n                                        }\r\n                                    );\r\n                                } else {\r\n                                    if (scope.class.hidden) {\r\n                                        _element.removeClass(scope.class.hidden);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                    scope.dragEnd = function (e) {\r\n                        dragEnd(e);\r\n                    };\r\n\r\n                    bindDrag();\r\n\r\n                    angular.element($window.document.body).bind(\"keydown\", keydownHandler);\r\n                    angular.element($window.document.body).bind(\"keyup\", keyupHandler);\r\n                    //unbind handler that retains scope\r\n                    scope.$on(\r\n                        '$destroy', function () {\r\n                            angular.element($window.document.body).unbind(\"keydown\", keydownHandler);\r\n                            angular.element($window.document.body).unbind(\"keyup\", keyupHandler);\r\n                            if (scope.statusElm) {\r\n                                scope.statusElm.remove();\r\n                            }\r\n\r\n                            if (scope.placeElm) {\r\n                                scope.placeElm.remove();\r\n                            }\r\n                        }\r\n                    );\r\n\r\n                    scope.$safeApply(\r\n                        function () {\r\n                            if (element.children().length === 0 || attrs.templateUrl) {\r\n                                if (angular.isFunction(element.empty)) {\r\n                                    element.empty()\r\n                                } else {\r\n                                    element.html('');\r\n                                }\r\n\r\n                                $http.get(\r\n                                    attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                                    {cache: $templateCache}\r\n                                ).success(\r\n                                    function (data) {\r\n                                        element.append($compile(data.trim())(scope));\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDConvert', function () {\r\n        return {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function (data, parentKey) {\r\n                var access_child = function (data) {\r\n                    var _tree = [];\r\n                    var _i, _len = data.length, _copy, _child;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _copy = angular.copy(data[_i]);\r\n                        if (angular.isArray(_copy[parentKey]) && _copy[parentKey].length > 0) {\r\n                            _child = access_child(_copy[parentKey]);\r\n                            delete(_copy[parentKey]);\r\n                            _copy.__children__ = _child;\r\n                        }\r\n                        _tree.push(_copy);\r\n                    }\r\n                    return _tree;\r\n                };\r\n\r\n                return access_child(data);\r\n            }\r\n        };\r\n    }\r\n).factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            return {\r\n                calsIndent:      null,\r\n                nodrag:          function (targetElm) {\r\n                    return (typeof targetElm.attr('data-nodrag')) !== \"undefined\";\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr = attr ? attr : 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDTemplate', [\r\n        '$templateCache', function ($templateCache) {\r\n            var templatePath = 'template/TreeDnD/TreeDnD.html';\r\n            var copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html';\r\n            var movePath = 'template/TreeDnD/TreeDnDStatusMove.html';\r\n            var scopes = {};\r\n            return {\r\n                setMove: function (path, scope) {\r\n                    if (!scopes[scope.$id]) {\r\n                        scopes[scope.$id] = {};\r\n                    }\r\n                    scopes[scope.$id].movePath = path;\r\n                },\r\n                setCopy: function (path, scope) {\r\n                    if (!scopes[scope.$id]) {\r\n                        scopes[scope.$id] = {};\r\n                    }\r\n                    scopes[scope.$id].copyPath = path;\r\n                },\r\n                getPath: function () {\r\n                    return templatePath;\r\n                },\r\n                getCopy: function (scope) {\r\n                    var temp;\r\n                    if (scopes[scope.$id] && scopes[scope.$id].copyPath &&\r\n                        (temp = $templateCache.get(scopes[scope.$id].copyPath))) {\r\n                        return temp;\r\n                    }\r\n                    return $templateCache.get(copyPath);\r\n                },\r\n                getMove: function (scope) {\r\n                    var temp;\r\n                    if (scopes[scope.$id] && scopes[scope.$id].movePath &&\r\n                        (temp = $templateCache.get(scopes[scope.$id].movePath))) {\r\n                        return temp;\r\n                    }\r\n                    return $templateCache.get(movePath);\r\n                }\r\n            };\r\n\r\n        }]\r\n).factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            var _callback, _key,\r\n                _iF, _lenF, _keysF,\r\n                _state, _passed,\r\n                _filter, _condition,\r\n                for_all_descendants = function (options, node, name, fnBefore, fnAfter, isPassed) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _nodes, _state, _parentPassed = false, _childPassed = false;\r\n\r\n                    _state = fnBefore(options, node, isPassed);\r\n                    _parentPassed = _state;\r\n\r\n                    if (!angular.isUndefinedOrNull(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _state = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                name,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                _parentPassed\r\n                            );\r\n\r\n                            _childPassed = _childPassed || _state;\r\n                        }\r\n                    }\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, _parentPassed, _childPassed);\r\n                    }\r\n\r\n                    return _parentPassed || _childPassed;\r\n                },\r\n                for_all_descendants_condition = function (options, node, condition, nameChild, fnBefore, fnAfter) {\r\n                    if (!angular.isFunction(fnBefore)) {\r\n                        return null;\r\n                    }\r\n\r\n                    var _i, _len, _childs, _passed = false;\r\n\r\n                    _passed = fnBefore(options, node, condition);\r\n\r\n                    if (!angular.isUndefinedOrNull(condition[nameChild])) {\r\n                        _childs = condition[nameChild];\r\n                        _len = _childs.length;\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            for_all_descendants_condition(\r\n                                options,\r\n                                node,\r\n                                _childs[_i],\r\n                                nameChild,\r\n                                fnBefore,\r\n                                fnAfter\r\n                            );\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isFunction(fnAfter)) {\r\n                        fnAfter(options, node, condition, _passed);\r\n                    }\r\n\r\n                    return _state;\r\n                },\r\n                _fnProccess = function (options, node, condition) {\r\n\r\n                    var _key = condition.field,\r\n                        _callback = condition.callback,\r\n                        _check,\r\n                        _state = null;\r\n\r\n                    if (!angular.isUndefinedOrNull(node[_key])) {\r\n                        _check = node[_key];\r\n                        if (angular.isFunction(_callback)) {\r\n                            _state = _callback(_check, $filter);\r\n                        } else {\r\n                            if (typeof _callback === 'boolean') {\r\n                                _check = !!_check;\r\n                                _state = _check === _callback;\r\n                            } else if (!angular.isUndefinedOrNull(_callback)) {\r\n                                var _regex = new RegExp(_callback);\r\n                                _state = _regex.test(_check);\r\n                            } else {\r\n                                _state = null;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return _state;\r\n                },\r\n                _fnAfter = function (options, node, isNodePassed, isChildPassed) {\r\n                    if (isNodePassed === true) {\r\n                        node.__filtered__ = true;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    } else if (isChildPassed === true && options.showParent === true) {\r\n                        node.__filtered__ = false;\r\n                        node.__filtered_visible__ = true;\r\n                        return; //jmp\r\n                    }\r\n\r\n                    // remove attr __filtered__\r\n                    delete(node.__filtered__);\r\n                    delete(node.__filtered_visible__);\r\n                },\r\n                _fnConvert = function (filters) {\r\n                    // convert filter object to array filter\r\n                    if (angular.isObject(filters)) {\r\n                        _keysF = Object.keys(filters);\r\n                        _lenF = _keysF.length;\r\n                        _filter = [];\r\n\r\n                        if (_lenF > 0) {\r\n                            _condition = {\r\n                                field:    _keysF[0],\r\n                                callback: filters[_keysF[0]]\r\n                            };\r\n                            _filter.push(_condition);\r\n\r\n                            for (_iF = 1; _iF < _lenF; _iF++) {\r\n                                _state = {\r\n                                    field:    _keysF[_iF],\r\n                                    callback: filters[_keysF[_iF]]\r\n                                };\r\n\r\n                                _condition.conditions = [];\r\n                                _condition.conditions.push(_state);\r\n                                _condition = _state;\r\n                            }\r\n                        }\r\n                        return _filter;\r\n                    }\r\n                    else {\r\n                        return filters;\r\n                    }\r\n                };\r\n\r\n            return function (treeData, filters, _options) {\r\n                if (!angular.isArray(treeData)\r\n                    || treeData.length === 0\r\n                    || !(angular.isArray(filters) || angular.isObject(filters))\r\n                    || filters.length === 0) {\r\n                    return treeData;\r\n                }\r\n\r\n                var _i, _len,\r\n                    _iF, _lenF, _keysF,\r\n                    _state, _passed,\r\n                    _filter, _condition;\r\n\r\n                _filter = _fnConvert(filters);\r\n                _lenF = _filter.length;\r\n                var _fnBefore = function (options, node, isPassed) {\r\n                    var _PassedNull = 0,\r\n                        _passed = 0,\r\n                        _return = false,\r\n                        _deptW = 0, _fnAfterDept = function (opts, node, condition, isPassed) {\r\n                            _deptW++;\r\n\r\n                            if (isPassed === true) {\r\n                                _passed++;\r\n                            } else if (isPassed === null) {\r\n                                _PassedNull++;\r\n                            }\r\n                        };\r\n\r\n                    if (_lenF === 0) {\r\n                        node.__filtered__ = true;\r\n                        _return = true;\r\n                    } else {\r\n                        for (_iF = 0; _iF < _lenF; _iF++) {\r\n                            _deptW = 0;\r\n                            for_all_descendants_condition(\r\n                                options,\r\n                                node,\r\n                                _filter[_iF], 'conditions',\r\n                                _fnProccess, _fnAfterDept\r\n                            );\r\n\r\n                            if (_PassedNull === _deptW) {\r\n                                _return = true;\r\n                            } else {\r\n                                if (_PassedNull + _passed === _deptW) {\r\n                                    _return = true;\r\n                                } else if (isPassed === true && options.showChild === true) {\r\n                                    _return = true;\r\n                                } else {\r\n                                    _return = false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return _return;\r\n                };\r\n\r\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                    for_all_descendants(\r\n                        _options,\r\n                        treeData[_i],\r\n                        '__children__',\r\n                        _fnBefore, _fnAfter\r\n                    );\r\n                }\r\n\r\n                return treeData;\r\n            };\r\n        }]\r\n).factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy =  $filter('orderBy'),\r\n                 for_all_descendants = function (options, node, name, fnOrderBy) {\r\n                     var _i, _len, _nodes;\r\n\r\n                     if (!angular.isUndefinedOrNull(node[name])) {\r\n                         _nodes = node[name];\r\n                         _len = _nodes.length;\r\n                         for (_i = 0; _i < _len; _i++) {\r\n                             _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                         }\r\n\r\n                         node[name] = fnOrderBy(node[name], options);\r\n                     }\r\n                     return node;\r\n                 },\r\n\r\n                 _fnOrder = function(list, orderBy){\r\n                     return _fnOrderBy(list, orderBy);\r\n                 };\r\n\r\n            return function (treeData, orderBy) {\r\n                if (!angular.isArray(treeData)\r\n                    || treeData.length === 0\r\n                    || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy))\r\n                    || orderBy.length === 0) {\r\n                    return treeData;\r\n                }\r\n\r\n                var _i, _len,\r\n                    _iF, _lenF, _keysF;\r\n\r\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                    treeData[_i] = for_all_descendants(\r\n                        orderBy,\r\n                        treeData[_i],\r\n                        '__children__',\r\n                        _fnOrder\r\n                    );\r\n                }\r\n\r\n                treeData = _fnOrder(treeData, orderBy);\r\n                return treeData;\r\n            };\r\n        }]\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            \"\" + \"<table ng-class=\\\"tree_class\\\">\"\r\n            + \"    <thead>\"\r\n            + \"  <tr>\"\r\n            + \"     <th ng-class=\\\"expandingProperty.titleClass\\\" ng-style=\\\"expandingProperty.titleStyle\\\">\"\r\n            + \"         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}\"\r\n            + \"        </th>\"\r\n            + \"        <th ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.titleClass\\\" ng-style=\\\"col.titleStyle\\\">\"\r\n            + \"         {{col.displayName || col.field}}\"\r\n            + \"     </th>\"\r\n            + \"    </tr>\"\r\n            + \"    </thead>\"\r\n            + \" <tbody tree-dnd-nodes=\\\"tree_nodes\\\">\"\r\n            + \"  <tr tree-dnd-node=\\\"node\\\" ng-repeat=\\\"node in nodes track by node.__hashKey__ \\\" ng-show=\\\"node.__visible__\\\"\"\r\n            + \"       ng-click=\\\"onSelect(node)\\\" ng-class=\\\"(node.__selected__ ? ' active':'')\\\">\"\r\n            + \"        <td ng-if=\\\"!expandingProperty.template\\\" tree-dnd-node-handle\"\r\n            + \"         ng-style=\\\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {'padding-left': $callbacks.calsIndent(node.__level__)}\\\"\"\r\n            + \"          ng-class=\\\"expandingProperty.cellClass\\\"\"\r\n            + \"            compile=\\\"expandingProperty.cellTemplate\\\">\"\r\n            + \"              <a data-nodrag>\"\r\n            + \"                  <i ng-class=\\\"$icon_class\\\" ng-click=\\\"toggleExpand(node)\\\"\"\r\n            + \"                     class=\\\"tree-icon\\\"></i>\"\r\n            + \"              </a>\"\r\n            + \"             {{node[expandingProperty.field] || node[expandingProperty]}}\"\r\n            + \"       </td>\"\r\n            + \"        <td ng-if=\\\"expandingProperty.template\\\" compile=\\\"expandingProperty.template\\\"></td>\"\r\n            + \"        <td ng-repeat=\\\"col in colDefinitions\\\" ng-class=\\\"col.cellClass\\\" ng-style=\\\"col.cellStyle\\\"\"\r\n            + \"            compile=\\\"col.cellTemplate\\\">\"\r\n            + \"            {{node[col.field]}}\"\r\n            + \"       </td>\"\r\n            + \"    </tr>\"\r\n            + \"    </tbody>\"\r\n            + \"</table>\"\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n}).call(window);"],"sourceRoot":"/source/"}